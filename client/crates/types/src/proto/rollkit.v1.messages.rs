// This file is @generated by prost-build.
/// InitChainRequest contains the genesis parameters for chain initialization
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitChainRequest {
    /// Timestamp marking chain start time in UTC
    #[prost(message, optional, tag = "1")]
    pub genesis_time: ::core::option::Option<::prost_types::Timestamp>,
    /// First block height (must be > 0)
    #[prost(uint64, tag = "2")]
    pub initial_height: u64,
    /// Unique identifier string for the blockchain
    #[prost(string, tag = "3")]
    pub chain_id: ::prost::alloc::string::String,
}
/// InitChainResponse contains the initial state and configuration
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitChainResponse {
    /// Hash representing initial state
    #[prost(bytes = "vec", tag = "1")]
    pub state_root: ::prost::alloc::vec::Vec<u8>,
    /// Maximum allowed bytes for transactions in a block
    #[prost(uint64, tag = "2")]
    pub max_bytes: u64,
}
/// GetTxsRequest is the request for fetching transactions
///
/// Empty for now, may include filtering criteria in the future
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTxsRequest {}
/// GetTxsResponse contains the available transactions
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTxsResponse {
    /// Slice of valid transactions from mempool
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub txs: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
/// ExecuteTxsRequest contains transactions and block context for execution
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteTxsRequest {
    /// Ordered list of transactions to execute
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub txs: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// Height of block being created (must be > 0)
    #[prost(uint64, tag = "2")]
    pub block_height: u64,
    /// Block creation time in UTC
    #[prost(message, optional, tag = "3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Previous block's state root hash
    #[prost(bytes = "vec", tag = "4")]
    pub prev_state_root: ::prost::alloc::vec::Vec<u8>,
}
/// ExecuteTxsResponse contains the result of transaction execution
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteTxsResponse {
    /// New state root after executing transactions
    #[prost(bytes = "vec", tag = "1")]
    pub updated_state_root: ::prost::alloc::vec::Vec<u8>,
    /// Maximum allowed transaction size (may change with protocol updates)
    #[prost(uint64, tag = "2")]
    pub max_bytes: u64,
}
/// SetFinalRequest marks a block as finalized
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetFinalRequest {
    /// Height of block to finalize
    #[prost(uint64, tag = "1")]
    pub block_height: u64,
}
/// SetFinalResponse indicates whether finalization was successful
///
/// Empty response, errors are returned via gRPC status
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetFinalResponse {}
