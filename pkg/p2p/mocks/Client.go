// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	conngater "github.com/libp2p/go-libp2p/p2p/net/conngater"

	host "github.com/libp2p/go-libp2p/core/host"

	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	pubsub "github.com/libp2p/go-libp2p-pubsub"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectionGater provides a mock function with given fields:
func (_m *Client) ConnectionGater() *conngater.BasicConnectionGater {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConnectionGater")
	}

	var r0 *conngater.BasicConnectionGater
	if rf, ok := ret.Get(0).(func() *conngater.BasicConnectionGater); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*conngater.BasicConnectionGater)
		}
	}

	return r0
}

// Host provides a mock function with given fields:
func (_m *Client) Host() host.Host {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Host")
	}

	var r0 host.Host
	if rf, ok := ret.Get(0).(func() host.Host); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(host.Host)
		}
	}

	return r0
}

// Info provides a mock function with given fields:
func (_m *Client) Info() (peer.ID, string, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 peer.ID
	var r1 string
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func() (peer.ID, string, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() peer.ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(peer.ID)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() string); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func() error); ok {
		r3 = rf()
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// PeerIDs provides a mock function with given fields:
func (_m *Client) PeerIDs() []peer.ID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PeerIDs")
	}

	var r0 []peer.ID
	if rf, ok := ret.Get(0).(func() []peer.ID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.ID)
		}
	}

	return r0
}

// PubSub provides a mock function with given fields:
func (_m *Client) PubSub() *pubsub.PubSub {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PubSub")
	}

	var r0 *pubsub.PubSub
	if rf, ok := ret.Get(0).(func() *pubsub.PubSub); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.PubSub)
		}
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *Client) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: _a0
func (_m *Client) Stop(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}