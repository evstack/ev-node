package cmd

import (
	"bufio"
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"

	rollconf "github.com/rollkit/rollkit/pkg/config"
)

var docsDirectory = "./docs/cmd"

// NewDocsGenCmd creates a new docs-gen command that generates cli documentation for the provided root command
func NewDocsGenCmd(rootCmd *cobra.Command, appName string) *cobra.Command {
	cmd := &cobra.Command{
		Use:   "docs-gen",
		Short: "Generate documentation for rollkit CLI",
		RunE: func(cmd *cobra.Command, args []string) error {
			// Clear out the docs directory
			err := os.RemoveAll(docsDirectory)
			if err != nil {
				return err
			}
			// Initiate the docs directory
			err = os.MkdirAll(docsDirectory, rollconf.DefaultDirPerm)
			if err != nil {
				return err
			}
			err = doc.GenMarkdownTree(rootCmd, docsDirectory)
			if err != nil {
				return err
			}
			return docCleanUp(appName)
		},
	}

	return cmd
}

// docCleanUp is a helper function to clean up the generated documentation by
// replacing the absolute path with $HOME/.rollkit and removing the auto
// generated comment about the generation date.
func docCleanUp(appName string) error {
	var searchAndReplace = []struct {
		search  string
		replace string
	}{
		{fmt.Sprintf(`(\"\/(?:Users\/\w+|home\/\w+|[^\/]+)\/\.%s\")`, appName), fmt.Sprintf(`"HOME/.%s"`, appName)},
		{`(--moniker string\s+node name \(default ")[^"]+(")`, `${1}Your Computer Username${2}`},
	}

	// Regular expression pattern to match lines containing the specified string
	deletePattern := `.*###### Auto generated by spf13/cobra.*`

	// Compile regular expression pattern
	sAndRRegex := make([]struct {
		regex   *regexp.Regexp
		replace string
	}, 0, len(searchAndReplace))

	for _, sr := range searchAndReplace {
		regex, err := regexp.Compile(sr.search)
		if err != nil {
			return err
		}
		sAndRRegex = append(sAndRRegex, struct {
			regex   *regexp.Regexp
			replace string
		}{regex, sr.replace})
	}

	deleteRegex, err := regexp.Compile(deletePattern)
	if err != nil {
		return err
	}

	// Traverse directory
	return filepath.Walk(docsDirectory, func(path string, info os.FileInfo, err error) (returnErr error) {
		if err != nil {
			return err
		}
		if info.IsDir() {
			return nil
		}

		// Read file
		file, err := os.Open(path) //nolint:gosec
		if err != nil {
			return err
		}
		defer func() {
			returnErr = file.Close()
		}()

		scanner := bufio.NewScanner(file)
		var lines []string
		for scanner.Scan() {
			line := scanner.Text()
			// Check if line contains the specified string, and skip if found
			if deleteRegex.MatchString(line) {
				continue
			}

			// Perform search and replace using regular expression
			for _, sr := range sAndRRegex {
				line = sr.regex.ReplaceAllString(line, sr.replace)
			}

			lines = append(lines, line)
		}

		// Write modified content back to file
		err = os.WriteFile(path, []byte(strings.Join(lines, "\n")), 0600)
		if err != nil {
			return err
		}

		return nil
	})
}
