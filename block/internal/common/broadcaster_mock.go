// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package common

import (
	"context"

	"github.com/celestiaorg/go-header"
	"github.com/libp2p/go-libp2p-pubsub"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBroadcaster creates a new instance of MockBroadcaster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBroadcaster[H header.Header[H]](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBroadcaster[H] {
	mock := &MockBroadcaster[H]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBroadcaster is an autogenerated mock type for the Broadcaster type
type MockBroadcaster[H header.Header[H]] struct {
	mock.Mock
}

type MockBroadcaster_Expecter[H header.Header[H]] struct {
	mock *mock.Mock
}

func (_m *MockBroadcaster[H]) EXPECT() *MockBroadcaster_Expecter[H] {
	return &MockBroadcaster_Expecter[H]{mock: &_m.Mock}
}

// Store provides a mock function for the type MockBroadcaster
func (_mock *MockBroadcaster[H]) Store() header.Store[H] {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 header.Store[H]
	if returnFunc, ok := ret.Get(0).(func() header.Store[H]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(header.Store[H])
		}
	}
	return r0
}

// MockBroadcaster_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockBroadcaster_Store_Call[H header.Header[H]] struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
func (_e *MockBroadcaster_Expecter[H]) Store() *MockBroadcaster_Store_Call[H] {
	return &MockBroadcaster_Store_Call[H]{Call: _e.mock.On("Store")}
}

func (_c *MockBroadcaster_Store_Call[H]) Run(run func()) *MockBroadcaster_Store_Call[H] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBroadcaster_Store_Call[H]) Return(store header.Store[H]) *MockBroadcaster_Store_Call[H] {
	_c.Call.Return(store)
	return _c
}

func (_c *MockBroadcaster_Store_Call[H]) RunAndReturn(run func() header.Store[H]) *MockBroadcaster_Store_Call[H] {
	_c.Call.Return(run)
	return _c
}

// WriteToStoreAndBroadcast provides a mock function for the type MockBroadcaster
func (_mock *MockBroadcaster[H]) WriteToStoreAndBroadcast(ctx context.Context, payload H, opts ...pubsub.PubOpt) error {
	// pubsub.PubOpt
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, payload)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteToStoreAndBroadcast")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, H, ...pubsub.PubOpt) error); ok {
		r0 = returnFunc(ctx, payload, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBroadcaster_WriteToStoreAndBroadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteToStoreAndBroadcast'
type MockBroadcaster_WriteToStoreAndBroadcast_Call[H header.Header[H]] struct {
	*mock.Call
}

// WriteToStoreAndBroadcast is a helper method to define mock.On call
//   - ctx context.Context
//   - payload H
//   - opts ...pubsub.PubOpt
func (_e *MockBroadcaster_Expecter[H]) WriteToStoreAndBroadcast(ctx interface{}, payload interface{}, opts ...interface{}) *MockBroadcaster_WriteToStoreAndBroadcast_Call[H] {
	return &MockBroadcaster_WriteToStoreAndBroadcast_Call[H]{Call: _e.mock.On("WriteToStoreAndBroadcast",
		append([]interface{}{ctx, payload}, opts...)...)}
}

func (_c *MockBroadcaster_WriteToStoreAndBroadcast_Call[H]) Run(run func(ctx context.Context, payload H, opts ...pubsub.PubOpt)) *MockBroadcaster_WriteToStoreAndBroadcast_Call[H] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 H
		if args[1] != nil {
			arg1 = args[1].(H)
		}
		var arg2 []pubsub.PubOpt
		variadicArgs := make([]pubsub.PubOpt, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(pubsub.PubOpt)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockBroadcaster_WriteToStoreAndBroadcast_Call[H]) Return(err error) *MockBroadcaster_WriteToStoreAndBroadcast_Call[H] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBroadcaster_WriteToStoreAndBroadcast_Call[H]) RunAndReturn(run func(ctx context.Context, payload H, opts ...pubsub.PubOpt) error) *MockBroadcaster_WriteToStoreAndBroadcast_Call[H] {
	_c.Call.Return(run)
	return _c
}
