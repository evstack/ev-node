// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/evstack/ev-node/block/internal/common"
	"github.com/evstack/ev-node/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// ClearProcessedData provides a mock function for the type MockManager
func (_mock *MockManager) ClearProcessedData(height uint64) {
	_mock.Called(height)
	return
}

// MockManager_ClearProcessedData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearProcessedData'
type MockManager_ClearProcessedData_Call struct {
	*mock.Call
}

// ClearProcessedData is a helper method to define mock.On call
//   - height uint64
func (_e *MockManager_Expecter) ClearProcessedData(height interface{}) *MockManager_ClearProcessedData_Call {
	return &MockManager_ClearProcessedData_Call{Call: _e.mock.On("ClearProcessedData", height)}
}

func (_c *MockManager_ClearProcessedData_Call) Run(run func(height uint64)) *MockManager_ClearProcessedData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_ClearProcessedData_Call) Return() *MockManager_ClearProcessedData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_ClearProcessedData_Call) RunAndReturn(run func(height uint64)) *MockManager_ClearProcessedData_Call {
	_c.Run(run)
	return _c
}

// ClearProcessedHeader provides a mock function for the type MockManager
func (_mock *MockManager) ClearProcessedHeader(height uint64) {
	_mock.Called(height)
	return
}

// MockManager_ClearProcessedHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearProcessedHeader'
type MockManager_ClearProcessedHeader_Call struct {
	*mock.Call
}

// ClearProcessedHeader is a helper method to define mock.On call
//   - height uint64
func (_e *MockManager_Expecter) ClearProcessedHeader(height interface{}) *MockManager_ClearProcessedHeader_Call {
	return &MockManager_ClearProcessedHeader_Call{Call: _e.mock.On("ClearProcessedHeader", height)}
}

func (_c *MockManager_ClearProcessedHeader_Call) Run(run func(height uint64)) *MockManager_ClearProcessedHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_ClearProcessedHeader_Call) Return() *MockManager_ClearProcessedHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_ClearProcessedHeader_Call) RunAndReturn(run func(height uint64)) *MockManager_ClearProcessedHeader_Call {
	_c.Run(run)
	return _c
}

// DeletePendingEvent provides a mock function for the type MockManager
func (_mock *MockManager) DeletePendingEvent(height uint64) {
	_mock.Called(height)
	return
}

// MockManager_DeletePendingEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePendingEvent'
type MockManager_DeletePendingEvent_Call struct {
	*mock.Call
}

// DeletePendingEvent is a helper method to define mock.On call
//   - height uint64
func (_e *MockManager_Expecter) DeletePendingEvent(height interface{}) *MockManager_DeletePendingEvent_Call {
	return &MockManager_DeletePendingEvent_Call{Call: _e.mock.On("DeletePendingEvent", height)}
}

func (_c *MockManager_DeletePendingEvent_Call) Run(run func(height uint64)) *MockManager_DeletePendingEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_DeletePendingEvent_Call) Return() *MockManager_DeletePendingEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_DeletePendingEvent_Call) RunAndReturn(run func(height uint64)) *MockManager_DeletePendingEvent_Call {
	_c.Run(run)
	return _c
}

// GetData provides a mock function for the type MockManager
func (_mock *MockManager) GetData(height uint64) *types.Data {
	ret := _mock.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 *types.Data
	if returnFunc, ok := ret.Get(0).(func(uint64) *types.Data); ok {
		r0 = returnFunc(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Data)
		}
	}
	return r0
}

// MockManager_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type MockManager_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
//   - height uint64
func (_e *MockManager_Expecter) GetData(height interface{}) *MockManager_GetData_Call {
	return &MockManager_GetData_Call{Call: _e.mock.On("GetData", height)}
}

func (_c *MockManager_GetData_Call) Run(run func(height uint64)) *MockManager_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_GetData_Call) Return(data *types.Data) *MockManager_GetData_Call {
	_c.Call.Return(data)
	return _c
}

func (_c *MockManager_GetData_Call) RunAndReturn(run func(height uint64) *types.Data) *MockManager_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataDAIncluded provides a mock function for the type MockManager
func (_mock *MockManager) GetDataDAIncluded(hash string) (uint64, bool) {
	ret := _mock.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for GetDataDAIncluded")
	}

	var r0 uint64
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (uint64, bool)); ok {
		return returnFunc(hash)
	}
	if returnFunc, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = returnFunc(hash)
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(hash)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockManager_GetDataDAIncluded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataDAIncluded'
type MockManager_GetDataDAIncluded_Call struct {
	*mock.Call
}

// GetDataDAIncluded is a helper method to define mock.On call
//   - hash string
func (_e *MockManager_Expecter) GetDataDAIncluded(hash interface{}) *MockManager_GetDataDAIncluded_Call {
	return &MockManager_GetDataDAIncluded_Call{Call: _e.mock.On("GetDataDAIncluded", hash)}
}

func (_c *MockManager_GetDataDAIncluded_Call) Run(run func(hash string)) *MockManager_GetDataDAIncluded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_GetDataDAIncluded_Call) Return(v uint64, b bool) *MockManager_GetDataDAIncluded_Call {
	_c.Call.Return(v, b)
	return _c
}

func (_c *MockManager_GetDataDAIncluded_Call) RunAndReturn(run func(hash string) (uint64, bool)) *MockManager_GetDataDAIncluded_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function for the type MockManager
func (_mock *MockManager) GetHeader(height uint64) *types.SignedHeader {
	ret := _mock.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 *types.SignedHeader
	if returnFunc, ok := ret.Get(0).(func(uint64) *types.SignedHeader); ok {
		r0 = returnFunc(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SignedHeader)
		}
	}
	return r0
}

// MockManager_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type MockManager_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
//   - height uint64
func (_e *MockManager_Expecter) GetHeader(height interface{}) *MockManager_GetHeader_Call {
	return &MockManager_GetHeader_Call{Call: _e.mock.On("GetHeader", height)}
}

func (_c *MockManager_GetHeader_Call) Run(run func(height uint64)) *MockManager_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_GetHeader_Call) Return(signedHeader *types.SignedHeader) *MockManager_GetHeader_Call {
	_c.Call.Return(signedHeader)
	return _c
}

func (_c *MockManager_GetHeader_Call) RunAndReturn(run func(height uint64) *types.SignedHeader) *MockManager_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeaderDAIncluded provides a mock function for the type MockManager
func (_mock *MockManager) GetHeaderDAIncluded(hash string) (uint64, bool) {
	ret := _mock.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for GetHeaderDAIncluded")
	}

	var r0 uint64
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (uint64, bool)); ok {
		return returnFunc(hash)
	}
	if returnFunc, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = returnFunc(hash)
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(hash)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockManager_GetHeaderDAIncluded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeaderDAIncluded'
type MockManager_GetHeaderDAIncluded_Call struct {
	*mock.Call
}

// GetHeaderDAIncluded is a helper method to define mock.On call
//   - hash string
func (_e *MockManager_Expecter) GetHeaderDAIncluded(hash interface{}) *MockManager_GetHeaderDAIncluded_Call {
	return &MockManager_GetHeaderDAIncluded_Call{Call: _e.mock.On("GetHeaderDAIncluded", hash)}
}

func (_c *MockManager_GetHeaderDAIncluded_Call) Run(run func(hash string)) *MockManager_GetHeaderDAIncluded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_GetHeaderDAIncluded_Call) Return(v uint64, b bool) *MockManager_GetHeaderDAIncluded_Call {
	_c.Call.Return(v, b)
	return _c
}

func (_c *MockManager_GetHeaderDAIncluded_Call) RunAndReturn(run func(hash string) (uint64, bool)) *MockManager_GetHeaderDAIncluded_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingData provides a mock function for the type MockManager
func (_mock *MockManager) GetPendingData(ctx context.Context) ([]*types.SignedData, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingData")
	}

	var r0 []*types.SignedData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*types.SignedData, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*types.SignedData); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.SignedData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManager_GetPendingData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingData'
type MockManager_GetPendingData_Call struct {
	*mock.Call
}

// GetPendingData is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) GetPendingData(ctx interface{}) *MockManager_GetPendingData_Call {
	return &MockManager_GetPendingData_Call{Call: _e.mock.On("GetPendingData", ctx)}
}

func (_c *MockManager_GetPendingData_Call) Run(run func(ctx context.Context)) *MockManager_GetPendingData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_GetPendingData_Call) Return(signedDatas []*types.SignedData, err error) *MockManager_GetPendingData_Call {
	_c.Call.Return(signedDatas, err)
	return _c
}

func (_c *MockManager_GetPendingData_Call) RunAndReturn(run func(ctx context.Context) ([]*types.SignedData, error)) *MockManager_GetPendingData_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingEvents provides a mock function for the type MockManager
func (_mock *MockManager) GetPendingEvents() map[uint64]*common.DAHeightEvent {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPendingEvents")
	}

	var r0 map[uint64]*common.DAHeightEvent
	if returnFunc, ok := ret.Get(0).(func() map[uint64]*common.DAHeightEvent); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint64]*common.DAHeightEvent)
		}
	}
	return r0
}

// MockManager_GetPendingEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingEvents'
type MockManager_GetPendingEvents_Call struct {
	*mock.Call
}

// GetPendingEvents is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetPendingEvents() *MockManager_GetPendingEvents_Call {
	return &MockManager_GetPendingEvents_Call{Call: _e.mock.On("GetPendingEvents")}
}

func (_c *MockManager_GetPendingEvents_Call) Run(run func()) *MockManager_GetPendingEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetPendingEvents_Call) Return(uint64ToDAHeightEvent map[uint64]*common.DAHeightEvent) *MockManager_GetPendingEvents_Call {
	_c.Call.Return(uint64ToDAHeightEvent)
	return _c
}

func (_c *MockManager_GetPendingEvents_Call) RunAndReturn(run func() map[uint64]*common.DAHeightEvent) *MockManager_GetPendingEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingHeaders provides a mock function for the type MockManager
func (_mock *MockManager) GetPendingHeaders(ctx context.Context) ([]*types.SignedHeader, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingHeaders")
	}

	var r0 []*types.SignedHeader
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*types.SignedHeader, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*types.SignedHeader); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.SignedHeader)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManager_GetPendingHeaders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingHeaders'
type MockManager_GetPendingHeaders_Call struct {
	*mock.Call
}

// GetPendingHeaders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) GetPendingHeaders(ctx interface{}) *MockManager_GetPendingHeaders_Call {
	return &MockManager_GetPendingHeaders_Call{Call: _e.mock.On("GetPendingHeaders", ctx)}
}

func (_c *MockManager_GetPendingHeaders_Call) Run(run func(ctx context.Context)) *MockManager_GetPendingHeaders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_GetPendingHeaders_Call) Return(signedHeaders []*types.SignedHeader, err error) *MockManager_GetPendingHeaders_Call {
	_c.Call.Return(signedHeaders, err)
	return _c
}

func (_c *MockManager_GetPendingHeaders_Call) RunAndReturn(run func(ctx context.Context) ([]*types.SignedHeader, error)) *MockManager_GetPendingHeaders_Call {
	_c.Call.Return(run)
	return _c
}

// IsDataSeen provides a mock function for the type MockManager
func (_mock *MockManager) IsDataSeen(hash string) bool {
	ret := _mock.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for IsDataSeen")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(hash)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockManager_IsDataSeen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDataSeen'
type MockManager_IsDataSeen_Call struct {
	*mock.Call
}

// IsDataSeen is a helper method to define mock.On call
//   - hash string
func (_e *MockManager_Expecter) IsDataSeen(hash interface{}) *MockManager_IsDataSeen_Call {
	return &MockManager_IsDataSeen_Call{Call: _e.mock.On("IsDataSeen", hash)}
}

func (_c *MockManager_IsDataSeen_Call) Run(run func(hash string)) *MockManager_IsDataSeen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_IsDataSeen_Call) Return(b bool) *MockManager_IsDataSeen_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockManager_IsDataSeen_Call) RunAndReturn(run func(hash string) bool) *MockManager_IsDataSeen_Call {
	_c.Call.Return(run)
	return _c
}

// IsHeaderSeen provides a mock function for the type MockManager
func (_mock *MockManager) IsHeaderSeen(hash string) bool {
	ret := _mock.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for IsHeaderSeen")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(hash)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockManager_IsHeaderSeen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsHeaderSeen'
type MockManager_IsHeaderSeen_Call struct {
	*mock.Call
}

// IsHeaderSeen is a helper method to define mock.On call
//   - hash string
func (_e *MockManager_Expecter) IsHeaderSeen(hash interface{}) *MockManager_IsHeaderSeen_Call {
	return &MockManager_IsHeaderSeen_Call{Call: _e.mock.On("IsHeaderSeen", hash)}
}

func (_c *MockManager_IsHeaderSeen_Call) Run(run func(hash string)) *MockManager_IsHeaderSeen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_IsHeaderSeen_Call) Return(b bool) *MockManager_IsHeaderSeen_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockManager_IsHeaderSeen_Call) RunAndReturn(run func(hash string) bool) *MockManager_IsHeaderSeen_Call {
	_c.Call.Return(run)
	return _c
}

// LoadFromDisk provides a mock function for the type MockManager
func (_mock *MockManager) LoadFromDisk() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadFromDisk")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_LoadFromDisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadFromDisk'
type MockManager_LoadFromDisk_Call struct {
	*mock.Call
}

// LoadFromDisk is a helper method to define mock.On call
func (_e *MockManager_Expecter) LoadFromDisk() *MockManager_LoadFromDisk_Call {
	return &MockManager_LoadFromDisk_Call{Call: _e.mock.On("LoadFromDisk")}
}

func (_c *MockManager_LoadFromDisk_Call) Run(run func()) *MockManager_LoadFromDisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_LoadFromDisk_Call) Return(err error) *MockManager_LoadFromDisk_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_LoadFromDisk_Call) RunAndReturn(run func() error) *MockManager_LoadFromDisk_Call {
	_c.Call.Return(run)
	return _c
}

// NumPendingData provides a mock function for the type MockManager
func (_mock *MockManager) NumPendingData() uint64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NumPendingData")
	}

	var r0 uint64
	if returnFunc, ok := ret.Get(0).(func() uint64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint64)
	}
	return r0
}

// MockManager_NumPendingData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NumPendingData'
type MockManager_NumPendingData_Call struct {
	*mock.Call
}

// NumPendingData is a helper method to define mock.On call
func (_e *MockManager_Expecter) NumPendingData() *MockManager_NumPendingData_Call {
	return &MockManager_NumPendingData_Call{Call: _e.mock.On("NumPendingData")}
}

func (_c *MockManager_NumPendingData_Call) Run(run func()) *MockManager_NumPendingData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_NumPendingData_Call) Return(v uint64) *MockManager_NumPendingData_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockManager_NumPendingData_Call) RunAndReturn(run func() uint64) *MockManager_NumPendingData_Call {
	_c.Call.Return(run)
	return _c
}

// NumPendingHeaders provides a mock function for the type MockManager
func (_mock *MockManager) NumPendingHeaders() uint64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NumPendingHeaders")
	}

	var r0 uint64
	if returnFunc, ok := ret.Get(0).(func() uint64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint64)
	}
	return r0
}

// MockManager_NumPendingHeaders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NumPendingHeaders'
type MockManager_NumPendingHeaders_Call struct {
	*mock.Call
}

// NumPendingHeaders is a helper method to define mock.On call
func (_e *MockManager_Expecter) NumPendingHeaders() *MockManager_NumPendingHeaders_Call {
	return &MockManager_NumPendingHeaders_Call{Call: _e.mock.On("NumPendingHeaders")}
}

func (_c *MockManager_NumPendingHeaders_Call) Run(run func()) *MockManager_NumPendingHeaders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_NumPendingHeaders_Call) Return(v uint64) *MockManager_NumPendingHeaders_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockManager_NumPendingHeaders_Call) RunAndReturn(run func() uint64) *MockManager_NumPendingHeaders_Call {
	_c.Call.Return(run)
	return _c
}

// SaveToDisk provides a mock function for the type MockManager
func (_mock *MockManager) SaveToDisk() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SaveToDisk")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_SaveToDisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveToDisk'
type MockManager_SaveToDisk_Call struct {
	*mock.Call
}

// SaveToDisk is a helper method to define mock.On call
func (_e *MockManager_Expecter) SaveToDisk() *MockManager_SaveToDisk_Call {
	return &MockManager_SaveToDisk_Call{Call: _e.mock.On("SaveToDisk")}
}

func (_c *MockManager_SaveToDisk_Call) Run(run func()) *MockManager_SaveToDisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_SaveToDisk_Call) Return(err error) *MockManager_SaveToDisk_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_SaveToDisk_Call) RunAndReturn(run func() error) *MockManager_SaveToDisk_Call {
	_c.Call.Return(run)
	return _c
}

// SetData provides a mock function for the type MockManager
func (_mock *MockManager) SetData(height uint64, data *types.Data) {
	_mock.Called(height, data)
	return
}

// MockManager_SetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetData'
type MockManager_SetData_Call struct {
	*mock.Call
}

// SetData is a helper method to define mock.On call
//   - height uint64
//   - data *types.Data
func (_e *MockManager_Expecter) SetData(height interface{}, data interface{}) *MockManager_SetData_Call {
	return &MockManager_SetData_Call{Call: _e.mock.On("SetData", height, data)}
}

func (_c *MockManager_SetData_Call) Run(run func(height uint64, data *types.Data)) *MockManager_SetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		var arg1 *types.Data
		if args[1] != nil {
			arg1 = args[1].(*types.Data)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_SetData_Call) Return() *MockManager_SetData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetData_Call) RunAndReturn(run func(height uint64, data *types.Data)) *MockManager_SetData_Call {
	_c.Run(run)
	return _c
}

// SetDataDAIncluded provides a mock function for the type MockManager
func (_mock *MockManager) SetDataDAIncluded(hash string, daHeight uint64) {
	_mock.Called(hash, daHeight)
	return
}

// MockManager_SetDataDAIncluded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDataDAIncluded'
type MockManager_SetDataDAIncluded_Call struct {
	*mock.Call
}

// SetDataDAIncluded is a helper method to define mock.On call
//   - hash string
//   - daHeight uint64
func (_e *MockManager_Expecter) SetDataDAIncluded(hash interface{}, daHeight interface{}) *MockManager_SetDataDAIncluded_Call {
	return &MockManager_SetDataDAIncluded_Call{Call: _e.mock.On("SetDataDAIncluded", hash, daHeight)}
}

func (_c *MockManager_SetDataDAIncluded_Call) Run(run func(hash string, daHeight uint64)) *MockManager_SetDataDAIncluded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_SetDataDAIncluded_Call) Return() *MockManager_SetDataDAIncluded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetDataDAIncluded_Call) RunAndReturn(run func(hash string, daHeight uint64)) *MockManager_SetDataDAIncluded_Call {
	_c.Run(run)
	return _c
}

// SetDataSeen provides a mock function for the type MockManager
func (_mock *MockManager) SetDataSeen(hash string) {
	_mock.Called(hash)
	return
}

// MockManager_SetDataSeen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDataSeen'
type MockManager_SetDataSeen_Call struct {
	*mock.Call
}

// SetDataSeen is a helper method to define mock.On call
//   - hash string
func (_e *MockManager_Expecter) SetDataSeen(hash interface{}) *MockManager_SetDataSeen_Call {
	return &MockManager_SetDataSeen_Call{Call: _e.mock.On("SetDataSeen", hash)}
}

func (_c *MockManager_SetDataSeen_Call) Run(run func(hash string)) *MockManager_SetDataSeen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_SetDataSeen_Call) Return() *MockManager_SetDataSeen_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetDataSeen_Call) RunAndReturn(run func(hash string)) *MockManager_SetDataSeen_Call {
	_c.Run(run)
	return _c
}

// SetHeader provides a mock function for the type MockManager
func (_mock *MockManager) SetHeader(height uint64, header *types.SignedHeader) {
	_mock.Called(height, header)
	return
}

// MockManager_SetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeader'
type MockManager_SetHeader_Call struct {
	*mock.Call
}

// SetHeader is a helper method to define mock.On call
//   - height uint64
//   - header *types.SignedHeader
func (_e *MockManager_Expecter) SetHeader(height interface{}, header interface{}) *MockManager_SetHeader_Call {
	return &MockManager_SetHeader_Call{Call: _e.mock.On("SetHeader", height, header)}
}

func (_c *MockManager_SetHeader_Call) Run(run func(height uint64, header *types.SignedHeader)) *MockManager_SetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		var arg1 *types.SignedHeader
		if args[1] != nil {
			arg1 = args[1].(*types.SignedHeader)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_SetHeader_Call) Return() *MockManager_SetHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetHeader_Call) RunAndReturn(run func(height uint64, header *types.SignedHeader)) *MockManager_SetHeader_Call {
	_c.Run(run)
	return _c
}

// SetHeaderDAIncluded provides a mock function for the type MockManager
func (_mock *MockManager) SetHeaderDAIncluded(hash string, daHeight uint64) {
	_mock.Called(hash, daHeight)
	return
}

// MockManager_SetHeaderDAIncluded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeaderDAIncluded'
type MockManager_SetHeaderDAIncluded_Call struct {
	*mock.Call
}

// SetHeaderDAIncluded is a helper method to define mock.On call
//   - hash string
//   - daHeight uint64
func (_e *MockManager_Expecter) SetHeaderDAIncluded(hash interface{}, daHeight interface{}) *MockManager_SetHeaderDAIncluded_Call {
	return &MockManager_SetHeaderDAIncluded_Call{Call: _e.mock.On("SetHeaderDAIncluded", hash, daHeight)}
}

func (_c *MockManager_SetHeaderDAIncluded_Call) Run(run func(hash string, daHeight uint64)) *MockManager_SetHeaderDAIncluded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_SetHeaderDAIncluded_Call) Return() *MockManager_SetHeaderDAIncluded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetHeaderDAIncluded_Call) RunAndReturn(run func(hash string, daHeight uint64)) *MockManager_SetHeaderDAIncluded_Call {
	_c.Run(run)
	return _c
}

// SetHeaderSeen provides a mock function for the type MockManager
func (_mock *MockManager) SetHeaderSeen(hash string) {
	_mock.Called(hash)
	return
}

// MockManager_SetHeaderSeen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeaderSeen'
type MockManager_SetHeaderSeen_Call struct {
	*mock.Call
}

// SetHeaderSeen is a helper method to define mock.On call
//   - hash string
func (_e *MockManager_Expecter) SetHeaderSeen(hash interface{}) *MockManager_SetHeaderSeen_Call {
	return &MockManager_SetHeaderSeen_Call{Call: _e.mock.On("SetHeaderSeen", hash)}
}

func (_c *MockManager_SetHeaderSeen_Call) Run(run func(hash string)) *MockManager_SetHeaderSeen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_SetHeaderSeen_Call) Return() *MockManager_SetHeaderSeen_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetHeaderSeen_Call) RunAndReturn(run func(hash string)) *MockManager_SetHeaderSeen_Call {
	_c.Run(run)
	return _c
}

// SetLastSubmittedDataHeight provides a mock function for the type MockManager
func (_mock *MockManager) SetLastSubmittedDataHeight(ctx context.Context, height uint64) {
	_mock.Called(ctx, height)
	return
}

// MockManager_SetLastSubmittedDataHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastSubmittedDataHeight'
type MockManager_SetLastSubmittedDataHeight_Call struct {
	*mock.Call
}

// SetLastSubmittedDataHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - height uint64
func (_e *MockManager_Expecter) SetLastSubmittedDataHeight(ctx interface{}, height interface{}) *MockManager_SetLastSubmittedDataHeight_Call {
	return &MockManager_SetLastSubmittedDataHeight_Call{Call: _e.mock.On("SetLastSubmittedDataHeight", ctx, height)}
}

func (_c *MockManager_SetLastSubmittedDataHeight_Call) Run(run func(ctx context.Context, height uint64)) *MockManager_SetLastSubmittedDataHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_SetLastSubmittedDataHeight_Call) Return() *MockManager_SetLastSubmittedDataHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetLastSubmittedDataHeight_Call) RunAndReturn(run func(ctx context.Context, height uint64)) *MockManager_SetLastSubmittedDataHeight_Call {
	_c.Run(run)
	return _c
}

// SetLastSubmittedHeaderHeight provides a mock function for the type MockManager
func (_mock *MockManager) SetLastSubmittedHeaderHeight(ctx context.Context, height uint64) {
	_mock.Called(ctx, height)
	return
}

// MockManager_SetLastSubmittedHeaderHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastSubmittedHeaderHeight'
type MockManager_SetLastSubmittedHeaderHeight_Call struct {
	*mock.Call
}

// SetLastSubmittedHeaderHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - height uint64
func (_e *MockManager_Expecter) SetLastSubmittedHeaderHeight(ctx interface{}, height interface{}) *MockManager_SetLastSubmittedHeaderHeight_Call {
	return &MockManager_SetLastSubmittedHeaderHeight_Call{Call: _e.mock.On("SetLastSubmittedHeaderHeight", ctx, height)}
}

func (_c *MockManager_SetLastSubmittedHeaderHeight_Call) Run(run func(ctx context.Context, height uint64)) *MockManager_SetLastSubmittedHeaderHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_SetLastSubmittedHeaderHeight_Call) Return() *MockManager_SetLastSubmittedHeaderHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetLastSubmittedHeaderHeight_Call) RunAndReturn(run func(ctx context.Context, height uint64)) *MockManager_SetLastSubmittedHeaderHeight_Call {
	_c.Run(run)
	return _c
}

// SetPendingEvent provides a mock function for the type MockManager
func (_mock *MockManager) SetPendingEvent(height uint64, event *common.DAHeightEvent) {
	_mock.Called(height, event)
	return
}

// MockManager_SetPendingEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPendingEvent'
type MockManager_SetPendingEvent_Call struct {
	*mock.Call
}

// SetPendingEvent is a helper method to define mock.On call
//   - height uint64
//   - event *common.DAHeightEvent
func (_e *MockManager_Expecter) SetPendingEvent(height interface{}, event interface{}) *MockManager_SetPendingEvent_Call {
	return &MockManager_SetPendingEvent_Call{Call: _e.mock.On("SetPendingEvent", height, event)}
}

func (_c *MockManager_SetPendingEvent_Call) Run(run func(height uint64, event *common.DAHeightEvent)) *MockManager_SetPendingEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		var arg1 *common.DAHeightEvent
		if args[1] != nil {
			arg1 = args[1].(*common.DAHeightEvent)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_SetPendingEvent_Call) Return() *MockManager_SetPendingEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetPendingEvent_Call) RunAndReturn(run func(height uint64, event *common.DAHeightEvent)) *MockManager_SetPendingEvent_Call {
	_c.Run(run)
	return _c
}
