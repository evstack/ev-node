// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package syncing

import (
	"context"

	"github.com/evstack/ev-node/block/internal/common"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDaRetrieverI creates a new instance of MockDaRetrieverI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDaRetrieverI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDaRetrieverI {
	mock := &MockDaRetrieverI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDaRetrieverI is an autogenerated mock type for the DaRetrieverI type
type MockDaRetrieverI struct {
	mock.Mock
}

type MockDaRetrieverI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDaRetrieverI) EXPECT() *MockDaRetrieverI_Expecter {
	return &MockDaRetrieverI_Expecter{mock: &_m.Mock}
}

// RetrieveForcedIncludedTxsFromDA provides a mock function for the type MockDaRetrieverI
func (_mock *MockDaRetrieverI) RetrieveForcedIncludedTxsFromDA(ctx context.Context, daHeight uint64) (*common.ForcedIncludedEvent, error) {
	ret := _mock.Called(ctx, daHeight)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveForcedIncludedTxsFromDA")
	}

	var r0 *common.ForcedIncludedEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) (*common.ForcedIncludedEvent, error)); ok {
		return returnFunc(ctx, daHeight)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) *common.ForcedIncludedEvent); ok {
		r0 = returnFunc(ctx, daHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.ForcedIncludedEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = returnFunc(ctx, daHeight)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDaRetrieverI_RetrieveForcedIncludedTxsFromDA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveForcedIncludedTxsFromDA'
type MockDaRetrieverI_RetrieveForcedIncludedTxsFromDA_Call struct {
	*mock.Call
}

// RetrieveForcedIncludedTxsFromDA is a helper method to define mock.On call
//   - ctx context.Context
//   - daHeight uint64
func (_e *MockDaRetrieverI_Expecter) RetrieveForcedIncludedTxsFromDA(ctx interface{}, daHeight interface{}) *MockDaRetrieverI_RetrieveForcedIncludedTxsFromDA_Call {
	return &MockDaRetrieverI_RetrieveForcedIncludedTxsFromDA_Call{Call: _e.mock.On("RetrieveForcedIncludedTxsFromDA", ctx, daHeight)}
}

func (_c *MockDaRetrieverI_RetrieveForcedIncludedTxsFromDA_Call) Run(run func(ctx context.Context, daHeight uint64)) *MockDaRetrieverI_RetrieveForcedIncludedTxsFromDA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDaRetrieverI_RetrieveForcedIncludedTxsFromDA_Call) Return(forcedIncludedEvent *common.ForcedIncludedEvent, err error) *MockDaRetrieverI_RetrieveForcedIncludedTxsFromDA_Call {
	_c.Call.Return(forcedIncludedEvent, err)
	return _c
}

func (_c *MockDaRetrieverI_RetrieveForcedIncludedTxsFromDA_Call) RunAndReturn(run func(ctx context.Context, daHeight uint64) (*common.ForcedIncludedEvent, error)) *MockDaRetrieverI_RetrieveForcedIncludedTxsFromDA_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveFromDA provides a mock function for the type MockDaRetrieverI
func (_mock *MockDaRetrieverI) RetrieveFromDA(ctx context.Context, daHeight uint64) ([]common.DAHeightEvent, error) {
	ret := _mock.Called(ctx, daHeight)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveFromDA")
	}

	var r0 []common.DAHeightEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) ([]common.DAHeightEvent, error)); ok {
		return returnFunc(ctx, daHeight)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) []common.DAHeightEvent); ok {
		r0 = returnFunc(ctx, daHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.DAHeightEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = returnFunc(ctx, daHeight)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDaRetrieverI_RetrieveFromDA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveFromDA'
type MockDaRetrieverI_RetrieveFromDA_Call struct {
	*mock.Call
}

// RetrieveFromDA is a helper method to define mock.On call
//   - ctx context.Context
//   - daHeight uint64
func (_e *MockDaRetrieverI_Expecter) RetrieveFromDA(ctx interface{}, daHeight interface{}) *MockDaRetrieverI_RetrieveFromDA_Call {
	return &MockDaRetrieverI_RetrieveFromDA_Call{Call: _e.mock.On("RetrieveFromDA", ctx, daHeight)}
}

func (_c *MockDaRetrieverI_RetrieveFromDA_Call) Run(run func(ctx context.Context, daHeight uint64)) *MockDaRetrieverI_RetrieveFromDA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDaRetrieverI_RetrieveFromDA_Call) Return(dAHeightEvents []common.DAHeightEvent, err error) *MockDaRetrieverI_RetrieveFromDA_Call {
	_c.Call.Return(dAHeightEvents, err)
	return _c
}

func (_c *MockDaRetrieverI_RetrieveFromDA_Call) RunAndReturn(run func(ctx context.Context, daHeight uint64) ([]common.DAHeightEvent, error)) *MockDaRetrieverI_RetrieveFromDA_Call {
	_c.Call.Return(run)
	return _c
}

// newMockp2pHandler creates a new instance of mockp2pHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockp2pHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockp2pHandler {
	mock := &mockp2pHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockp2pHandler is an autogenerated mock type for the p2pHandler type
type mockp2pHandler struct {
	mock.Mock
}

type mockp2pHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *mockp2pHandler) EXPECT() *mockp2pHandler_Expecter {
	return &mockp2pHandler_Expecter{mock: &_m.Mock}
}

// ProcessDataRange provides a mock function for the type mockp2pHandler
func (_mock *mockp2pHandler) ProcessDataRange(ctx context.Context, fromHeight uint64, toHeight uint64, heightInCh chan<- common.DAHeightEvent) {
	_mock.Called(ctx, fromHeight, toHeight, heightInCh)
	return
}

// mockp2pHandler_ProcessDataRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessDataRange'
type mockp2pHandler_ProcessDataRange_Call struct {
	*mock.Call
}

// ProcessDataRange is a helper method to define mock.On call
//   - ctx context.Context
//   - fromHeight uint64
//   - toHeight uint64
//   - heightInCh chan<- common.DAHeightEvent
func (_e *mockp2pHandler_Expecter) ProcessDataRange(ctx interface{}, fromHeight interface{}, toHeight interface{}, heightInCh interface{}) *mockp2pHandler_ProcessDataRange_Call {
	return &mockp2pHandler_ProcessDataRange_Call{Call: _e.mock.On("ProcessDataRange", ctx, fromHeight, toHeight, heightInCh)}
}

func (_c *mockp2pHandler_ProcessDataRange_Call) Run(run func(ctx context.Context, fromHeight uint64, toHeight uint64, heightInCh chan<- common.DAHeightEvent)) *mockp2pHandler_ProcessDataRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		var arg3 chan<- common.DAHeightEvent
		if args[3] != nil {
			arg3 = args[3].(chan<- common.DAHeightEvent)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *mockp2pHandler_ProcessDataRange_Call) Return() *mockp2pHandler_ProcessDataRange_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockp2pHandler_ProcessDataRange_Call) RunAndReturn(run func(ctx context.Context, fromHeight uint64, toHeight uint64, heightInCh chan<- common.DAHeightEvent)) *mockp2pHandler_ProcessDataRange_Call {
	_c.Run(run)
	return _c
}

// ProcessHeaderRange provides a mock function for the type mockp2pHandler
func (_mock *mockp2pHandler) ProcessHeaderRange(ctx context.Context, fromHeight uint64, toHeight uint64, heightInCh chan<- common.DAHeightEvent) {
	_mock.Called(ctx, fromHeight, toHeight, heightInCh)
	return
}

// mockp2pHandler_ProcessHeaderRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessHeaderRange'
type mockp2pHandler_ProcessHeaderRange_Call struct {
	*mock.Call
}

// ProcessHeaderRange is a helper method to define mock.On call
//   - ctx context.Context
//   - fromHeight uint64
//   - toHeight uint64
//   - heightInCh chan<- common.DAHeightEvent
func (_e *mockp2pHandler_Expecter) ProcessHeaderRange(ctx interface{}, fromHeight interface{}, toHeight interface{}, heightInCh interface{}) *mockp2pHandler_ProcessHeaderRange_Call {
	return &mockp2pHandler_ProcessHeaderRange_Call{Call: _e.mock.On("ProcessHeaderRange", ctx, fromHeight, toHeight, heightInCh)}
}

func (_c *mockp2pHandler_ProcessHeaderRange_Call) Run(run func(ctx context.Context, fromHeight uint64, toHeight uint64, heightInCh chan<- common.DAHeightEvent)) *mockp2pHandler_ProcessHeaderRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		var arg3 chan<- common.DAHeightEvent
		if args[3] != nil {
			arg3 = args[3].(chan<- common.DAHeightEvent)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *mockp2pHandler_ProcessHeaderRange_Call) Return() *mockp2pHandler_ProcessHeaderRange_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockp2pHandler_ProcessHeaderRange_Call) RunAndReturn(run func(ctx context.Context, fromHeight uint64, toHeight uint64, heightInCh chan<- common.DAHeightEvent)) *mockp2pHandler_ProcessHeaderRange_Call {
	_c.Run(run)
	return _c
}
