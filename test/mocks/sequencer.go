// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	sequencer "github.com/rollkit/rollkit/core/sequencer"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Sequencer is an autogenerated mock type for the Sequencer type
type Sequencer struct {
	mock.Mock
}

// GetNextBatch provides a mock function with given fields: ctx, req
func (_m *Sequencer) GetNextBatch(ctx context.Context, req sequencer.GetNextBatchRequest) (*sequencer.GetNextBatchResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetNextBatch")
	}

	var r0 *sequencer.GetNextBatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sequencer.GetNextBatchRequest) (*sequencer.GetNextBatchResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sequencer.GetNextBatchRequest) *sequencer.GetNextBatchResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sequencer.GetNextBatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sequencer.GetNextBatchRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitBatchTxs provides a mock function with given fields: ctx, req
func (_m *Sequencer) SubmitBatchTxs(ctx context.Context, req sequencer.SubmitBatchTxsRequest) (*sequencer.SubmitBatchTxsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SubmitBatchTxs")
	}

	var r0 *sequencer.SubmitBatchTxsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sequencer.SubmitBatchTxsRequest) (*sequencer.SubmitBatchTxsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sequencer.SubmitBatchTxsRequest) *sequencer.SubmitBatchTxsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sequencer.SubmitBatchTxsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sequencer.SubmitBatchTxsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyBatch provides a mock function with given fields: ctx, req
func (_m *Sequencer) VerifyBatch(ctx context.Context, req sequencer.VerifyBatchRequest) (*sequencer.VerifyBatchResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for VerifyBatch")
	}

	var r0 *sequencer.VerifyBatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sequencer.VerifyBatchRequest) (*sequencer.VerifyBatchResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sequencer.VerifyBatchRequest) *sequencer.VerifyBatchResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sequencer.VerifyBatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sequencer.VerifyBatchRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSequencer creates a new instance of Sequencer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSequencer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sequencer {
	mock := &Sequencer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
