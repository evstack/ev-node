// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	header "github.com/celestiaorg/go-header"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store[H header.Header[H]] struct {
	mock.Mock
}

// Append provides a mock function with given fields: _a0, _a1
func (_m *Store[H]) Append(_a0 context.Context, _a1 ...H) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...H) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *Store[H]) Get(_a0 context.Context, _a1 header.Hash) (H, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 H
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, header.Hash) (H, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, header.Hash) H); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(H)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, header.Hash) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByHeight provides a mock function with given fields: _a0, _a1
func (_m *Store[H]) GetByHeight(_a0 context.Context, _a1 uint64) (H, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByHeight")
	}

	var r0 H
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (H, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) H); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(H)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRange provides a mock function with given fields: _a0, _a1, _a2
func (_m *Store[H]) GetRange(_a0 context.Context, _a1 uint64, _a2 uint64) ([]H, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetRange")
	}

	var r0 []H
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]H, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []H); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]H)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRangeByHeight provides a mock function with given fields: ctx, from, to
func (_m *Store[H]) GetRangeByHeight(ctx context.Context, from H, to uint64) ([]H, error) {
	ret := _m.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetRangeByHeight")
	}

	var r0 []H
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, H, uint64) ([]H, error)); ok {
		return rf(ctx, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, H, uint64) []H); ok {
		r0 = rf(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]H)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, H, uint64) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Has provides a mock function with given fields: _a0, _a1
func (_m *Store[H]) Has(_a0 context.Context, _a1 header.Hash) (bool, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, header.Hash) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, header.Hash) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, header.Hash) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasAt provides a mock function with given fields: _a0, _a1
func (_m *Store[H]) HasAt(_a0 context.Context, _a1 uint64) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for HasAt")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uint64) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Head provides a mock function with given fields: _a0, _a1
func (_m *Store[H]) Head(_a0 context.Context, _a1 ...header.HeadOption[H]) (H, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Head")
	}

	var r0 H
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...header.HeadOption[H]) (H, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...header.HeadOption[H]) H); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(H)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...header.HeadOption[H]) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Height provides a mock function with no fields
func (_m *Store[H]) Height() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Height")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Init provides a mock function with given fields: _a0, _a1
func (_m *Store[H]) Init(_a0 context.Context, _a1 H) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, H) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore[H header.Header[H]](t interface {
	mock.TestingT
	Cleanup(func())
}) *Store[H] {
	mock := &Store[H]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
