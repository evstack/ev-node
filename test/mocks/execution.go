// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Executor is an autogenerated mock type for the Executor type
type Executor struct {
	mock.Mock
}

// ExecuteTxs provides a mock function with given fields: ctx, txs, blockHeight, timestamp, prevStateRoot
func (_m *Executor) ExecuteTxs(ctx context.Context, txs [][]byte, blockHeight uint64, timestamp time.Time, prevStateRoot []byte) ([]byte, uint64, error) {
	ret := _m.Called(ctx, txs, blockHeight, timestamp, prevStateRoot)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTxs")
	}

	var r0 []byte
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, uint64, time.Time, []byte) ([]byte, uint64, error)); ok {
		return rf(ctx, txs, blockHeight, timestamp, prevStateRoot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, uint64, time.Time, []byte) []byte); ok {
		r0 = rf(ctx, txs, blockHeight, timestamp, prevStateRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte, uint64, time.Time, []byte) uint64); ok {
		r1 = rf(ctx, txs, blockHeight, timestamp, prevStateRoot)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, [][]byte, uint64, time.Time, []byte) error); ok {
		r2 = rf(ctx, txs, blockHeight, timestamp, prevStateRoot)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTxs provides a mock function with given fields: ctx
func (_m *Executor) GetTxs(ctx context.Context) ([][]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTxs")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([][]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) [][]byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitChain provides a mock function with given fields: ctx, genesisTime, initialHeight, chainID
func (_m *Executor) InitChain(ctx context.Context, genesisTime time.Time, initialHeight uint64, chainID string) ([]byte, uint64, error) {
	ret := _m.Called(ctx, genesisTime, initialHeight, chainID)

	if len(ret) == 0 {
		panic("no return value specified for InitChain")
	}

	var r0 []byte
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, uint64, string) ([]byte, uint64, error)); ok {
		return rf(ctx, genesisTime, initialHeight, chainID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, uint64, string) []byte); ok {
		r0 = rf(ctx, genesisTime, initialHeight, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, uint64, string) uint64); ok {
		r1 = rf(ctx, genesisTime, initialHeight, chainID)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, time.Time, uint64, string) error); ok {
		r2 = rf(ctx, genesisTime, initialHeight, chainID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetFinal provides a mock function with given fields: ctx, blockHeight
func (_m *Executor) SetFinal(ctx context.Context, blockHeight uint64) error {
	ret := _m.Called(ctx, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for SetFinal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, blockHeight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExecutor creates a new instance of Executor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Executor {
	mock := &Executor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
