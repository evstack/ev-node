// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
da "github.com/rollkit/rollkit/core/da"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GasMultiplier provides a mock function with given fields: ctx
func (_m *Client) GasMultiplier(ctx context.Context) (float64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GasMultiplier")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (float64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GasPrice provides a mock function with given fields: ctx
func (_m *Client) GasPrice(ctx context.Context) (float64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GasPrice")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (float64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields: ctx
func (_m *Client) GetNamespace(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MaxBlobSize provides a mock function with given fields: ctx
func (_m *Client) MaxBlobSize(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MaxBlobSize")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Retrieve provides a mock function with given fields: ctx, dataLayerHeight
func (_m *Client) Retrieve(ctx context.Context, dataLayerHeight uint64) da.ResultRetrieve {
	ret := _m.Called(ctx, dataLayerHeight)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 da.ResultRetrieve
	if rf, ok := ret.Get(0).(func(context.Context, uint64) da.ResultRetrieve); ok {
		r0 = rf(ctx, dataLayerHeight)
	} else {
		r0 = ret.Get(0).(da.ResultRetrieve)
	}

	return r0
}

// Submit provides a mock function with given fields: ctx, data, maxBlobSize, gasPrice
func (_m *Client) Submit(ctx context.Context, data [][]byte, maxBlobSize uint64, gasPrice float64) da.ResultSubmit {
	ret := _m.Called(ctx, data, maxBlobSize, gasPrice)

	if len(ret) == 0 {
		panic("no return value specified for Submit")
	}

	var r0 da.ResultSubmit
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, uint64, float64) da.ResultSubmit); ok {
		r0 = rf(ctx, data, maxBlobSize, gasPrice)
	} else {
		r0 = ret.Get(0).(da.ResultSubmit)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
