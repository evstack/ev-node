// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	p2p "github.com/rollkit/rollkit/pkg/p2p"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// P2PRPC is an autogenerated mock type for the P2PRPC type
type P2PRPC struct {
	mock.Mock
}

// GetNetworkInfo provides a mock function with no fields
func (_m *P2PRPC) GetNetworkInfo() (p2p.NetworkInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkInfo")
	}

	var r0 p2p.NetworkInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (p2p.NetworkInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() p2p.NetworkInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(p2p.NetworkInfo)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPeers provides a mock function with no fields
func (_m *P2PRPC) GetPeers() ([]peer.AddrInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPeers")
	}

	var r0 []peer.AddrInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]peer.AddrInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []peer.AddrInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.AddrInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewP2PRPC creates a new instance of P2PRPC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewP2PRPC(t interface {
	mock.TestingT
	Cleanup(func())
}) *P2PRPC {
	mock := &P2PRPC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
