// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	p2p "github.com/rollkit/rollkit/pkg/p2p"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockP2PRPC is an autogenerated mock type for the P2PRPC type
type MockP2PRPC struct {
	mock.Mock
}

type MockP2PRPC_Expecter struct {
	mock *mock.Mock
}

func (_m *MockP2PRPC) EXPECT() *MockP2PRPC_Expecter {
	return &MockP2PRPC_Expecter{mock: &_m.Mock}
}

// GetNetworkInfo provides a mock function with no fields
func (_m *MockP2PRPC) GetNetworkInfo() (p2p.NetworkInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkInfo")
	}

	var r0 p2p.NetworkInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (p2p.NetworkInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() p2p.NetworkInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(p2p.NetworkInfo)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockP2PRPC_GetNetworkInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkInfo'
type MockP2PRPC_GetNetworkInfo_Call struct {
	*mock.Call
}

// GetNetworkInfo is a helper method to define mock.On call
func (_e *MockP2PRPC_Expecter) GetNetworkInfo() *MockP2PRPC_GetNetworkInfo_Call {
	return &MockP2PRPC_GetNetworkInfo_Call{Call: _e.mock.On("GetNetworkInfo")}
}

func (_c *MockP2PRPC_GetNetworkInfo_Call) Run(run func()) *MockP2PRPC_GetNetworkInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockP2PRPC_GetNetworkInfo_Call) Return(_a0 p2p.NetworkInfo, _a1 error) *MockP2PRPC_GetNetworkInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockP2PRPC_GetNetworkInfo_Call) RunAndReturn(run func() (p2p.NetworkInfo, error)) *MockP2PRPC_GetNetworkInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeers provides a mock function with no fields
func (_m *MockP2PRPC) GetPeers() ([]peer.AddrInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPeers")
	}

	var r0 []peer.AddrInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]peer.AddrInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []peer.AddrInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]peer.AddrInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockP2PRPC_GetPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeers'
type MockP2PRPC_GetPeers_Call struct {
	*mock.Call
}

// GetPeers is a helper method to define mock.On call
func (_e *MockP2PRPC_Expecter) GetPeers() *MockP2PRPC_GetPeers_Call {
	return &MockP2PRPC_GetPeers_Call{Call: _e.mock.On("GetPeers")}
}

func (_c *MockP2PRPC_GetPeers_Call) Run(run func()) *MockP2PRPC_GetPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockP2PRPC_GetPeers_Call) Return(_a0 []peer.AddrInfo, _a1 error) *MockP2PRPC_GetPeers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockP2PRPC_GetPeers_Call) RunAndReturn(run func() ([]peer.AddrInfo, error)) *MockP2PRPC_GetPeers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockP2PRPC creates a new instance of MockP2PRPC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockP2PRPC(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockP2PRPC {
	mock := &MockP2PRPC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
