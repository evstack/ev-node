name: Rust Tests
permissions:
  contents: read

on:
  pull_request:
    paths:
      - "client/**"
      - "proto/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/rust-*.yml"
  push:
    branches:
      - main
      - release/*
    paths:
      - "client/**"
      - "proto/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/rust-*.yml"

jobs:
  test:
    name: Test Rust Client
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: ./.github/actions/rust-setup
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
          cache-key: test

      - name: Build
        run: cargo build --workspace --all-features --verbose

      - name: Run tests
        run: cargo test --workspace --all-features --verbose

      - name: Run doc tests
        run: cargo test --workspace --doc --verbose

      - name: Check examples
        run: |
          cd client/crates/client
          cargo check --examples --verbose

  feature-check:
    name: Feature Combination Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: ./.github/actions/rust-setup
        with:
          toolchain: stable
          components: rustfmt, clippy
          cache-key: features

      - name: Check ev-types with no default features
        run: |
          cd client/crates/types
          # Check minimal build (just protobuf, no compression or grpc)
          cargo check --no-default-features --verbose

      - name: Check ev-types with only std
        run: |
          cd client/crates/types
          cargo check --no-default-features --features std --verbose

      - name: Check ev-types with compression only
        run: |
          cd client/crates/types
          cargo check --no-default-features --features compression --verbose

      - name: Check ev-types with grpc only
        run: |
          cd client/crates/types
          cargo check --no-default-features --features grpc --verbose

      - name: Check ev-types with default features
        run: |
          cd client/crates/types
          cargo check --verbose

  no-std-check:
    name: No-std Compatibility Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: ./.github/actions/rust-setup
        with:
          toolchain: stable
          components: rustfmt, clippy
          cache-key: no-std
          targets: thumbv7m-none-eabi

      - name: Check no_std compatibility for ev-types
        run: |
          cd client/crates/types
          # Test that the crate builds for an embedded target without std
          cargo check --no-default-features --target thumbv7m-none-eabi --verbose

      - name: Check no_std with alloc
        run: |
          cd client/crates/types
          # Some embedded systems have alloc but not std
          # This verifies we can use the crate with just alloc support
          cargo check --no-default-features --target thumbv7m-none-eabi --verbose

      - name: Build for wasm32 target (another no_std target)
        run: |
          rustup target add wasm32-unknown-unknown
          cd client/crates/types
          cargo check --no-default-features --target wasm32-unknown-unknown --verbose

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "25.1"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate code coverage
        run: cargo llvm-cov --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          flags: rust
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
