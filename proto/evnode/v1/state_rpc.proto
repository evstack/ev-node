syntax = "proto3";
package evnode.v1;

import "evnode/v1/evnode.proto";
import "evnode/v1/state.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/evstack/ev-node/types/pb/evnode/v1";

// StoreService defines the RPC service for the store package
service StoreService {
  // GetBlock returns a block by height or hash
  rpc GetBlock(GetBlockRequest) returns (GetBlockResponse) {}

  // GetState returns the current state
  rpc GetState(google.protobuf.Empty) returns (GetStateResponse) {}

  // GetMetadata returns metadata for a specific key
  rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse) {}

  // GetGenesisDaHeight returns the DA height at which the first Evolve block was included.
  rpc GetGenesisDaHeight(google.protobuf.Empty) returns (GetGenesisDaHeightResponse) {}

  // Backup streams a Badger backup of the datastore so it can be persisted externally.
  rpc Backup(BackupRequest) returns (stream BackupResponse) {}
}

// Block contains all the components of a complete block
message Block {
  SignedHeader header = 1;
  Data data = 2;
}

// GetBlockRequest defines the request for retrieving a block
message GetBlockRequest {
  // The height or hash of the block to retrieve
  oneof identifier {
    uint64 height = 1;
    bytes hash = 2;
  }
}

// GetBlockResponse defines the response for retrieving a block
message GetBlockResponse {
  Block block = 1;
  uint64 header_da_height = 2;
  uint64 data_da_height = 3;
}

// GetStateResponse defines the response for retrieving the current state
message GetStateResponse {
  evnode.v1.State state = 1;
}

// GetMetadataRequest defines the request for retrieving metadata by key
message GetMetadataRequest {
  string key = 1;
}

// GetMetadataResponse defines the response for retrieving metadata
message GetMetadataResponse {
  bytes value = 1;
}

// GetGenesisDaHeightResponse defines the DA height at which the first Evolve block was included.
message GetGenesisDaHeightResponse {
  uint64 height = 3;
}

// BackupRequest defines the parameters for requesting a datastore backup.
message BackupRequest {
  // since_version allows incremental backups. 0 produces a full backup.
  uint64 since_version = 1;
}

// BackupMetadata contains progress or completion details emitted during a backup stream.
message BackupMetadata {
  uint64 current_height = 1;
  uint64 since_version = 2;
  uint64 last_version = 3;
  bool completed = 4;
}

// BackupResponse multiplexes metadata and raw backup data chunks in the stream.
message BackupResponse {
  // response contains either metadata about the backup progress or a chunk of backup data.
  oneof response {
    BackupMetadata metadata = 1;
    bytes chunk = 2;
  }
}
