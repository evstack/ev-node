// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: celestia/gas_estimator.proto

package celestiaconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	celestia "github.com/rollkit/rollkit/types/pb/celestia"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GasEstimatorName is the fully-qualified name of the GasEstimator service.
	GasEstimatorName = "celestia.GasEstimator"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GasEstimatorEstimateGasPriceProcedure is the fully-qualified name of the GasEstimator's
	// EstimateGasPrice RPC.
	GasEstimatorEstimateGasPriceProcedure = "/celestia.GasEstimator/EstimateGasPrice"
	// GasEstimatorEstimateGasPriceAndUsageProcedure is the fully-qualified name of the GasEstimator's
	// EstimateGasPriceAndUsage RPC.
	GasEstimatorEstimateGasPriceAndUsageProcedure = "/celestia.GasEstimator/EstimateGasPriceAndUsage"
)

// GasEstimatorClient is a client for the celestia.GasEstimator service.
type GasEstimatorClient interface {
	// estimateGasPrice takes a transaction priority and estimates the gas price
	// based on the gas prices of the transactions in the last five blocks. If no
	// transaction is found in the last five blocks, return the network min gas
	// price. It's up to the light client to set the gas price in this case to the
	// minimum gas price set by that node.
	EstimateGasPrice(context.Context, *connect.Request[celestia.EstimateGasPriceRequest]) (*connect.Response[celestia.EstimateGasPriceResponse], error)
	// EstimateGasPriceAndUsage takes a transaction priority and a transaction
	// bytes and estimates the gas price and the gas used for that transaction.
	// The gas price estimation is based on the gas prices of the transactions in
	// the last five blocks. If no transaction is found in the last five blocks,
	// return the network min gas price. It's up to the light client to set the
	// gas price in this case to the minimum gas price set by that node. The gas
	// used is estimated using the state machine simulation.
	EstimateGasPriceAndUsage(context.Context, *connect.Request[celestia.EstimateGasPriceAndUsageRequest]) (*connect.Response[celestia.EstimateGasPriceAndUsageResponse], error)
}

// NewGasEstimatorClient constructs a client for the celestia.GasEstimator service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGasEstimatorClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GasEstimatorClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gasEstimatorMethods := celestia.File_celestia_gas_estimator_proto.Services().ByName("GasEstimator").Methods()
	return &gasEstimatorClient{
		estimateGasPrice: connect.NewClient[celestia.EstimateGasPriceRequest, celestia.EstimateGasPriceResponse](
			httpClient,
			baseURL+GasEstimatorEstimateGasPriceProcedure,
			connect.WithSchema(gasEstimatorMethods.ByName("EstimateGasPrice")),
			connect.WithClientOptions(opts...),
		),
		estimateGasPriceAndUsage: connect.NewClient[celestia.EstimateGasPriceAndUsageRequest, celestia.EstimateGasPriceAndUsageResponse](
			httpClient,
			baseURL+GasEstimatorEstimateGasPriceAndUsageProcedure,
			connect.WithSchema(gasEstimatorMethods.ByName("EstimateGasPriceAndUsage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gasEstimatorClient implements GasEstimatorClient.
type gasEstimatorClient struct {
	estimateGasPrice         *connect.Client[celestia.EstimateGasPriceRequest, celestia.EstimateGasPriceResponse]
	estimateGasPriceAndUsage *connect.Client[celestia.EstimateGasPriceAndUsageRequest, celestia.EstimateGasPriceAndUsageResponse]
}

// EstimateGasPrice calls celestia.GasEstimator.EstimateGasPrice.
func (c *gasEstimatorClient) EstimateGasPrice(ctx context.Context, req *connect.Request[celestia.EstimateGasPriceRequest]) (*connect.Response[celestia.EstimateGasPriceResponse], error) {
	return c.estimateGasPrice.CallUnary(ctx, req)
}

// EstimateGasPriceAndUsage calls celestia.GasEstimator.EstimateGasPriceAndUsage.
func (c *gasEstimatorClient) EstimateGasPriceAndUsage(ctx context.Context, req *connect.Request[celestia.EstimateGasPriceAndUsageRequest]) (*connect.Response[celestia.EstimateGasPriceAndUsageResponse], error) {
	return c.estimateGasPriceAndUsage.CallUnary(ctx, req)
}

// GasEstimatorHandler is an implementation of the celestia.GasEstimator service.
type GasEstimatorHandler interface {
	// estimateGasPrice takes a transaction priority and estimates the gas price
	// based on the gas prices of the transactions in the last five blocks. If no
	// transaction is found in the last five blocks, return the network min gas
	// price. It's up to the light client to set the gas price in this case to the
	// minimum gas price set by that node.
	EstimateGasPrice(context.Context, *connect.Request[celestia.EstimateGasPriceRequest]) (*connect.Response[celestia.EstimateGasPriceResponse], error)
	// EstimateGasPriceAndUsage takes a transaction priority and a transaction
	// bytes and estimates the gas price and the gas used for that transaction.
	// The gas price estimation is based on the gas prices of the transactions in
	// the last five blocks. If no transaction is found in the last five blocks,
	// return the network min gas price. It's up to the light client to set the
	// gas price in this case to the minimum gas price set by that node. The gas
	// used is estimated using the state machine simulation.
	EstimateGasPriceAndUsage(context.Context, *connect.Request[celestia.EstimateGasPriceAndUsageRequest]) (*connect.Response[celestia.EstimateGasPriceAndUsageResponse], error)
}

// NewGasEstimatorHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGasEstimatorHandler(svc GasEstimatorHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gasEstimatorMethods := celestia.File_celestia_gas_estimator_proto.Services().ByName("GasEstimator").Methods()
	gasEstimatorEstimateGasPriceHandler := connect.NewUnaryHandler(
		GasEstimatorEstimateGasPriceProcedure,
		svc.EstimateGasPrice,
		connect.WithSchema(gasEstimatorMethods.ByName("EstimateGasPrice")),
		connect.WithHandlerOptions(opts...),
	)
	gasEstimatorEstimateGasPriceAndUsageHandler := connect.NewUnaryHandler(
		GasEstimatorEstimateGasPriceAndUsageProcedure,
		svc.EstimateGasPriceAndUsage,
		connect.WithSchema(gasEstimatorMethods.ByName("EstimateGasPriceAndUsage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/celestia.GasEstimator/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GasEstimatorEstimateGasPriceProcedure:
			gasEstimatorEstimateGasPriceHandler.ServeHTTP(w, r)
		case GasEstimatorEstimateGasPriceAndUsageProcedure:
			gasEstimatorEstimateGasPriceAndUsageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGasEstimatorHandler returns CodeUnimplemented from all methods.
type UnimplementedGasEstimatorHandler struct{}

func (UnimplementedGasEstimatorHandler) EstimateGasPrice(context.Context, *connect.Request[celestia.EstimateGasPriceRequest]) (*connect.Response[celestia.EstimateGasPriceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("celestia.GasEstimator.EstimateGasPrice is not implemented"))
}

func (UnimplementedGasEstimatorHandler) EstimateGasPriceAndUsage(context.Context, *connect.Request[celestia.EstimateGasPriceAndUsageRequest]) (*connect.Response[celestia.EstimateGasPriceAndUsageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("celestia.GasEstimator.EstimateGasPriceAndUsage is not implemented"))
}
