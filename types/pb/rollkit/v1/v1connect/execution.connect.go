// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rollkit/v1/execution.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/rollkit/rollkit/types/pb/rollkit/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExecutionServiceName is the fully-qualified name of the ExecutionService service.
	ExecutionServiceName = "rollkit.v1.ExecutionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExecutionServiceInitChainProcedure is the fully-qualified name of the ExecutionService's
	// InitChain RPC.
	ExecutionServiceInitChainProcedure = "/rollkit.v1.ExecutionService/InitChain"
	// ExecutionServiceGetTxsProcedure is the fully-qualified name of the ExecutionService's GetTxs RPC.
	ExecutionServiceGetTxsProcedure = "/rollkit.v1.ExecutionService/GetTxs"
	// ExecutionServiceExecuteTxsProcedure is the fully-qualified name of the ExecutionService's
	// ExecuteTxs RPC.
	ExecutionServiceExecuteTxsProcedure = "/rollkit.v1.ExecutionService/ExecuteTxs"
	// ExecutionServiceSetFinalProcedure is the fully-qualified name of the ExecutionService's SetFinal
	// RPC.
	ExecutionServiceSetFinalProcedure = "/rollkit.v1.ExecutionService/SetFinal"
)

// ExecutionServiceClient is a client for the rollkit.v1.ExecutionService service.
type ExecutionServiceClient interface {
	// InitChain initializes a new chain
	InitChain(context.Context, *connect.Request[v1.InitChainRequest]) (*connect.Response[v1.InitChainResponse], error)
	// GetTxs returns available transactions
	GetTxs(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetTxsResponse], error)
	// ExecuteTxs executes a batch of transactions
	ExecuteTxs(context.Context, *connect.Request[v1.ExecuteTxsRequest]) (*connect.Response[v1.ExecuteTxsResponse], error)
	// SetFinal marks a block as finalized
	SetFinal(context.Context, *connect.Request[v1.SetFinalRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewExecutionServiceClient constructs a client for the rollkit.v1.ExecutionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExecutionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExecutionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	executionServiceMethods := v1.File_rollkit_v1_execution_proto.Services().ByName("ExecutionService").Methods()
	return &executionServiceClient{
		initChain: connect.NewClient[v1.InitChainRequest, v1.InitChainResponse](
			httpClient,
			baseURL+ExecutionServiceInitChainProcedure,
			connect.WithSchema(executionServiceMethods.ByName("InitChain")),
			connect.WithClientOptions(opts...),
		),
		getTxs: connect.NewClient[emptypb.Empty, v1.GetTxsResponse](
			httpClient,
			baseURL+ExecutionServiceGetTxsProcedure,
			connect.WithSchema(executionServiceMethods.ByName("GetTxs")),
			connect.WithClientOptions(opts...),
		),
		executeTxs: connect.NewClient[v1.ExecuteTxsRequest, v1.ExecuteTxsResponse](
			httpClient,
			baseURL+ExecutionServiceExecuteTxsProcedure,
			connect.WithSchema(executionServiceMethods.ByName("ExecuteTxs")),
			connect.WithClientOptions(opts...),
		),
		setFinal: connect.NewClient[v1.SetFinalRequest, emptypb.Empty](
			httpClient,
			baseURL+ExecutionServiceSetFinalProcedure,
			connect.WithSchema(executionServiceMethods.ByName("SetFinal")),
			connect.WithClientOptions(opts...),
		),
	}
}

// executionServiceClient implements ExecutionServiceClient.
type executionServiceClient struct {
	initChain  *connect.Client[v1.InitChainRequest, v1.InitChainResponse]
	getTxs     *connect.Client[emptypb.Empty, v1.GetTxsResponse]
	executeTxs *connect.Client[v1.ExecuteTxsRequest, v1.ExecuteTxsResponse]
	setFinal   *connect.Client[v1.SetFinalRequest, emptypb.Empty]
}

// InitChain calls rollkit.v1.ExecutionService.InitChain.
func (c *executionServiceClient) InitChain(ctx context.Context, req *connect.Request[v1.InitChainRequest]) (*connect.Response[v1.InitChainResponse], error) {
	return c.initChain.CallUnary(ctx, req)
}

// GetTxs calls rollkit.v1.ExecutionService.GetTxs.
func (c *executionServiceClient) GetTxs(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetTxsResponse], error) {
	return c.getTxs.CallUnary(ctx, req)
}

// ExecuteTxs calls rollkit.v1.ExecutionService.ExecuteTxs.
func (c *executionServiceClient) ExecuteTxs(ctx context.Context, req *connect.Request[v1.ExecuteTxsRequest]) (*connect.Response[v1.ExecuteTxsResponse], error) {
	return c.executeTxs.CallUnary(ctx, req)
}

// SetFinal calls rollkit.v1.ExecutionService.SetFinal.
func (c *executionServiceClient) SetFinal(ctx context.Context, req *connect.Request[v1.SetFinalRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setFinal.CallUnary(ctx, req)
}

// ExecutionServiceHandler is an implementation of the rollkit.v1.ExecutionService service.
type ExecutionServiceHandler interface {
	// InitChain initializes a new chain
	InitChain(context.Context, *connect.Request[v1.InitChainRequest]) (*connect.Response[v1.InitChainResponse], error)
	// GetTxs returns available transactions
	GetTxs(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetTxsResponse], error)
	// ExecuteTxs executes a batch of transactions
	ExecuteTxs(context.Context, *connect.Request[v1.ExecuteTxsRequest]) (*connect.Response[v1.ExecuteTxsResponse], error)
	// SetFinal marks a block as finalized
	SetFinal(context.Context, *connect.Request[v1.SetFinalRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewExecutionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExecutionServiceHandler(svc ExecutionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	executionServiceMethods := v1.File_rollkit_v1_execution_proto.Services().ByName("ExecutionService").Methods()
	executionServiceInitChainHandler := connect.NewUnaryHandler(
		ExecutionServiceInitChainProcedure,
		svc.InitChain,
		connect.WithSchema(executionServiceMethods.ByName("InitChain")),
		connect.WithHandlerOptions(opts...),
	)
	executionServiceGetTxsHandler := connect.NewUnaryHandler(
		ExecutionServiceGetTxsProcedure,
		svc.GetTxs,
		connect.WithSchema(executionServiceMethods.ByName("GetTxs")),
		connect.WithHandlerOptions(opts...),
	)
	executionServiceExecuteTxsHandler := connect.NewUnaryHandler(
		ExecutionServiceExecuteTxsProcedure,
		svc.ExecuteTxs,
		connect.WithSchema(executionServiceMethods.ByName("ExecuteTxs")),
		connect.WithHandlerOptions(opts...),
	)
	executionServiceSetFinalHandler := connect.NewUnaryHandler(
		ExecutionServiceSetFinalProcedure,
		svc.SetFinal,
		connect.WithSchema(executionServiceMethods.ByName("SetFinal")),
		connect.WithHandlerOptions(opts...),
	)
	return "/rollkit.v1.ExecutionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExecutionServiceInitChainProcedure:
			executionServiceInitChainHandler.ServeHTTP(w, r)
		case ExecutionServiceGetTxsProcedure:
			executionServiceGetTxsHandler.ServeHTTP(w, r)
		case ExecutionServiceExecuteTxsProcedure:
			executionServiceExecuteTxsHandler.ServeHTTP(w, r)
		case ExecutionServiceSetFinalProcedure:
			executionServiceSetFinalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExecutionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExecutionServiceHandler struct{}

func (UnimplementedExecutionServiceHandler) InitChain(context.Context, *connect.Request[v1.InitChainRequest]) (*connect.Response[v1.InitChainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.ExecutionService.InitChain is not implemented"))
}

func (UnimplementedExecutionServiceHandler) GetTxs(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetTxsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.ExecutionService.GetTxs is not implemented"))
}

func (UnimplementedExecutionServiceHandler) ExecuteTxs(context.Context, *connect.Request[v1.ExecuteTxsRequest]) (*connect.Response[v1.ExecuteTxsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.ExecutionService.ExecuteTxs is not implemented"))
}

func (UnimplementedExecutionServiceHandler) SetFinal(context.Context, *connect.Request[v1.SetFinalRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.ExecutionService.SetFinal is not implemented"))
}
