// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rollkit/v1/p2p_rpc.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/rollkit/rollkit/types/pb/rollkit/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// P2PServiceName is the fully-qualified name of the P2PService service.
	P2PServiceName = "rollkit.v1.P2PService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// P2PServiceGetPeerInfoProcedure is the fully-qualified name of the P2PService's GetPeerInfo RPC.
	P2PServiceGetPeerInfoProcedure = "/rollkit.v1.P2PService/GetPeerInfo"
	// P2PServiceGetNetInfoProcedure is the fully-qualified name of the P2PService's GetNetInfo RPC.
	P2PServiceGetNetInfoProcedure = "/rollkit.v1.P2PService/GetNetInfo"
)

// P2PServiceClient is a client for the rollkit.v1.P2PService service.
type P2PServiceClient interface {
	// GetPeerInfo returns information about the connected peers
	GetPeerInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetPeerInfoResponse], error)
	// GetNetInfo returns network information
	GetNetInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNetInfoResponse], error)
}

// NewP2PServiceClient constructs a client for the rollkit.v1.P2PService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewP2PServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) P2PServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	p2PServiceMethods := v1.File_rollkit_v1_p2p_rpc_proto.Services().ByName("P2PService").Methods()
	return &p2PServiceClient{
		getPeerInfo: connect.NewClient[emptypb.Empty, v1.GetPeerInfoResponse](
			httpClient,
			baseURL+P2PServiceGetPeerInfoProcedure,
			connect.WithSchema(p2PServiceMethods.ByName("GetPeerInfo")),
			connect.WithClientOptions(opts...),
		),
		getNetInfo: connect.NewClient[emptypb.Empty, v1.GetNetInfoResponse](
			httpClient,
			baseURL+P2PServiceGetNetInfoProcedure,
			connect.WithSchema(p2PServiceMethods.ByName("GetNetInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// p2PServiceClient implements P2PServiceClient.
type p2PServiceClient struct {
	getPeerInfo *connect.Client[emptypb.Empty, v1.GetPeerInfoResponse]
	getNetInfo  *connect.Client[emptypb.Empty, v1.GetNetInfoResponse]
}

// GetPeerInfo calls rollkit.v1.P2PService.GetPeerInfo.
func (c *p2PServiceClient) GetPeerInfo(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetPeerInfoResponse], error) {
	return c.getPeerInfo.CallUnary(ctx, req)
}

// GetNetInfo calls rollkit.v1.P2PService.GetNetInfo.
func (c *p2PServiceClient) GetNetInfo(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNetInfoResponse], error) {
	return c.getNetInfo.CallUnary(ctx, req)
}

// P2PServiceHandler is an implementation of the rollkit.v1.P2PService service.
type P2PServiceHandler interface {
	// GetPeerInfo returns information about the connected peers
	GetPeerInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetPeerInfoResponse], error)
	// GetNetInfo returns network information
	GetNetInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNetInfoResponse], error)
}

// NewP2PServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewP2PServiceHandler(svc P2PServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	p2PServiceMethods := v1.File_rollkit_v1_p2p_rpc_proto.Services().ByName("P2PService").Methods()
	p2PServiceGetPeerInfoHandler := connect.NewUnaryHandler(
		P2PServiceGetPeerInfoProcedure,
		svc.GetPeerInfo,
		connect.WithSchema(p2PServiceMethods.ByName("GetPeerInfo")),
		connect.WithHandlerOptions(opts...),
	)
	p2PServiceGetNetInfoHandler := connect.NewUnaryHandler(
		P2PServiceGetNetInfoProcedure,
		svc.GetNetInfo,
		connect.WithSchema(p2PServiceMethods.ByName("GetNetInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/rollkit.v1.P2PService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case P2PServiceGetPeerInfoProcedure:
			p2PServiceGetPeerInfoHandler.ServeHTTP(w, r)
		case P2PServiceGetNetInfoProcedure:
			p2PServiceGetNetInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedP2PServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedP2PServiceHandler struct{}

func (UnimplementedP2PServiceHandler) GetPeerInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetPeerInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.P2PService.GetPeerInfo is not implemented"))
}

func (UnimplementedP2PServiceHandler) GetNetInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetNetInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.P2PService.GetNetInfo is not implemented"))
}
