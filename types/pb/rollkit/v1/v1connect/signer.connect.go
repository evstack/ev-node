// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rollkit/v1/signer.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/rollkit/rollkit/types/pb/rollkit/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SignerServiceName is the fully-qualified name of the SignerService service.
	SignerServiceName = "rollkit.v1.SignerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SignerServiceSignProcedure is the fully-qualified name of the SignerService's Sign RPC.
	SignerServiceSignProcedure = "/rollkit.v1.SignerService/Sign"
	// SignerServiceGetPublicProcedure is the fully-qualified name of the SignerService's GetPublic RPC.
	SignerServiceGetPublicProcedure = "/rollkit.v1.SignerService/GetPublic"
)

// SignerServiceClient is a client for the rollkit.v1.SignerService service.
type SignerServiceClient interface {
	// Sign signs the given message.
	Sign(context.Context, *connect.Request[v1.SignRequest]) (*connect.Response[v1.SignResponse], error)
	// GetPublic returns the public key.
	GetPublic(context.Context, *connect.Request[v1.GetPublicRequest]) (*connect.Response[v1.GetPublicResponse], error)
}

// NewSignerServiceClient constructs a client for the rollkit.v1.SignerService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSignerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SignerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	signerServiceMethods := v1.File_rollkit_v1_signer_proto.Services().ByName("SignerService").Methods()
	return &signerServiceClient{
		sign: connect.NewClient[v1.SignRequest, v1.SignResponse](
			httpClient,
			baseURL+SignerServiceSignProcedure,
			connect.WithSchema(signerServiceMethods.ByName("Sign")),
			connect.WithClientOptions(opts...),
		),
		getPublic: connect.NewClient[v1.GetPublicRequest, v1.GetPublicResponse](
			httpClient,
			baseURL+SignerServiceGetPublicProcedure,
			connect.WithSchema(signerServiceMethods.ByName("GetPublic")),
			connect.WithClientOptions(opts...),
		),
	}
}

// signerServiceClient implements SignerServiceClient.
type signerServiceClient struct {
	sign      *connect.Client[v1.SignRequest, v1.SignResponse]
	getPublic *connect.Client[v1.GetPublicRequest, v1.GetPublicResponse]
}

// Sign calls rollkit.v1.SignerService.Sign.
func (c *signerServiceClient) Sign(ctx context.Context, req *connect.Request[v1.SignRequest]) (*connect.Response[v1.SignResponse], error) {
	return c.sign.CallUnary(ctx, req)
}

// GetPublic calls rollkit.v1.SignerService.GetPublic.
func (c *signerServiceClient) GetPublic(ctx context.Context, req *connect.Request[v1.GetPublicRequest]) (*connect.Response[v1.GetPublicResponse], error) {
	return c.getPublic.CallUnary(ctx, req)
}

// SignerServiceHandler is an implementation of the rollkit.v1.SignerService service.
type SignerServiceHandler interface {
	// Sign signs the given message.
	Sign(context.Context, *connect.Request[v1.SignRequest]) (*connect.Response[v1.SignResponse], error)
	// GetPublic returns the public key.
	GetPublic(context.Context, *connect.Request[v1.GetPublicRequest]) (*connect.Response[v1.GetPublicResponse], error)
}

// NewSignerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSignerServiceHandler(svc SignerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	signerServiceMethods := v1.File_rollkit_v1_signer_proto.Services().ByName("SignerService").Methods()
	signerServiceSignHandler := connect.NewUnaryHandler(
		SignerServiceSignProcedure,
		svc.Sign,
		connect.WithSchema(signerServiceMethods.ByName("Sign")),
		connect.WithHandlerOptions(opts...),
	)
	signerServiceGetPublicHandler := connect.NewUnaryHandler(
		SignerServiceGetPublicProcedure,
		svc.GetPublic,
		connect.WithSchema(signerServiceMethods.ByName("GetPublic")),
		connect.WithHandlerOptions(opts...),
	)
	return "/rollkit.v1.SignerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SignerServiceSignProcedure:
			signerServiceSignHandler.ServeHTTP(w, r)
		case SignerServiceGetPublicProcedure:
			signerServiceGetPublicHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSignerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSignerServiceHandler struct{}

func (UnimplementedSignerServiceHandler) Sign(context.Context, *connect.Request[v1.SignRequest]) (*connect.Response[v1.SignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.SignerService.Sign is not implemented"))
}

func (UnimplementedSignerServiceHandler) GetPublic(context.Context, *connect.Request[v1.GetPublicRequest]) (*connect.Response[v1.GetPublicResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rollkit.v1.SignerService.GetPublic is not implemented"))
}
