import{_ as a,c as i,ag as t,o as e}from"./chunks/framework.DlgP5dhN.js";const g=JSON.parse('{"title":"Block and Header Validity","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Block and Header Validity | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"learn/specs/block-validity.md","filePath":"learn/specs/block-validity.md","lastUpdated":1760705574000}'),n={name:"learn/specs/block-validity.md"};function h(d,s,l,r,p,k){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="block-and-header-validity" tabindex="-1">Block and Header Validity <a class="header-anchor" href="#block-and-header-validity" aria-label="Permalink to &quot;Block and Header Validity&quot;">​</a></h1><h2 id="abstract" tabindex="-1">Abstract <a class="header-anchor" href="#abstract" aria-label="Permalink to &quot;Abstract&quot;">​</a></h2><p>Like all blockchains, chains are defined as the chain of <strong>valid</strong> blocks from the genesis, to the head. Thus, the block and header validity rules define the chain.</p><p>Verifying a block/header is done in 3 parts:</p><ol><li><p>Verify correct serialization according to the protobuf spec</p></li><li><p>Perform basic validation of the types</p></li><li><p>Perform verification of the new block against the previously accepted block</p></li></ol><p>Evolve uses a header/data separation architecture where headers and data can be validated independently. The system has moved from a multi-validator model to a single signer model for simplified sequencer management.</p><h2 id="basic-validation" tabindex="-1">Basic Validation <a class="header-anchor" href="#basic-validation" aria-label="Permalink to &quot;Basic Validation&quot;">​</a></h2><p>Each type contains a <code>.ValidateBasic()</code> method, which verifies that certain basic invariants hold. The <code>ValidateBasic()</code> calls are nested for each structure.</p><h3 id="signedheader-validation" tabindex="-1">SignedHeader Validation <a class="header-anchor" href="#signedheader-validation" aria-label="Permalink to &quot;SignedHeader Validation&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SignedHeader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ValidateBasic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Make sure the SignedHeader&#39;s Header passes basic validation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Header.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ValidateBasic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verify ProposerAddress not </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Make sure the SignedHeader&#39;s signature passes basic validation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Signature.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ValidateBasic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Ensure that someone signed the header</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verify </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c.Signatures) not </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // For based chains (sh.Signer.IsEmpty()), pass validation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sh.Signer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Verify the signer matches the proposer address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verify sh.Signer.Address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sh.ProposerAddress</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Verify signature using custom verifier if set, otherwise use default</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sh.verifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      verify sh.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sh) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      verify sh.Signature.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sh.Signer.PubKey, sh.Header.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MarshalBinary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><h3 id="signeddata-validation" tabindex="-1">SignedData Validation <a class="header-anchor" href="#signeddata-validation" aria-label="Permalink to &quot;SignedData Validation&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SignedData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ValidateBasic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Always passes basic validation for the Data itself</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ValidateBasic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// always passes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Make sure the signature is valid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Signature.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ValidateBasic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verify </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c.Signatures) not </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Verify the signer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  If </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sd.Signer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verify sd.Signature.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sd.Signer.PubKey, sd.Data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MarshalBinary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><h3 id="block-validation" tabindex="-1">Block Validation <a class="header-anchor" href="#block-validation" aria-label="Permalink to &quot;Block Validation&quot;">​</a></h3><p>Blocks are composed of SignedHeader and Data:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Block validation happens by validating header and data separately</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// then ensuring data hash matches</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">verify SignedHeader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ValidateBasic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">verify Data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SignedHeader.DataHash</span></span></code></pre></div><h2 id="verification-against-previous-block" tabindex="-1">Verification Against Previous Block <a class="header-anchor" href="#verification-against-previous-block" aria-label="Permalink to &quot;Verification Against Previous Block&quot;">​</a></h2><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SignedHeader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(untrustedHeader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SignedHeader)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Basic validation is handled by go-header before this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Header.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(untrustedHeader)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Verify height sequence</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> untrustedHeader.Height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h.Height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> untrustedHeader.Height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h.Height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> soft verification failure</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;headers are not adjacent&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Verify the link to previous header</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verify untrustedHeader.LastHeaderHash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h.Header.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Note: ValidatorHash field exists for compatibility but is not validated</span></span></code></pre></div><h2 id="data" tabindex="-1"><a href="https://github.com/evstack/ev-node/blob/main/types/data.go" target="_blank" rel="noreferrer">Data</a> <a class="header-anchor" href="#data" aria-label="Permalink to &quot;[Data](https://github.com/evstack/ev-node/blob/main/types/data.go)&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>Field Name</strong></th><th><strong>Valid State</strong></th><th><strong>Validation</strong></th></tr></thead><tbody><tr><td>Txs</td><td>Transaction data of the block</td><td>Data.Hash() == SignedHeader.DataHash</td></tr><tr><td>Metadata</td><td>Optional p2p gossiping metadata</td><td>Not validated</td></tr></tbody></table><h2 id="signedheader" tabindex="-1"><a href="https://github.com/evstack/ev-node/blob/main/types/signed_header.go" target="_blank" rel="noreferrer">SignedHeader</a> <a class="header-anchor" href="#signedheader" aria-label="Permalink to &quot;[SignedHeader](https://github.com/evstack/ev-node/blob/main/types/signed_header.go)&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>Field Name</strong></th><th><strong>Valid State</strong></th><th><strong>Validation</strong></th></tr></thead><tbody><tr><td>Header</td><td>Valid header for the block</td><td><code>Header</code> passes <code>ValidateBasic()</code> and <code>Verify()</code></td></tr><tr><td>Signature</td><td>Valid signature from the single sequencer</td><td><code>Signature</code> passes <code>ValidateBasic()</code>, verified against signer</td></tr><tr><td>Signer</td><td>Information about who signed the header</td><td>Must match ProposerAddress if not empty (based chain case)</td></tr><tr><td>verifier</td><td>Optional custom signature verification function</td><td>Used instead of default verification if set</td></tr></tbody></table><h2 id="header" tabindex="-1"><a href="https://github.com/evstack/ev-node/blob/main/types/header.go" target="_blank" rel="noreferrer">Header</a> <a class="header-anchor" href="#header" aria-label="Permalink to &quot;[Header](https://github.com/evstack/ev-node/blob/main/types/header.go)&quot;">​</a></h2><p><em><strong>Note</strong></em>: Evolve has moved to a single signer model. The multi-validator architecture has been replaced with a simpler single sequencer approach.</p><table tabindex="0"><thead><tr><th><strong>Field Name</strong></th><th><strong>Valid State</strong></th><th><strong>Validation</strong></th></tr></thead><tbody><tr><td><strong>BaseHeader</strong></td><td></td><td></td></tr><tr><td>Height</td><td>Height of the previous accepted header, plus 1.</td><td>checked in the \`Verify()\`\` step</td></tr><tr><td>Time</td><td>Timestamp of the block</td><td>Not validated in Evolve</td></tr><tr><td>ChainID</td><td>The hard-coded ChainID of the chain</td><td>Should be checked as soon as the header is received</td></tr><tr><td><strong>Header</strong> .</td><td></td><td></td></tr><tr><td>Version</td><td>unused</td><td></td></tr><tr><td>LastHeaderHash</td><td>The hash of the previous accepted block</td><td>checked in the \`Verify()\`\` step</td></tr><tr><td>DataHash</td><td>Correct hash of the block&#39;s Data field</td><td>checked in the \`ValidateBasic()\`\` step</td></tr><tr><td>AppHash</td><td>The correct state root after executing the block&#39;s transactions against the accepted state</td><td>checked during block execution</td></tr><tr><td>ProposerAddress</td><td>Address of the expected proposer</td><td>Must match Signer.Address in SignedHeader</td></tr><tr><td>ValidatorHash</td><td>Compatibility field for Tendermint light client</td><td>Not validated</td></tr></tbody></table><h2 id="signer" tabindex="-1"><a href="https://github.com/evstack/ev-node/blob/main/types/signed_header.go" target="_blank" rel="noreferrer">Signer</a> <a class="header-anchor" href="#signer" aria-label="Permalink to &quot;[Signer](https://github.com/evstack/ev-node/blob/main/types/signed_header.go)&quot;">​</a></h2><p>The Signer type replaces the previous ValidatorSet for single sequencer operation:</p><table tabindex="0"><thead><tr><th><strong>Field Name</strong></th><th><strong>Valid State</strong></th><th><strong>Validation</strong></th></tr></thead><tbody><tr><td>PubKey</td><td>Public key of the signer</td><td>Must not be nil if Signer is not empty</td></tr><tr><td>Address</td><td>Address derived from the public key</td><td>Must match ProposerAddress</td></tr></tbody></table>`,27)]))}const c=a(n,[["render",h]]);export{g as __pageData,c as default};
