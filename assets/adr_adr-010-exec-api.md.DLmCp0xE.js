import{_ as c,c as d,ag as n,b as o,w as i,af as l,j as r,a,B as p,o as t,G as h}from"./chunks/framework.CmpABV1Y.js";const y=JSON.parse('{"title":"ADR 10: Execution API","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"ADR 10: Execution API | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"adr/adr-010-exec-api.md","filePath":"adr/adr-010-exec-api.md","lastUpdated":1753438408000}'),u={name:"adr/adr-010-exec-api.md"};function k(g,e,m,E,x,b){const s=p("Mermaid");return t(),d("div",null,[e[2]||(e[2]=n(`<h1 id="adr-10-execution-api" tabindex="-1">ADR 10: Execution API <a class="header-anchor" href="#adr-10-execution-api" aria-label="Permalink to &quot;ADR 10: Execution API&quot;">​</a></h1><h2 id="changelog" tabindex="-1">Changelog <a class="header-anchor" href="#changelog" aria-label="Permalink to &quot;Changelog&quot;">​</a></h2><ul><li>2025.01.13: Initial draft</li><li>2025.04.24: Various improvements</li></ul><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>Introduction of the Execution API makes rollkit very generic and execution-environment agnostic. It removes all ABCI-centric code for full interoperability with other types of VMs.</p><p>The Execution API serves as a bridge between Rollkit and various execution environments (VMs), allowing Rollkit to remain agnostic to the specific implementation details of the execution layer. This separation enables:</p><ol><li>Support for multiple VM types (EVM, WASM, etc.)</li><li>Easier integration with different execution environments</li><li>Cleaner separation of concerns between consensus and execution</li><li>More flexible and maintainable architecture</li></ol><h2 id="alternative-approaches" tabindex="-1">Alternative Approaches <a class="header-anchor" href="#alternative-approaches" aria-label="Permalink to &quot;Alternative Approaches&quot;">​</a></h2><ol><li>Maintain current state: keep ABCI interface and implement other VMs inside ABCI application. <ul><li>Pros: No changes required to existing code</li><li>Cons: ABCI-specific code remains, limiting flexibility</li></ul></li><li>Migrate to Engine API. <ul><li>Pros: Standard interface for EVM-based chains</li><li>Cons: Too specific to EVM, not suitable for other VMs</li></ul></li></ol><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><p>New generic Execution API is proposed. It was designed to accommodate ABCI, Engine API, and any other VM / execution environment.</p><h2 id="detailed-design" tabindex="-1">Detailed Design <a class="header-anchor" href="#detailed-design" aria-label="Permalink to &quot;Detailed Design&quot;">​</a></h2><h3 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h3><p>Execution API consist of 4 methods defined in <a href="https://github.com/rollkit/go-execution" target="_blank" rel="noreferrer">go-execution</a> repository.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Executor defines a common interface for interacting with the execution client.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Executor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// InitChain initializes the blockchain with genesis information.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	InitChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">genesisTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">initialHeight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chainID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stateRoot</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">maxBytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// GetTxs retrieves all available transactions from the execution client&#39;s mempool.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	GetTxs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ([]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// ExecuteTxs executes a set of transactions to produce a new block header.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	ExecuteTxs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">txs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">blockHeight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">timestamp</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prevStateRoot</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">updatedStateRoot</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">maxBytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// SetFinal marks a block at the given height as final.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	SetFinal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">blockHeight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="api-methods-specification" tabindex="-1">API Methods specification <a class="header-anchor" href="#api-methods-specification" aria-label="Permalink to &quot;API Methods specification&quot;">​</a></h3><h4 id="initchain" tabindex="-1"><code>InitChain</code> <a class="header-anchor" href="#initchain" aria-label="Permalink to &quot;\`InitChain\`&quot;">​</a></h4><h5 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h5><p>Initializes the blockchain&#39;s state based on genesis information. This method is invoked at the beginning of the blockchain&#39;s lifecycle to prepare the execution environment for subsequent operations.</p><h5 id="inputs" tabindex="-1">Inputs <a class="header-anchor" href="#inputs" aria-label="Permalink to &quot;Inputs&quot;">​</a></h5><ul><li><code>ctx</code> (<code>context.Context</code>): Context for managing request timeouts and cancellations.</li><li><code>genesisTime</code> (<code>time.Time</code>): The initial timestamp of the chain.</li><li><code>initialHeight</code> (<code>uint64</code>): The starting height of the chain.</li><li><code>chainID</code> (<code>string</code>): A unique identifier of the chain network.</li></ul><h5 id="outputs" tabindex="-1">Outputs <a class="header-anchor" href="#outputs" aria-label="Permalink to &quot;Outputs&quot;">​</a></h5><ul><li><code>stateRoot</code> (<code>types.Hash</code>): The resulting state root after initializing the chain.</li><li><code>maxBytes</code> (<code>uint64</code>): Maximum block size in bytes, as defined by the execution client&#39;s genesis configuration.</li><li><code>err</code> (<code>error</code>): An error, if the initialization process fails.</li></ul><h5 id="expected-behavior" tabindex="-1">Expected Behavior <a class="header-anchor" href="#expected-behavior" aria-label="Permalink to &quot;Expected Behavior&quot;">​</a></h5><ul><li>Initialize the chain according to the genesis.</li><li>Generate an initial <code>stateRoot</code> representing the genesis state of the chain.</li><li>Return the maximum allowable block size (<code>maxBytes</code>).</li><li>Ensure all necessary state is initialized for subsequent operations.</li></ul><h4 id="gettxs" tabindex="-1"><code>GetTxs</code> <a class="header-anchor" href="#gettxs" aria-label="Permalink to &quot;\`GetTxs\`&quot;">​</a></h4><h5 id="description-1" tabindex="-1">Description <a class="header-anchor" href="#description-1" aria-label="Permalink to &quot;Description&quot;">​</a></h5><p>Fetches all pending transactions from the execution client&#39;s mempool. Transactions returned by execution client will be passed by rollkit to sequencer.</p><h5 id="inputs-1" tabindex="-1">Inputs <a class="header-anchor" href="#inputs-1" aria-label="Permalink to &quot;Inputs&quot;">​</a></h5><ul><li><code>ctx</code> (<code>context.Context</code>): Context for managing request timeouts and cancellations.</li></ul><h5 id="outputs-1" tabindex="-1">Outputs <a class="header-anchor" href="#outputs-1" aria-label="Permalink to &quot;Outputs&quot;">​</a></h5><ul><li><code>txs</code> (<code>[]types.Tx</code>): Slice of transactions retrieved from the execution client&#39;s mempool; ordering doesn&#39;t matter.</li><li><code>err</code> (<code>error</code>): An error, if any, while retrieving transactions.</li></ul><h5 id="expected-behavior-1" tabindex="-1">Expected Behavior <a class="header-anchor" href="#expected-behavior-1" aria-label="Permalink to &quot;Expected Behavior&quot;">​</a></h5><ul><li>Access the mempool and retrieve all available transactions.</li><li>If no transactions are available, return an empty slice without error.</li><li>Do not remove (&quot;reap&quot;) transactions from mempool.</li><li>Ensure transactions are valid and properly formatted.</li></ul><h4 id="executetxs" tabindex="-1"><code>ExecuteTxs</code> <a class="header-anchor" href="#executetxs" aria-label="Permalink to &quot;\`ExecuteTxs\`&quot;">​</a></h4><h5 id="description-2" tabindex="-1">Description <a class="header-anchor" href="#description-2" aria-label="Permalink to &quot;Description&quot;">​</a></h5><p>Executes a given set of transactions, updating the blockchain state.</p><h5 id="inputs-2" tabindex="-1">Inputs <a class="header-anchor" href="#inputs-2" aria-label="Permalink to &quot;Inputs&quot;">​</a></h5><ul><li><code>ctx</code> (<code>context.Context</code>): Context for managing request timeouts and cancellations.</li><li><code>txs</code> (<code>[]types.Tx</code>): A slice of transactions to be executed.</li><li><code>blockHeight</code> (<code>uint64</code>): The height of the block these transactions belong to.</li><li><code>timestamp</code> (<code>time.Time</code>): The block&#39;s timestamp.</li><li><code>prevStateRoot</code> (<code>types.Hash</code>): The state root of the chain before applying the transactions.</li></ul><h5 id="outputs-2" tabindex="-1">Outputs <a class="header-anchor" href="#outputs-2" aria-label="Permalink to &quot;Outputs&quot;">​</a></h5><ul><li><code>updatedStateRoot</code> (<code>types.Hash</code>): The resulting state root after applying the transactions.</li><li><code>maxBytes</code> (<code>uint64</code>): Maximum block size in bytes, as allowed for the block being produced.</li><li><code>err</code> (<code>error</code>): An error, if any, during the execution process.</li></ul><h5 id="expected-behavior-2" tabindex="-1">Expected Behavior <a class="header-anchor" href="#expected-behavior-2" aria-label="Permalink to &quot;Expected Behavior&quot;">​</a></h5><ul><li>Validate and apply the provided transactions to the current blockchain state.</li><li>Generate an updated <code>stateRoot</code> reflecting changes introduced by the transactions.</li><li>Enforce block size and validity limits, returning errors if constraints are violated.</li><li>Respect the ordering of transactions.</li><li>Update the mempool to remove all executed transactions.</li><li>Ensure atomic execution - either all transactions succeed or none do.</li></ul><h4 id="setfinal" tabindex="-1"><code>SetFinal</code> <a class="header-anchor" href="#setfinal" aria-label="Permalink to &quot;\`SetFinal\`&quot;">​</a></h4><h5 id="description-3" tabindex="-1">Description <a class="header-anchor" href="#description-3" aria-label="Permalink to &quot;Description&quot;">​</a></h5><p>Marks a block at the specified height as final, guaranteeing immutability for consensus purposes.</p><h5 id="inputs-3" tabindex="-1">Inputs <a class="header-anchor" href="#inputs-3" aria-label="Permalink to &quot;Inputs&quot;">​</a></h5><ul><li><code>ctx</code> (<code>context.Context</code>): Context for managing request timeouts and cancellations.</li><li><code>blockHeight</code> (<code>uint64</code>): The height of the block to be finalized.</li></ul><h5 id="outputs-3" tabindex="-1">Outputs <a class="header-anchor" href="#outputs-3" aria-label="Permalink to &quot;Outputs&quot;">​</a></h5><ul><li><code>err</code> (<code>error</code>): An error, if any, during the finalization process.</li></ul><h5 id="expected-behavior-3" tabindex="-1">Expected Behavior <a class="header-anchor" href="#expected-behavior-3" aria-label="Permalink to &quot;Expected Behavior&quot;">​</a></h5><ul><li>Update the execution client&#39;s internal state to reflect that the specified block is final and immutable.</li><li>Ensure additional guarantees like cleaning up unnecessary resources associated with blocks deemed final.</li><li>Prevent any modifications to finalized blocks.</li><li>Optimize storage for finalized blocks if possible.</li></ul><h4 id="general-notes" tabindex="-1">General Notes <a class="header-anchor" href="#general-notes" aria-label="Permalink to &quot;General Notes&quot;">​</a></h4><ol><li><strong>Thread-Safety</strong>: All methods are not expected to be thread-safe, concurrent calls are not planned.</li><li><strong>Error Handling</strong>: All methods should follow robust error handling practices, ensuring meaningful errors are returned when issues occur.</li><li><strong>Context Usage</strong>: Methods should respect context-based deadlines and cancellations for long-running operations.</li><li><strong>State Management</strong>: The execution environment is responsible for maintaining its own state and ensuring consistency.</li><li><strong>Atomicity</strong>: Operations that modify state should be atomic - either fully succeed or fully fail.</li></ol><h3 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h3><p>The Execution API was designed to be highly generic. As a result, the types introduced in the API are intentionally abstract to ensure compatibility across various virtual machines and execution environments.</p><ol><li><code>types.Hash</code> represents a cryptographic hash. To maintain generality, it is implemented as an alias for <code>[]byte</code>.</li><li><code>types.Tx</code> represents a transaction in the most basic form. It is also defined as an alias for <code>[]byte</code>.</li></ol><p>This design choice ensures maximum flexibility and allows the API to remain independent of specific implementations or formats. It facilitates interoperability across different execution environments while keeping the API lightweight and adaptable.</p><h3 id="block-size-management" tabindex="-1">Block Size Management <a class="header-anchor" href="#block-size-management" aria-label="Permalink to &quot;Block Size Management&quot;">​</a></h3><p>The Execution API includes <code>maxBytes</code> as a return value in both <code>InitChain</code> and <code>ExecuteTxs</code> methods. This parameter plays a crucial role in block size management:</p><ol><li><p><strong>Initial Configuration</strong>: During <code>InitChain</code>, the execution environment returns the maximum block size allowed by its genesis configuration. This value is used by Rollkit to enforce block size limits during block production.</p></li><li><p><strong>Dynamic Adjustment</strong>: In <code>ExecuteTxs</code>, the execution environment can return an updated <code>maxBytes</code> value. This allows for dynamic adjustment of block size limits based on:</p><ul><li>Network conditions</li><li>Resource availability</li><li>Protocol-specific requirements</li><li>Other runtime factors</li></ul></li><li><p><strong>Implementation Requirements</strong>:</p><ul><li>The execution environment must ensure that blocks produced do not exceed the returned <code>maxBytes</code> value</li><li>If a block would exceed the limit, the execution environment should return an error</li><li>The value should be consistent with the execution environment&#39;s capabilities and constraints</li><li>A protocol overhead buffer is subtracted from the DA layer&#39;s max blob size to account for block headers and encoding</li></ul></li><li><p><strong>System-wide Coordination</strong>:</p><ul><li>Rollkit gets the initial <code>maxBytes</code> value from the DA layer and passes it to the sequencer</li><li>The sequencer uses this value to limit the size of transaction batches it creates</li><li>The sequencer&#39;s <code>PopUpToMaxBytes</code> method ensures transactions don&#39;t exceed the size limit</li><li>This coordination ensures consistent block size constraints across the entire system</li></ul></li><li><p><strong>Usage in Rollkit</strong>:</p><ul><li>Rollkit uses this value to validate block sizes before submission</li><li>Helps prevent oversized blocks from being produced</li><li>Enables dynamic adjustment of block size limits without protocol changes</li></ul></li></ol><h3 id="implementation-guidelines" tabindex="-1">Implementation Guidelines <a class="header-anchor" href="#implementation-guidelines" aria-label="Permalink to &quot;Implementation Guidelines&quot;">​</a></h3><ol><li><p><strong>State Management</strong>:</p><ul><li>Execution environments must maintain their own state</li><li>State transitions should be atomic</li><li>State should be persisted appropriately</li><li>State should be recoverable after crashes</li></ul></li><li><p><strong>Error Handling</strong>:</p><ul><li>Return meaningful error messages</li><li>Handle context cancellations gracefully</li><li>Ensure proper cleanup on errors</li><li>Maintain state consistency even after errors</li></ul></li><li><p><strong>Performance Considerations</strong>:</p><ul><li>Optimize for common operations</li><li>Consider caching where appropriate</li><li>Handle large state sizes efficiently</li><li>Minimize unnecessary state transitions</li></ul></li><li><p><strong>Security</strong>:</p><ul><li>Validate all inputs thoroughly</li><li>Prevent unauthorized state modifications</li><li>Ensure proper access control</li><li>Handle sensitive data appropriately</li></ul></li></ol><h3 id="sequence-diagrams" tabindex="-1">Sequence Diagrams <a class="header-anchor" href="#sequence-diagrams" aria-label="Permalink to &quot;Sequence Diagrams&quot;">​</a></h3><h4 id="block-production" tabindex="-1">Block production <a class="header-anchor" href="#block-production" aria-label="Permalink to &quot;Block production&quot;">​</a></h4>`,65)),(t(),o(l,null,{default:i(()=>[h(s,{id:"mermaid-684",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20D%20as%20DA%20layer%0A%20%20%20%20participant%20S%20as%20sequencer%0A%20%20%20%20participant%20R%20as%20Rollkit%0A%20%20%20%20participant%20E%20as%20exec-env%0A%0A%20%20%20%20R%20-%3E%3E%20%2BE%3A%20InitChain%0A%20%20%20%20E%20--%3E%3E%20-R%3A%20stateRoot%2C%20maxBytes%0A%20%20%20%20loop%20Every%20block%20time%0A%20%20%20%20%20%20%20%20R%20-%3E%3E%20%2BE%3A%20GetTxs%0A%20%20%20%20%20%20%20%20E%20--%3E%3E%20-R%3A%20txs%0A%20%20%20%20%20%20%20%20loop%20For%20each%20tx%20in%20txs%0A%20%20%20%20%20%20%20%20%20%20%20%20R%20-%3E%3E%20S%3A%20SubmitTransaction%0A%20%20%20%20%20%20%20%20end%0A%20%20%20%20%20%20%20%20R%20-%3E%3E%20%2BS%3A%20GetNextBatch%0A%20%20%20%20%20%20%20%20S%20--%3E%3E%20-R%3A%20batch%2C%20time%0A%20%20%20%20%20%20%20%20R%20-%3E%3E%20%2BE%3A%20ExecuteTxs%0A%20%20%20%20%20%20%20%20E%20--%3E%3E%20-R%3A%20stateRoot%2C%20maxBytes%0A%20%20%20%20%20%20%20%20R%20-%3E%3E%20%2BD%3A%20Submit%0A%20%20%20%20%20%20%20%20D%20--%3E%3E%20-R%3A%20IDs%0A%20%20%20%20%20%20%20%20R%20-%3E%3E%20E%3A%20SetFinal%0A%20%20%20%20end%0A"})]),fallback:i(()=>e[0]||(e[0]=[a(" Loading... ")])),_:1})),e[3]||(e[3]=r("h4",{id:"block-sync-from-p2p-network-or-da",tabindex:"-1"},[a("Block sync from P2P network or DA "),r("a",{class:"header-anchor",href:"#block-sync-from-p2p-network-or-da","aria-label":'Permalink to "Block sync from P2P network or DA"'},"​")],-1)),(t(),o(l,null,{default:i(()=>[h(s,{id:"mermaid-688",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20P%20as%20P2P%20network%20%2F%20DA%0A%20%20%20%20participant%20S%20as%20sequencer%0A%20%20%20%20participant%20R%20as%20Rollkit%0A%20%20%20%20participant%20E%20as%20exec-env%0A%0A%20%20%20%20R%20-%3E%3E%20%2BE%3A%20InitChain%0A%20%20%20%20E%20--%3E%3E%20-R%3A%20stateRoot%2C%20maxBytes%0A%20%20%20%20loop%20Every%20block%20time%0A%20%20%20%20%20%20%20%20P%20-%3E%3E%20R%3A%20next%20batch%0A%20%20%20%20%20%20%20%20R%20-%3E%3E%20%2BS%3A%20VerifyBatch%0A%20%20%20%20%20%20%20%20S%20--%3E%3E%20-R%3A%20success%2C%20error%0A%20%20%20%20%20%20%20%20R%20-%3E%3E%20%2BE%3A%20ExecuteTxs%0A%20%20%20%20%20%20%20%20E%20--%3E%3E%20-R%3A%20stateRoot%2C%20maxBytes%0A%20%20%20%20%20%20%20%20R%20-%3E%3E%20E%3A%20SetFinal%0A%20%20%20%20end%0A"})]),fallback:i(()=>e[1]||(e[1]=[a(" Loading... ")])),_:1})),e[4]||(e[4]=n('<h2 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h2><p>Accepted</p><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><h3 id="positive" tabindex="-1">Positive <a class="header-anchor" href="#positive" aria-label="Permalink to &quot;Positive&quot;">​</a></h3><ol><li>Simplification of rollkit&#39;s logic.</li><li>Better separation of concerns.</li><li>Removal of ABCI dependencies.</li><li>Increased flexibility for different execution environments.</li><li>Cleaner architecture with well-defined boundaries.</li></ol><h3 id="negative" tabindex="-1">Negative <a class="header-anchor" href="#negative" aria-label="Permalink to &quot;Negative&quot;">​</a></h3><ol><li>More difficult deployment (another binary is needed).</li><li>Need to reimplement ABCI execution environment.</li><li>Additional complexity in coordinating between components.</li><li>Potential performance overhead from additional abstraction layer.</li></ol><h3 id="neutral" tabindex="-1">Neutral <a class="header-anchor" href="#neutral" aria-label="Permalink to &quot;Neutral&quot;">​</a></h3><ol><li>Need to introduce new API exposed by rollkit.</li><li>Changes to existing deployment procedures.</li><li>Updates to documentation and tooling required.</li></ol><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://github.com/evstack/ev-node/issues/1802" target="_blank" rel="noreferrer">Rollkit EPIC for Execution API</a></li><li><a href="https://github.com/rollkit/go-execution" target="_blank" rel="noreferrer">go-execution repository</a></li></ul>',11))])}const A=c(u,[["render",k]]);export{y as __pageData,A as default};
