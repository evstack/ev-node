import{_ as o,c as h,ag as i,b as t,w as a,af as l,B as c,o as n,G as r,a as p}from"./chunks/framework.CmpABV1Y.js";const b=JSON.parse('{"title":"ADR 019: Forced Inclusion Mechanism","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"ADR 019: Forced Inclusion Mechanism | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"adr/adr-019-forced-inclusion-mechanism.md","filePath":"adr/adr-019-forced-inclusion-mechanism.md","lastUpdated":1754470767000}'),d={name:"adr/adr-019-forced-inclusion-mechanism.md"};function k(u,s,g,m,E,y){const e=c("Mermaid");return n(),h("div",null,[s[2]||(s[2]=i('<h1 id="adr-019-forced-inclusion-mechanism" tabindex="-1">ADR 019: Forced Inclusion Mechanism <a class="header-anchor" href="#adr-019-forced-inclusion-mechanism" aria-label="Permalink to &quot;ADR 019: Forced Inclusion Mechanism&quot;">​</a></h1><h2 id="changelog" tabindex="-1">Changelog <a class="header-anchor" href="#changelog" aria-label="Permalink to &quot;Changelog&quot;">​</a></h2><ul><li>2025-03-24: Initial draft</li><li>2025-04-23: Renumbered from ADR-018 to ADR-019 to maintain chronological order.</li></ul><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>Evolve currently supports a single sequencer implementation as described in ADR-013. While this approach provides a simple and efficient solution, it introduces a single point of failure that can impact the liveness of the network. If the sequencer goes down or becomes unresponsive, the chain cannot progress.</p><p>To address this limitation and improve the liveness properties of applications built with Evolve, we propose implementing a forced inclusion mechanism. This mechanism will allow transactions to be included directly from the Data Availability (DA) layer when the sequencer is unresponsive, creating an &quot;unstoppable&quot; property for Evolve-based chains.</p><p>This enhancement aligns with the requirements defined in the <a href="https://forum.l2beat.com/t/the-stages-framework/291#p-516-stage-1-requirements-3" target="_blank" rel="noreferrer">L2 Beat framework</a> for Stage 1 L2s, advancing Evolve&#39;s capabilities as a robust sequencer library.</p><h2 id="alternative-approaches" tabindex="-1">Alternative Approaches <a class="header-anchor" href="#alternative-approaches" aria-label="Permalink to &quot;Alternative Approaches&quot;">​</a></h2><h3 id="decentralized-sequencer" tabindex="-1">Decentralized Sequencer <a class="header-anchor" href="#decentralized-sequencer" aria-label="Permalink to &quot;Decentralized Sequencer&quot;">​</a></h3><p>A fully decentralized sequencer could solve the liveness issue by distributing sequencing responsibilities across multiple nodes. However, this approach introduces significant complexity in terms of consensus, leader election, and coordination between nodes. It would require substantial development effort and resources, making it less suitable as an immediate solution.</p><h3 id="automatic-sequencer-failover" tabindex="-1">Automatic Sequencer Failover <a class="header-anchor" href="#automatic-sequencer-failover" aria-label="Permalink to &quot;Automatic Sequencer Failover&quot;">​</a></h3><p>Another approach would be to implement an automatic failover mechanism where backup sequencers take over when the primary sequencer fails. While simpler than a fully decentralized solution, this approach still requires managing multiple sequencers and introduces complexity in coordination and state transfer between them.</p><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><p>We will implement a forced inclusion mechanism for the Evolve single sequencer architecture that uses a time-based inclusion delay approach. This approach will:</p><ol><li>Track when transactions are first seen in terms of DA block time</li><li>Require a minimum number of DA blocks to pass before including a direct transaction</li><li>Let full nodes enforce inclusion within a fixed period of time window</li></ol><p>The mechanism will be designed to maintain backward compatibility with existing Evolve deployments while providing enhanced liveness guarantees.</p><h3 id="high-level-architecture" tabindex="-1">High-Level Architecture <a class="header-anchor" href="#high-level-architecture" aria-label="Permalink to &quot;High-Level Architecture&quot;">​</a></h3><p>The following diagram illustrates the high-level architecture of the forced inclusion mechanism:</p>',18)),(n(),t(l,null,{default:a(()=>[r(e,{id:"mermaid-77",class:"mermaid",graph:"flowchart%20TB%0A%20%20%20%20subgraph%20DAL%5B%22Data%20Availability%20Layer%22%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20SEQ%5B%22Single%20Sequencer%22%5D%0A%20%20%20%20%20%20%20%20subgraph%20NO%5B%22Normal%20Operation%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20direction%20TB%0A%20%20%20%20%20%20%20%20%20%20%20%20process%5B%22Process%20user%20txs%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20create%5B%22Create%20batches%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20include%5B%22Include%20direct%20txs%20from%20DA%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20checkDelay%5B%22Check%20MinDADelay%22%5D%0A%20%20%20%20%20%20%20%20end%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20FN%5B%22Full%20Nodes%22%5D%0A%20%20%20%20%20%20%20%20subgraph%20NormalOp%5B%22Normal%20Operation%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20follow%5B%22Follow%20sequencer%20produced%20blocks%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20validate%5B%22Validate%20time%20windows%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20validateDelay%5B%22Validate%20MinDADelay%22%5D%0A%20%20%20%20%20%20%20%20end%0A%0A%20%20%20%20%20%20%20%20subgraph%20FallbackMode%5B%22Fallback%20Mode%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20detect%5B%22Detect%20sequencer%20down%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20scan%5B%22Scan%20DA%20for%20direct%20txs%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20createBlocks%5B%22Create%20deterministic%20blocks%20from%20direct%20txs%22%5D%0A%20%20%20%20%20%20%20%20end%0A%20%20%20%20end%0A%0A%20%20%20%20SEQ%20--%3E%7C%22Publish%20Batches%22%7C%20DAL%0A%20%20%20%20DAL%20--%3E%7C%22Direct%20Txs%22%7C%20SEQ%0A%20%20%20%20DAL%20--%3E%7C%22Direct%20Txs%22%7C%20FN%0A%20%20%20%20SEQ%20--%3E%7C%22Blocks%22%7C%20FN%0A%20%20%20%20NormalOp%20%3C--%3E%20FallbackMode%0A"})]),fallback:a(()=>s[0]||(s[0]=[p(" Loading... ")])),_:1})),s[3]||(s[3]=i(`<h2 id="detailed-design" tabindex="-1">Detailed Design <a class="header-anchor" href="#detailed-design" aria-label="Permalink to &quot;Detailed Design&quot;">​</a></h2><h3 id="user-requirements" tabindex="-1">User Requirements <a class="header-anchor" href="#user-requirements" aria-label="Permalink to &quot;User Requirements&quot;">​</a></h3><ul><li>Developers need a mechanism to ensure their chains can progress even when the single sequencer is unavailable</li><li>The system should maintain a deterministic and consistent state regardless of sequencer availability</li><li>The transition between sequencer-led and forced inclusion modes should be seamless</li><li>Transactions must be included within a fixed time window from when they are first seen</li><li>Direct transactions must wait for a minimum number of DA blocks before inclusion</li></ul><h3 id="systems-affected" tabindex="-1">Systems Affected <a class="header-anchor" href="#systems-affected" aria-label="Permalink to &quot;Systems Affected&quot;">​</a></h3><p>The implementation of the forced inclusion mechanism will affect several components of the Evolve framework:</p><ol><li><strong>Single Sequencer</strong>: Must be modified to track and include direct transactions from the DA layer within the time window and after minimum DA block delay</li><li><strong>Full Node</strong>: Must be updated to recognize and validate blocks with forced inclusions</li><li><strong>Block Processing Logic</strong>: Must implement the modified fork choice rule</li><li><strong>DA Client</strong>: Must be enhanced to scan for direct transactions</li><li><strong>Transaction Validation</strong>: Must validate both sequencer-batched and direct transactions</li></ol><h3 id="data-structures" tabindex="-1">Data Structures <a class="header-anchor" href="#data-structures" aria-label="Permalink to &quot;Data Structures&quot;">​</a></h3><h4 id="direct-transaction-tracking" tabindex="-1">Direct Transaction Tracking <a class="header-anchor" href="#direct-transaction-tracking" aria-label="Permalink to &quot;Direct Transaction Tracking&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ForcedInclusionConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MaxInclusionDelay </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Max inclusion time in DA block time units</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MinDADelay       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Minimum number of DA blocks before including a direct tx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DirectTransaction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TxHash          </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">common</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FirstSeenAt     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // DA block time when the tx was seen</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Included        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Whether it has been included in a block</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    IncludedAt      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Height at which it was included</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DirectTxTracker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    txs             </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">common</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DirectTransaction</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Map of direct transactions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mu              </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RWMutex</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                       // Mutex for thread-safe access</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    latestSeenTime  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            // Latest DA block time scanned</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    latestDAHeight  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            // Latest DA block height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="sequencer-status-tracking" tabindex="-1">Sequencer Status Tracking <a class="header-anchor" href="#sequencer-status-tracking" aria-label="Permalink to &quot;Sequencer Status Tracking&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SequencerStatus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    IsActive          </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Whether the sequencer is considered active</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LastActiveTime    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Last DA block time where sequencer posted a batch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    InactiveTime      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Time since last sequencer activity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="apis-and-interfaces" tabindex="-1">APIs and Interfaces <a class="header-anchor" href="#apis-and-interfaces" aria-label="Permalink to &quot;APIs and Interfaces&quot;">​</a></h3><h4 id="enhanced-da-client-interface" tabindex="-1">Enhanced DA Client Interface <a class="header-anchor" href="#enhanced-da-client-interface" aria-label="Permalink to &quot;Enhanced DA Client Interface&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DAClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Existing methods</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // New method for forced inclusion</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    GetDirectTransactions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fromTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">toTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ([][]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Note: SubmitDirectTransaction is removed as it&#39;s not a responsibility of the node</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="sequencer-interface-extensions" tabindex="-1">Sequencer Interface Extensions <a class="header-anchor" href="#sequencer-interface-extensions" aria-label="Permalink to &quot;Sequencer Interface Extensions&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// New methods added to the Sequencer interface</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sequencer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ScanDALayerForDirectTxs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sequencer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IncludeDirectTransactions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">batch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Batch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span></span></code></pre></div><h4 id="full-node-interface-extensions" tabindex="-1">Full Node Interface Extensions <a class="header-anchor" href="#full-node-interface-extensions" aria-label="Permalink to &quot;Full Node Interface Extensions&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// New methods added to the Node interface</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CheckSequencerStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProcessDirectTransactions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ValidateBlockTimeWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">block</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span></span></code></pre></div><h3 id="implementation-changes" tabindex="-1">Implementation Changes <a class="header-anchor" href="#implementation-changes" aria-label="Permalink to &quot;Implementation Changes&quot;">​</a></h3><h4 id="single-sequencer-node-changes" tabindex="-1">Single Sequencer Node Changes <a class="header-anchor" href="#single-sequencer-node-changes" aria-label="Permalink to &quot;Single Sequencer Node Changes&quot;">​</a></h4><ol><li><p><strong>DA Layer Scanner</strong>:</p><ul><li>Implement a periodic scanner that queries the DA layer for direct transactions</li><li>Track all direct transactions in the DirectTxTracker data structure</li><li>Update the latest seen DA block time and height after each scan</li></ul></li><li><p><strong>Transaction Inclusion Logic</strong>:</p><ul><li>Modify the batch creation process to include direct transactions from the DA layer</li><li>Ensure all direct transactions are included within the MaxInclusionDelay time window</li><li>Check that transactions have waited for MinDADelay DA blocks</li><li>Track transaction inclusion times and enforce both delay constraints</li></ul></li><li><p><strong>Validation Rules</strong>:</p><ul><li>Implement time window validation to ensure transactions are included within MaxInclusionDelay</li><li>Implement DA block delay validation to ensure transactions wait for MinDADelay blocks</li><li>Track both time-based and DA block-based delays for each transaction</li></ul></li><li><p><strong>Recovery Mechanism</strong>:</p><ul><li>Add logic to detect when the sequencer comes back online after downtime</li><li>Implement state synchronization to catch up with any forced inclusions that occurred during downtime</li><li>Resume normal operation by building on top of the canonical chain tip</li></ul></li></ol><h4 id="sequencer-operation-flow" tabindex="-1">Sequencer Operation Flow <a class="header-anchor" href="#sequencer-operation-flow" aria-label="Permalink to &quot;Sequencer Operation Flow&quot;">​</a></h4><p>The following diagram illustrates the operation flow for the sequencer with forced inclusion:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────────────────────────────────────────────────────────────────────────┐</span></span>
<span class="line"><span>│                           Sequencer Operation Flow                              │</span></span>
<span class="line"><span>└─────────────────┬───────────────────────────────────────────────────────────────┘</span></span>
<span class="line"><span>                  │</span></span>
<span class="line"><span>                  ▼</span></span>
<span class="line"><span>┌─────────────────────────────────┐      ┌────────────────────────────────────────┐</span></span>
<span class="line"><span>│ 1. Process User Transactions    │      │ 2. Periodic DA Layer Scanning          │</span></span>
<span class="line"><span>│                                 │      │                                        │</span></span>
<span class="line"><span>│ - Accept transactions from users│      │ - Query DA layer for direct txs        │</span></span>
<span class="line"><span>│ - Validate and queue txs        │      │ - Update DirectTxTracker               │</span></span>
<span class="line"><span>│ - Process queue based on policy │      │ - Track latest seen DA block time      │</span></span>
<span class="line"><span>└─────────────────┬───────────────┘      └────────────────────┬───────────────────┘</span></span>
<span class="line"><span>                  │                                           │</span></span>
<span class="line"><span>                  ▼                                           ▼</span></span>
<span class="line"><span>┌─────────────────────────────────┐      ┌────────────────────────────────────────┐</span></span>
<span class="line"><span>│ 3. Batch Creation               │      │ 4. Direct Transaction Inclusion        │</span></span>
<span class="line"><span>│                                 │      │                                        │</span></span>
<span class="line"><span>│ - Create batch of txs           │◄─────┤ - Include unprocessed direct txs       │</span></span>
<span class="line"><span>│ - Apply ordering policy         │      │ - Prioritize by first seen             │</span></span>
<span class="line"><span>│ - Calculate batch metadata      │      │ - Mark included txs as processed       │</span></span>
<span class="line"><span>└─────────────────┬───────────────┘      └────────────────────────────────────────┘</span></span>
<span class="line"><span>                  │</span></span>
<span class="line"><span>                  ▼</span></span>
<span class="line"><span>┌──────────────────────────────────┐      ┌────────────────────────────────────────┐</span></span>
<span class="line"><span>│ 5. Time Window Validation        │      │ 6. Block Production                    │</span></span>
<span class="line"><span>│                                  │      │                                        │</span></span>
<span class="line"><span>│ - Check transaction timestamps   │      │ - Create block with batch       │</span></span>
<span class="line"><span>│ - Ensure within MaxInclusionDelay│─────►│ - Sign and publish block               │</span></span>
<span class="line"><span>│ - Track inclusion times          │      │                                        │</span></span>
<span class="line"><span>└──────────────────────────────────┘      └─────────────────┬──────────────────────┘</span></span>
<span class="line"><span>                                                            │</span></span>
<span class="line"><span>                                                            ▼</span></span>
<span class="line"><span>                                          ┌────────────────────────────────────────┐</span></span>
<span class="line"><span>                                          │ 7. DA Batch Submission                 │</span></span>
<span class="line"><span>                                          │                                        │</span></span>
<span class="line"><span>                                          │ - Submit batch to DA layer             │</span></span>
<span class="line"><span>                                          │ - Track submission status              │</span></span>
<span class="line"><span>                                          │ - Handle retry on failure              │</span></span>
<span class="line"><span>                                          └────────────────────────────────────────┘</span></span></code></pre></div><h4 id="full-node-operation-flow" tabindex="-1">Full Node Operation Flow <a class="header-anchor" href="#full-node-operation-flow" aria-label="Permalink to &quot;Full Node Operation Flow&quot;">​</a></h4><p>The following diagram illustrates the operation flow for full nodes with forced inclusion support:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────────────────────────────────────────────────────────────────────────┐</span></span>
<span class="line"><span>│                           Full Node Operation Flow                              │</span></span>
<span class="line"><span>└─────────────────────────────────────────────────────────────────────────────────┘</span></span>
<span class="line"><span>                                        │</span></span>
<span class="line"><span>                                        ▼</span></span>
<span class="line"><span>┌─────────────────────────────────┐     ┌────────────────────────────────────────┐</span></span>
<span class="line"><span>│ 1. Normal Operation Mode        │     │ 2. Sequencer Status Monitoring         │</span></span>
<span class="line"><span>│                                 │     │                                        │</span></span>
<span class="line"><span>│ - Receive blocks from sequencer │     │ - Monitor sequencer activity on DA     │</span></span>
<span class="line"><span>│ - Validate time windows         │◄───►│ - Track time since last sequencer batch│</span></span>
<span class="line"><span>│ - Apply state transitions       │     │ - Check against downtime threshold     │</span></span>
<span class="line"><span>└─────────────────────────────────┘     └───────────────────┬────────────────────┘</span></span>
<span class="line"><span>                                                            │</span></span>
<span class="line"><span>                                                            ▼</span></span>
<span class="line"><span>                                        ┌────────────────────────────────────────┐</span></span>
<span class="line"><span>                                        │ Is Sequencer Down?                     │</span></span>
<span class="line"><span>                                        │ (Based on configurable threshold)      │</span></span>
<span class="line"><span>                                        └───────────┬───────────────┬────────────┘</span></span>
<span class="line"><span>                                                    │               │</span></span>
<span class="line"><span>                                                    │ Yes           │ No</span></span>
<span class="line"><span>                                                    ▼               │</span></span>
<span class="line"><span>                                        ┌────────────────────────┐  │</span></span>
<span class="line"><span>                                        │ 3. Enter Fallback Mode │  │</span></span>
<span class="line"><span>                                        │                        │  │</span></span>
<span class="line"><span>                                        │ - Switch to direct tx  │  │</span></span>
<span class="line"><span>                                        │   processing           │  │</span></span>
<span class="line"><span>                                        │ - Notify subsystems    │  │</span></span>
<span class="line"><span>                                        └──────────┬─────────────┘  │</span></span>
<span class="line"><span>                                                  │                 │</span></span>
<span class="line"><span>                                                  ▼                 │</span></span>
<span class="line"><span>                                        ┌────────────────────────┐  │</span></span>
<span class="line"><span>                                        │ 4. DA Layer Scanning   │  │</span></span>
<span class="line"><span>                                        │                        │  │</span></span>
<span class="line"><span>                                        │ - Scan DA for direct   │  │</span></span>
<span class="line"><span>                                        │   transactions         │  │</span></span>
<span class="line"><span>                                        │ - Track latest seen    │  │</span></span>
<span class="line"><span>                                        │   DA block time        │  │</span></span>
<span class="line"><span>                                        └──────────┬─────────────┘  │</span></span>
<span class="line"><span>                                                   │                │</span></span>
<span class="line"><span>                                                   ▼                │</span></span>
<span class="line"><span>                                        ┌────────────────────────┐  │</span></span>
<span class="line"><span>                                        │ 5. Deterministic Block │  │</span></span>
<span class="line"><span>                                        │    Creation            │  │</span></span>
<span class="line"><span>                                        │                        │  │</span></span>
<span class="line"><span>                                        │ - Create blocks with   │  │</span></span>
<span class="line"><span>                                        │   direct txs only      │  │</span></span>
<span class="line"><span>                                        │ - Apply deterministic  │  │</span></span>
<span class="line"><span>                                        │   ordering rules       │  │</span></span>
<span class="line"><span>                                        └──────────┬─────────────┘  │</span></span>
<span class="line"><span>                                                   │                │</span></span>
<span class="line"><span>                                                   ▼                ▼</span></span>
<span class="line"><span>┌─────────────────────────────────────────────────────────────────────────────────┐</span></span>
<span class="line"><span>│ 6. Block Processing and State Update                                            │</span></span>
<span class="line"><span>│                                                                                 │</span></span>
<span class="line"><span>│ - Execute transactions                                                          │</span></span>
<span class="line"><span>│ - Update state                                                                  │</span></span>
<span class="line"><span>│ - Persist blocks and state                                                      │</span></span>
<span class="line"><span>└─────────────────────────────────────────────────────────────────────────────────┘</span></span></code></pre></div><h3 id="fallback-mode-transition" tabindex="-1">Fallback Mode Transition <a class="header-anchor" href="#fallback-mode-transition" aria-label="Permalink to &quot;Fallback Mode Transition&quot;">​</a></h3><p>The following diagram illustrates the transition between normal operation and fallback mode:</p>`,29)),(n(),t(l,null,{default:a(()=>[r(e,{id:"mermaid-291",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20DA%20as%20Data%20Availability%20Layer%0A%20%20%20%20participant%20S%20as%20Sequencer%0A%20%20%20%20participant%20R%20as%20Chain%0A%0A%20%20%20%20Note%20over%20S%2CR%3A%20Normal%20Operation%0A%20%20%20%20DA-%3E%3ES%3A%20DA%20Block%20N%0A%20%20%20%20S-%3E%3ER%3A%20Sequencer%20Block%20N%0A%20%20%20%20DA-%3E%3ES%3A%20DA%20Block%20N%2B1%0A%20%20%20%20S-%3E%3ER%3A%20Sequencer%20Block%20N%2B1%0A%20%20%20%20DA-%3E%3ES%3A%20DA%20Block%20N%2B2%0A%20%20%20%20S-%3E%3ER%3A%20Sequencer%20Block%20N%2B2%0A%0A%20%20%20%20Note%20over%20S%2CR%3A%20Sequencer%20Down%0A%20%20%20%20DA-%3E%3ER%3A%20DA%20Block%20N%2B3%20(Direct%20Txs)%0A%20%20%20%20Note%20over%20R%3A%20Fallback%20Mode%20Start%0A%20%20%20%20R-%3E%3ER%3A%20Create%20Block%20from%20Direct%20Txs%0A%20%20%20%20DA-%3E%3ER%3A%20DA%20Block%20N%2B4%20(Direct%20Txs)%0A%20%20%20%20R-%3E%3ER%3A%20Create%20Block%20from%20Direct%20Txs%0A%20%20%20%20DA-%3E%3ER%3A%20DA%20Block%20N%2B5%20(Direct%20Txs)%0A%20%20%20%20R-%3E%3ER%3A%20Create%20Block%20from%20Direct%20Txs%0A%0A%20%20%20%20Note%20over%20S%2CR%3A%20Sequencer%20Back%20Online%0A%20%20%20%20DA-%3E%3ES%3A%20DA%20Block%20N%2B6%0A%20%20%20%20S-%3E%3ER%3A%20Sequencer%20Block%20N%2B6%0A%20%20%20%20DA-%3E%3ES%3A%20DA%20Block%20N%2B7%0A%20%20%20%20S-%3E%3ER%3A%20Sequencer%20Block%20N%2B7%0A%0A%20%20%20%20Note%20over%20R%3A%20Timeline%20shows%3A%0A%20%20%20%20Note%20over%20R%3A%201.%20Normal%20sequencer%20operation%0A%20%20%20%20Note%20over%20R%3A%202.%20Sequencer%20downtime%20%26%20fallback%0A%20%20%20%20Note%20over%20R%3A%203.%20Sequencer%20recovery%0A"})]),fallback:a(()=>s[1]||(s[1]=[p(" Loading... ")])),_:1})),s[4]||(s[4]=i(`<h3 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h3><p>The forced inclusion mechanism will be configurable with the following parameters:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ForcedInclusionConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Enabled                   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Whether forced inclusion is enabled</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MaxInclusionDelay         </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Maximum time window for transaction inclusion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SequencerDownTime         </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Time after which the sequencer is considered down</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MinDADelay               </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Minimum number of DA blocks before including a direct tx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="efficiency-considerations" tabindex="-1">Efficiency Considerations <a class="header-anchor" href="#efficiency-considerations" aria-label="Permalink to &quot;Efficiency Considerations&quot;">​</a></h3><ul><li>DA layer scanning is integrated into the core block processing pipeline for continuous monitoring</li><li>Direct transactions are indexed by hash for quick lookups</li><li>The sequencer status is tracked by DA block time rather than block heights</li><li>Time-based tracking simplifies the implementation and reduces overhead</li><li>DA block height tracking adds minimal overhead to existing block processing</li></ul><h3 id="security-considerations" tabindex="-1">Security Considerations <a class="header-anchor" href="#security-considerations" aria-label="Permalink to &quot;Security Considerations&quot;">​</a></h3><ul><li>The mechanism ensures that only valid direct transactions can be included in the chain</li><li>Time window validation prevents delayed inclusion of transactions</li><li>The configurable time threshold prevents premature switching to fallback mode due to temporary sequencer issues</li><li>All transactions, whether sequencer-batched or direct, undergo the same validation rules</li><li>MinDADelay provides protection against DA layer censorship by requiring multiple block proposers to collude</li><li>Block-based delay prevents single block proposer censorship by ensuring transactions must be visible across multiple DA layer blocks</li><li>The delay mechanism is inspired by the &quot;Based Sequencing with Soft Confirmations&quot; design from <a href="https://github.com/Sovereign-Labs/sovereign-sdk/issues/408" target="_blank" rel="noreferrer">Sovereign SDK #408</a>, which uses deferred execution to prevent DA layer block proposers from censoring transactions</li></ul><h3 id="privacy-considerations" tabindex="-1">Privacy Considerations <a class="header-anchor" href="#privacy-considerations" aria-label="Permalink to &quot;Privacy Considerations&quot;">​</a></h3><ul><li>Direct transactions posted to the DA layer are publicly visible, just like sequencer-batched transactions</li><li>No additional privacy concerns are introduced beyond the existing model</li></ul><h3 id="testing-strategy" tabindex="-1">Testing Strategy <a class="header-anchor" href="#testing-strategy" aria-label="Permalink to &quot;Testing Strategy&quot;">​</a></h3><ol><li><p><strong>Unit Tests</strong>:</p><ul><li>Test individual components of the forced inclusion mechanism</li><li>Verify time window validation logic</li><li>Test the DA scanner functionality</li><li>Test transaction inclusion timing constraints</li><li>Test MinDADelay validation</li></ul></li><li><p><strong>Integration Tests</strong>:</p><ul><li>Test the interaction between the sequencer and the DA layer</li><li>Verify correct inclusion of direct transactions within time windows</li><li>Test DA block delay validation</li><li>Verify both time and block delay constraints</li></ul></li><li><p><strong>End-to-End Tests</strong>:</p><ul><li>Simulate sequencer downtime and verify chain progression</li><li>Test the transition between normal and fallback modes</li><li>Verify the sequencer&#39;s recovery process after downtime</li><li>Test transaction inclusion with various delay configurations</li></ul></li><li><p><strong>Performance Testing</strong>:</p><ul><li>Measure the overhead introduced by the DA scanner</li><li>Benchmark the system&#39;s performance in fallback mode</li><li>Evaluate the impact of time-based tracking</li><li>Measure the performance impact of DA block delay validation</li></ul></li></ol><h3 id="breaking-changes" tabindex="-1">Breaking Changes <a class="header-anchor" href="#breaking-changes" aria-label="Permalink to &quot;Breaking Changes&quot;">​</a></h3><p>This enhancement introduces no breaking changes to the existing API or data structures. It extends the current functionality by implementing time-based transaction tracking and inclusion rules, along with DA block-based delay validation, without modifying the core interfaces that developers interact with.</p><h2 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h2><p>Proposed</p><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><h3 id="positive" tabindex="-1">Positive <a class="header-anchor" href="#positive" aria-label="Permalink to &quot;Positive&quot;">​</a></h3><ul><li>Improves the liveness guarantees of Evolve-based chains</li><li>Provides a path for Evolve to meet Stage 1 L2 requirements per the L2 Beat framework</li><li>Creates an &quot;unstoppable&quot; property for applications, enhancing their reliability</li><li>Maintains a deterministic chain state regardless of sequencer availability</li><li>More predictable deadlines in DA time</li><li>Easier to reason about for users and developers</li><li>Prevents DA layer censorship by requiring multiple block proposers to collude</li></ul><h3 id="negative" tabindex="-1">Negative <a class="header-anchor" href="#negative" aria-label="Permalink to &quot;Negative&quot;">​</a></h3><ul><li>Adds complexity to the block processing and validation logic</li><li>Introduces overhead from scanning the DA layer for direct transactions</li><li>Could potentially slow block production during fallback mode</li><li>May need careful tuning of time window parameters</li><li>Could be affected by variations in block production rate</li><li>Additional complexity from tracking DA block heights for delay validation</li></ul><h3 id="neutral" tabindex="-1">Neutral <a class="header-anchor" href="#neutral" aria-label="Permalink to &quot;Neutral&quot;">​</a></h3><ul><li>Requires application developers to consider both sequencer-batched and direct transaction flows</li><li>Introduces configuration options that developers need to understand and set appropriately</li><li>Changes the mental model of how the chain progresses, from purely sequencer-driven to a hybrid approach</li><li>Users will need to use external tools or services to submit direct transactions to the DA layer during sequencer downtime</li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://github.com/evstack/ev-node/blob/main/docs/adr/adr-013-single-sequencer.md" target="_blank" rel="noreferrer">Evolve Single Sequencer ADR-013</a></li><li><a href="https://github.com/evstack/ev-node/blob/main/docs/adr/adr-015-rollkit-minimal-header.md" target="_blank" rel="noreferrer">Evolve Minimal Header ADR-015</a></li><li><a href="https://forum.l2beat.com/t/the-stages-framework/291#p-516-stage-1-requirements-3" target="_blank" rel="noreferrer">L2 Beat Stages Framework</a></li><li><a href="https://github.com/evstack/ev-node/issues/1914" target="_blank" rel="noreferrer">GitHub Issue #1914: Add Forced Inclusion Mechanism from the DA layer</a></li></ul>`,24))])}const f=o(d,[["render",k]]);export{b as __pageData,f as default};
