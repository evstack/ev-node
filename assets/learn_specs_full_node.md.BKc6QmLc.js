import{_ as a,c as t,ag as o,o as n}from"./chunks/framework.CmpABV1Y.js";const m=JSON.parse('{"title":"Full Node","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Full Node | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"learn/specs/full_node.md","filePath":"learn/specs/full_node.md","lastUpdated":1758264421000}'),r={name:"learn/specs/full_node.md"};function i(s,e,l,c,d,h){return n(),t("div",null,e[0]||(e[0]=[o('<h1 id="full-node" tabindex="-1">Full Node <a class="header-anchor" href="#full-node" aria-label="Permalink to &quot;Full Node&quot;">​</a></h1><h2 id="abstract" tabindex="-1">Abstract <a class="header-anchor" href="#abstract" aria-label="Permalink to &quot;Abstract&quot;">​</a></h2><p>A Full Node is a top-level service that encapsulates different components of Evolve and initializes/manages them.</p><h2 id="details" tabindex="-1">Details <a class="header-anchor" href="#details" aria-label="Permalink to &quot;Details&quot;">​</a></h2><h3 id="full-node-details" tabindex="-1">Full Node Details <a class="header-anchor" href="#full-node-details" aria-label="Permalink to &quot;Full Node Details&quot;">​</a></h3><p>A Full Node is initialized inside the Cosmos SDK start script along with the node configuration, a private key to use in the P2P client, a private key for signing blocks as a block proposer, a client creator, a genesis document, and a logger. It uses them to initialize the components described above. The components TxIndexer, BlockIndexer, and IndexerService exist to ensure cometBFT compatibility since they are needed for most of the RPC calls from the <code>SignClient</code> interface from cometBFT.</p><p>Note that unlike a light node which only syncs and stores block headers seen on the P2P layer, the full node also syncs and stores full blocks seen on both the P2P network and the DA layer. Full blocks contain all the transactions published as part of the block.</p><p>The Full Node mainly encapsulates and initializes/manages the following components:</p><h3 id="genesisdoc" tabindex="-1">genesisDoc <a class="header-anchor" href="#genesisdoc" aria-label="Permalink to &quot;genesisDoc&quot;">​</a></h3><p>The <a href="https://github.com/cometbft/cometbft/blob/main/spec/core/genesis.md" target="_blank" rel="noreferrer">genesis</a> document contains information about the initial state of the chain, in particular its validator set.</p><h3 id="conf" tabindex="-1">conf <a class="header-anchor" href="#conf" aria-label="Permalink to &quot;conf&quot;">​</a></h3><p>The <a href="https://github.com/evstack/ev-node/blob/main/pkg/config/config.go" target="_blank" rel="noreferrer">node configuration</a> contains all the necessary settings for the node to be initialized and function properly.</p><h3 id="p2p" tabindex="-1">P2P <a class="header-anchor" href="#p2p" aria-label="Permalink to &quot;P2P&quot;">​</a></h3><p>The <a href="https://github.com/evstack/ev-node/blob/main/pkg/p2p/client.go" target="_blank" rel="noreferrer">peer-to-peer client</a> is used to gossip transactions between full nodes in the network.</p><h3 id="store" tabindex="-1">Store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;Store&quot;">​</a></h3><p>The <a href="https://github.com/evstack/ev-node/blob/main/pkg/store/store.go" target="_blank" rel="noreferrer">Store</a> is initialized with <code>DefaultStore</code>, an implementation of the <a href="https://github.com/evstack/ev-node/blob/main/pkg/store/types.go" target="_blank" rel="noreferrer">store interface</a> which is used for storing and retrieving blocks, commits, and state. |</p><h3 id="blockcomponents" tabindex="-1">blockComponents <a class="header-anchor" href="#blockcomponents" aria-label="Permalink to &quot;blockComponents&quot;">​</a></h3><p>The <a href="https://github.com/evstack/ev-node/blob/main/block/components.go" target="_blank" rel="noreferrer">Block Components</a> provide a modular architecture for managing block-related operations. Instead of a single monolithic manager, the system uses specialized components:</p><p><strong>For Aggregator Nodes:</strong></p><ul><li><strong>Executor</strong>: Block production (normal and lazy modes) and state transitions</li><li><strong>Reaper</strong>: Transaction collection and submission to sequencer</li><li><strong>Submitter</strong>: Header and data submission to DA layer</li><li><strong>Syncer</strong>: Block retrieval and synchronization from DA and P2P</li><li><strong>Cache Manager</strong>: Coordination and tracking across all components</li></ul><p><strong>For Non-Aggregator Nodes:</strong></p><ul><li><strong>Syncer</strong>: Block retrieval and synchronization from DA and P2P</li><li><strong>Cache Manager</strong>: Tracking and caching of synchronized blocks</li></ul><p>This modular architecture implements header/data separation where headers and transaction data are handled independently by different components.</p><h3 id="dalc" tabindex="-1">dalc <a class="header-anchor" href="#dalc" aria-label="Permalink to &quot;dalc&quot;">​</a></h3><p>The <a href="https://github.com/evstack/ev-node/blob/main/core/da/da.go" target="_blank" rel="noreferrer">Data Availability Layer Client</a> is used to interact with the data availability layer. It is initialized with the DA Layer and DA Config specified in the node configuration.</p><h3 id="hsyncservice" tabindex="-1">hSyncService <a class="header-anchor" href="#hsyncservice" aria-label="Permalink to &quot;hSyncService&quot;">​</a></h3><p>The <a href="https://github.com/evstack/ev-node/blob/main/pkg/sync/sync_service.go" target="_blank" rel="noreferrer">Header Sync Service</a> is used for syncing signed headers between nodes over P2P. It operates independently from data sync to support light clients.</p><h3 id="dsyncservice" tabindex="-1">dSyncService <a class="header-anchor" href="#dsyncservice" aria-label="Permalink to &quot;dSyncService&quot;">​</a></h3><p>The <a href="https://github.com/evstack/ev-node/blob/main/pkg/sync/sync_service.go" target="_blank" rel="noreferrer">Data Sync Service</a> is used for syncing transaction data between nodes over P2P. This service is only used by full nodes, not light nodes.</p><h2 id="message-structure-communication-format" tabindex="-1">Message Structure/Communication Format <a class="header-anchor" href="#message-structure-communication-format" aria-label="Permalink to &quot;Message Structure/Communication Format&quot;">​</a></h2><p>The Full Node communicates with other nodes in the network using the P2P client. It also communicates with the application using the ABCI proxy connections. The communication format is based on the P2P and ABCI protocols.</p><h2 id="assumptions-and-considerations" tabindex="-1">Assumptions and Considerations <a class="header-anchor" href="#assumptions-and-considerations" aria-label="Permalink to &quot;Assumptions and Considerations&quot;">​</a></h2><p>The Full Node assumes that the configuration, private keys, client creator, genesis document, and logger are correctly passed in by the Cosmos SDK. It also assumes that the P2P client, data availability layer client, block components, and other services can be started and stopped without errors.</p><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><p>See <a href="https://github.com/evstack/ev-node/blob/main/node/full.go" target="_blank" rel="noreferrer">full node</a></p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><p>[1] <a href="https://github.com/evstack/ev-node/blob/main/node/full.go" target="_blank" rel="noreferrer">Full Node</a></p><p>[2] <a href="https://github.com/cometbft/cometbft/blob/main/spec/core/genesis.md" target="_blank" rel="noreferrer">Genesis Document</a></p><p>[3] <a href="https://github.com/evstack/ev-node/blob/main/pkg/config/config.go" target="_blank" rel="noreferrer">Node Configuration</a></p><p>[4] <a href="https://github.com/evstack/ev-node/blob/main/pkg/p2p/client.go" target="_blank" rel="noreferrer">Peer to Peer Client</a></p><p>[5] <a href="https://github.com/evstack/ev-node/blob/main/pkg/store/store.go" target="_blank" rel="noreferrer">Store</a></p><p>[6] <a href="https://github.com/evstack/ev-node/blob/main/pkg/store/types.go" target="_blank" rel="noreferrer">Store Interface</a></p><p>[7] <a href="https://github.com/evstack/ev-node/blob/main/block/components.go" target="_blank" rel="noreferrer">Block Components</a></p><p>[8] <a href="https://github.com/evstack/ev-node/blob/main/core/da/da.go" target="_blank" rel="noreferrer">Data Availability Layer Client</a></p><p>[9] <a href="https://github.com/evstack/ev-node/blob/main/pkg/sync/sync_service.go" target="_blank" rel="noreferrer">Header Sync Service</a></p><p>[10] <a href="https://github.com/evstack/ev-node/blob/main/pkg/sync/sync_service.go" target="_blank" rel="noreferrer">Data Sync Service</a></p>',46)]))}const b=a(r,[["render",i]]);export{m as __pageData,b as default};
