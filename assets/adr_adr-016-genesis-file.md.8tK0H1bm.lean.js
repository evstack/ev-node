import{_ as i,c as t,ag as a,o}from"./chunks/framework.CmpABV1Y.js";const f=JSON.parse('{"title":"ADR 016: Genesis File","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"ADR 016: Genesis File | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"adr/adr-016-genesis-file.md","filePath":"adr/adr-016-genesis-file.md","lastUpdated":1758264421000}'),n={name:"adr/adr-016-genesis-file.md"};function s(l,e,r,d,c,h){return o(),t("div",null,e[0]||(e[0]=[a('<h1 id="adr-016-genesis-file" tabindex="-1">ADR 016: Genesis File <a class="header-anchor" href="#adr-016-genesis-file" aria-label="Permalink to &quot;ADR 016: Genesis File&quot;">​</a></h1><h2 id="changelog" tabindex="-1">Changelog <a class="header-anchor" href="#changelog" aria-label="Permalink to &quot;Changelog&quot;">​</a></h2><ul><li>2025-03-21: Initial draft</li></ul><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>Rollkit currently uses a simple genesis state structure (<code>RollkitGenesis</code>) that is embedded within the block manager code. This structure defines the initial state of a Rollkit chain but lacks a formal specification and a standardized file format.</p><p>Currently, the genesis information is passed directly to the <code>NewManager</code> function as a parameter, without a clear process for how this information should be serialized, validated, or shared between nodes. This creates challenges for initializing new chains and ensuring all nodes start from the same state.</p><p>The current <code>RollkitGenesis</code> structure contains basic fields like <code>GenesisTime</code>, <code>InitialHeight</code>, <code>ChainID</code>, and <code>ProposerAddress</code>. This structure is used to initialize the chain state when no existing state is found in the store.</p><p>When a full node is created, a <code>RollkitGenesis</code> instance is populated from a CometBFT GenesisDoc, and the genesis file is loaded from disk using a function that expects the CometBFT genesis format.</p><p>However, this approach has several limitations:</p><ol><li>It relies on CometBFT&#39;s genesis format, which may include fields that are not relevant to Rollkit</li><li>There&#39;s no explicit validation of the genesis file specific to Rollkit&#39;s needs</li><li>The conversion from CometBFT&#39;s GenesisDoc to RollkitGenesis is implicit and not well-documented</li><li>There&#39;s no standardized way to create, share, or modify the genesis file</li><li>The use of <code>GenesisTime</code> is problematic for chains that are a function of a DA layer, as the chain&#39;s starting point should be defined by a DA block height rather than a timestamp</li><li>The hardcoded <code>ProposerAddress</code> field doesn&#39;t allow for flexibility in different sequencing mechanisms</li></ol><h2 id="alternative-approaches" tabindex="-1">Alternative Approaches <a class="header-anchor" href="#alternative-approaches" aria-label="Permalink to &quot;Alternative Approaches&quot;">​</a></h2><h3 id="_1-continue-using-cometbft-genesis-format" tabindex="-1">1. Continue Using CometBFT Genesis Format <a class="header-anchor" href="#_1-continue-using-cometbft-genesis-format" aria-label="Permalink to &quot;1. Continue Using CometBFT Genesis Format&quot;">​</a></h3><p>We could continue using the CometBFT genesis format and enhance the conversion logic to extract Rollkit-specific values. This approach has the advantage of compatibility with existing tools but means Rollkit is constrained by the structure of the CometBFT genesis file.</p><h3 id="_2-create-a-completely-custom-genesis-format-chosen" tabindex="-1">2. Create a Completely Custom Genesis Format (Chosen) <a class="header-anchor" href="#_2-create-a-completely-custom-genesis-format-chosen" aria-label="Permalink to &quot;2. Create a Completely Custom Genesis Format (Chosen)&quot;">​</a></h3><p>We will define a completely new genesis file format specific to Rollkit with no dependency on CometBFT&#39;s format. This gives us maximum flexibility to define fields that are relevant to chains that rely on a DA layer.</p><h3 id="_3-hybrid-approach" tabindex="-1">3. Hybrid Approach <a class="header-anchor" href="#_3-hybrid-approach" aria-label="Permalink to &quot;3. Hybrid Approach&quot;">​</a></h3><p>Define a Rollkit-specific genesis file format that:</p><ol><li>Contains only the fields needed by Rollkit</li><li>Supports importing/exporting to/from CometBFT genesis format for compatibility</li><li>Includes validation specific to Rollkit&#39;s requirements</li></ol><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><p>We will implement a dedicated Rollkit genesis file format that is completely decoupled from CometBFT&#39;s format. This will allow us to define fields that are specifically relevant to chains of this type, such as <code>genesisDAStartHeight</code> instead of <code>genesisTime</code>, and a flexible <code>extraData</code> field instead of hardcoding a <code>proposerAddress</code>.</p><p>The new genesis format will be defined in its own package (<code>genesis</code>) and will include validation and serialization methods.</p><h2 id="detailed-design" tabindex="-1">Detailed Design <a class="header-anchor" href="#detailed-design" aria-label="Permalink to &quot;Detailed Design&quot;">​</a></h2><h3 id="genesis-file-structure" tabindex="-1">Genesis File Structure <a class="header-anchor" href="#genesis-file-structure" aria-label="Permalink to &quot;Genesis File Structure&quot;">​</a></h3><p>The new genesis file structure will contain the following key fields:</p><ol><li><p><strong>GenesisDAStartHeight</strong>: The DA layer height at which the chain starts, replacing the traditional <code>GenesisTime</code> field. This provides a more accurate starting point for chains built on a DA layer.</p></li><li><p><strong>InitialHeight</strong>: The initial block height of the chain.</p></li><li><p><strong>ChainID</strong>: A unique identifier for the chain.</p></li><li><p><strong>ExtraData</strong>: A flexible field that can contain chain-specific configuration, such as proposer/sequencer information or consensus parameters. This replaces the hardcoded <code>ProposerAddress</code> field.</p></li><li><p><strong>AppState</strong>: Application-specific genesis state as a JSON object.</p></li></ol><p>The <code>ExtraData</code> field is particularly important as it allows different node types (sequencer, full node) to store type-specific information. For example, a single sequencer setup might include the sequencer&#39;s address in this field, while a decentralized setup might include validator set information.</p><p>The <code>AppState</code> field should contain the genesis file specific to the execution layer as a JSON Object. It will be passed on the execution layer during initialization.</p><h3 id="genesis-validation" tabindex="-1">Genesis Validation <a class="header-anchor" href="#genesis-validation" aria-label="Permalink to &quot;Genesis Validation&quot;">​</a></h3><p>The genesis structure will include validation logic to ensure all required fields are present and valid. This would include checks that:</p><ul><li>The DA start height is non-zero</li><li>The chain ID is present and properly formatted</li><li>The initial height is at least 1</li><li>Other format-specific validations</li></ul><h3 id="extradata-structure" tabindex="-1">ExtraData Structure <a class="header-anchor" href="#extradata-structure" aria-label="Permalink to &quot;ExtraData Structure&quot;">​</a></h3><p>Since <code>ExtraData</code> is a flexible field that can contain different types of information, we&#39;ll define a common configuration structure that can be serialized into this field. This configuration would include:</p><ul><li>Proposer address for single sequencer mode</li><li>Validator information for multiple sequencers or validator-based consensus</li><li>Consensus parameters as needed</li></ul><p>The package will provide helper functions for encoding and decoding this information to and from the <code>ExtraData</code> field.</p><h3 id="genesis-file-i-o" tabindex="-1">Genesis File I/O <a class="header-anchor" href="#genesis-file-i-o" aria-label="Permalink to &quot;Genesis File I/O&quot;">​</a></h3><p>The genesis package will provide functions to:</p><ul><li>Load a genesis file from disk</li><li>Save a genesis file to disk</li><li>Parse a genesis document from JSON</li><li>Serialize a genesis document to JSON</li><li>Validate a genesis document</li></ul><h3 id="command-line-tools" tabindex="-1">Command-Line Tools <a class="header-anchor" href="#command-line-tools" aria-label="Permalink to &quot;Command-Line Tools&quot;">​</a></h3><p>We will provide CLI commands to initialize, validate, and inspect genesis files. These would include:</p><ul><li><code>init</code>: Initialize a new genesis file with a specified chain ID</li><li><code>validate</code>: Validate an existing genesis file</li><li><code>add-proposer</code>: Set the proposer address in the extra data field</li></ul><p>The commands would use flags to set various genesis parameters like the initial height, DA start height, and proposer address.</p><h3 id="integration-with-node-types" tabindex="-1">Integration with Node Types <a class="header-anchor" href="#integration-with-node-types" aria-label="Permalink to &quot;Integration with Node Types&quot;">​</a></h3><h4 id="sequencer-node" tabindex="-1">Sequencer Node <a class="header-anchor" href="#sequencer-node" aria-label="Permalink to &quot;Sequencer Node&quot;">​</a></h4><p>Sequencer nodes need to interpret the <code>ExtraData</code> field to determine if they are authorized to create blocks. In a single sequencer model, this would involve:</p><ol><li>Loading the genesis file</li><li>Decoding the extra data to extract the proposer address</li><li>Checking if the node&#39;s signing key matches the proposer address</li><li>Initializing the node based on its role (sequencer or non-sequencer)</li></ol><h4 id="full-node" tabindex="-1">Full Node <a class="header-anchor" href="#full-node" aria-label="Permalink to &quot;Full Node&quot;">​</a></h4><p>Full nodes use the genesis file to initialize their state and validate incoming blocks. This process would involve:</p><ol><li>Loading the genesis file</li><li>Decoding the extra data to access consensus parameters and proposer information</li><li>Initializing the node with the genesis information</li></ol><h3 id="initial-state-creation" tabindex="-1">Initial State Creation <a class="header-anchor" href="#initial-state-creation" aria-label="Permalink to &quot;Initial State Creation&quot;">​</a></h3><p>The block manager&#39;s <code>getInitialState</code> function will be updated to work with the new genesis format. This would involve:</p><ol><li>Loading the state from the store if available</li><li>If no state is found, initializing a new state based on the genesis information: <ul><li>Decoding the extra data to get the proposer address</li><li>Determining the genesis time based on the DA start height (by querying the DA layer)</li><li>Initializing the chain with the appropriate parameters</li><li>Creating and saving the genesis block</li></ul></li><li>Performing sanity checks when resuming from an existing state</li></ol><h2 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h2><p>Proposed</p><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><h3 id="positive" tabindex="-1">Positive <a class="header-anchor" href="#positive" aria-label="Permalink to &quot;Positive&quot;">​</a></h3><ol><li><strong>DA-Centric Design</strong>: Using <code>genesisDAStartHeight</code> instead of <code>genesisTime</code> provides a more accurate starting point for chains built on a DA layer.</li><li><strong>Flexibility</strong>: The <code>extraData</code> field allows for different sequencing mechanisms and chain-specific configurations.</li><li><strong>Simplicity</strong>: A custom genesis format allows us to include only what&#39;s needed for Rollkit chains.</li><li><strong>Independence</strong>: No dependency on CometBFT&#39;s genesis format allows Rollkit to evolve independently.</li><li><strong>Better Semantics</strong>: The structure more accurately reflects how chains initialize and operate.</li></ol><h3 id="negative" tabindex="-1">Negative <a class="header-anchor" href="#negative" aria-label="Permalink to &quot;Negative&quot;">​</a></h3><ol><li><strong>Breaking Change</strong>: Existing code that directly uses <code>RollkitGenesis</code> will need to be updated.</li><li><strong>Tooling Requirements</strong>: New tools will need to be developed for genesis file creation and management.</li><li><strong>Compatibility Issue</strong>: No direct compatibility with existing Cosmos ecosystem tools that expect CometBFT genesis format.</li></ol><h3 id="neutral" tabindex="-1">Neutral <a class="header-anchor" href="#neutral" aria-label="Permalink to &quot;Neutral&quot;">​</a></h3><ol><li><strong>Documentation Requirements</strong>: The new genesis format will need to be documented for users.</li><li><strong>Testing Requirements</strong>: Comprehensive tests will be needed for the new functionality.</li></ol><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://github.com/evstack/ev-node/blob/main/block" target="_blank" rel="noreferrer">Block Manager Implementation</a></li></ul>',62)]))}const p=i(n,[["render",s]]);export{f as __pageData,p as default};
