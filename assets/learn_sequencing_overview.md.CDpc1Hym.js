import{_ as i,c as e,ag as n,o as a}from"./chunks/framework.CmpABV1Y.js";const d=JSON.parse('{"title":"Sequencing","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Sequencing | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"learn/sequencing/overview.md","filePath":"learn/sequencing/overview.md","lastUpdated":1760605670000}'),t={name:"learn/sequencing/overview.md"};function h(l,s,r,p,k,c){return a(),e("div",null,s[0]||(s[0]=[n(`<h1 id="sequencing" tabindex="-1">Sequencing <a class="header-anchor" href="#sequencing" aria-label="Permalink to &quot;Sequencing&quot;">​</a></h1><p>Sequencing is the essential first step for handling your transactions. Think of it as an organizer that takes all incoming transactions, puts them in a clear order, and then groups them into batches. This process is vital for keeping everything consistent and making the chain run. Evolve uses a &quot;Sequencing Interface&quot; with key functions like submitting, retrieving, and verifying these transaction batches, ensuring smooth communication between the chain and the sequencing mechanism, which often acts as a bridge to the underlying network.</p><h2 id="sequencing-interface" tabindex="-1">Sequencing Interface <a class="header-anchor" href="#sequencing-interface" aria-label="Permalink to &quot;Sequencing Interface {#sequencing-interface}&quot;">​</a></h2><p><a href="https://github.com/evstack/ev-node/blob/main/core/sequencer/sequencing.go#L11" target="_blank" rel="noreferrer">Sequencing Interface</a> defines a sequencing interface for communicating between any sequencing network and Evolve. The key functions of the interface are defined as shown below.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Sequencer is a generic interface for a sequencer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sequencer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // SubmitBatchTxs submits a batch of transactions  to sequencer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Id is the unique identifier for the target chain</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Batch is the batch of transactions to submit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // returns an error if any from the sequencer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubmitBatchTxs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubmitBatchTxsRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SubmitBatchTxsResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // GetNextBatch returns the next batch of transactions from sequencer to</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Id is the unique identifier for the target chain</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // LastBatchHash is the cryptographic hash of the last batch received by the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // MaxBytes is the maximum number of bytes to return in the batch</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // returns the next batch of transactions and an error if any from the sequencer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetNextBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetNextBatchRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetNextBatchResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // VerifyBatch verifies a batch of transactions received from the sequencer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Id is the unique identifier for the target chain</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // BatchHash is the cryptographic hash of the batch to verify</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // returns a boolean indicating if the batch is valid and an error if any from the sequencer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VerifyBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VerifyBatchResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VerifyBatchResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>It mainly consists of:</p><ul><li><code>SubmitBatchTxs</code> relays the chain transactions from Evolve chain to the sequencing network</li><li><code>GetNextBatch</code> returns the next batch of transactions along with a deterministic timestamp</li><li><code>VerifyBatch</code> validates the sequenced batch</li></ul><h2 id="sequencing-implementations" tabindex="-1">Sequencing Implementations <a class="header-anchor" href="#sequencing-implementations" aria-label="Permalink to &quot;Sequencing Implementations {#sequencing-implementations}&quot;">​</a></h2><p>An implementation of the sequencing interface mainly acts as a middleware that connects Evolve chain and the sequencing layer. It implements the sequencing interface functions described above. There are several implementations of the sequencer but for now only one is available in Evolve.</p><ul><li><a href="./single">single-sequencer</a> - The simplest and most widely used sequencing model, where a single node (the sequencer) is responsible for ordering transactions and producing blocks.</li></ul>`,10)]))}const g=i(t,[["render",h]]);export{d as __pageData,g as default};
