import{_ as s,c as l,ag as r,b as c,w as a,af as u,j as e,a as t,B as d,o,G as h}from"./chunks/framework.CmpABV1Y.js";const A=JSON.parse('{"title":"Single Sequencer","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Single Sequencer | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"learn/sequencing/single.md","filePath":"learn/sequencing/single.md","lastUpdated":1759141156000}'),g={name:"learn/sequencing/single.md"};function m(p,n,b,q,f,v){const i=d("Mermaid");return o(),l("div",null,[n[1]||(n[1]=r('<h1 id="single-sequencer" tabindex="-1">Single Sequencer <a class="header-anchor" href="#single-sequencer" aria-label="Permalink to &quot;Single Sequencer&quot;">​</a></h1><p>A single sequencer is the simplest sequencing architecture for an Evolve-based chain. In this model, one node (the sequencer) is responsible for ordering transactions, producing blocks, and submitting data to the data availability (DA) layer.</p><h2 id="how-the-single-sequencer-model-works" tabindex="-1">How the Single Sequencer Model Works <a class="header-anchor" href="#how-the-single-sequencer-model-works" aria-label="Permalink to &quot;How the Single Sequencer Model Works&quot;">​</a></h2><ol><li><p><strong>Transaction Submission:</strong></p><ul><li>Users submit transactions to the execution environment via RPC or other interfaces.</li></ul></li><li><p><strong>Transaction Collection and Ordering:</strong></p><ul><li>The execution environment collects incoming transactions.</li><li>The sequencer requests a batch of transactions from the execution environment to be included in the next block.</li></ul></li><li><p><strong>Block Production:</strong></p><ul><li><strong>Without lazy mode:</strong> the sequencer produces new blocks at fixed intervals.</li><li><strong>With lazy mode:</strong> the sequencer produces a block once either <ul><li>enough transactions are collected</li><li>the lazy-mode block interval elapses More info <a href="./../config#lazy-mode-lazy-aggregator">here</a>.</li></ul></li><li>Each block contains a batch of ordered transactions and metadata.</li></ul></li><li><p><strong>Data Availability Posting:</strong></p><ul><li>The sequencer posts the block data to the configured DA layer (e.g., Celestia).</li><li>This ensures that anyone can access the data needed to reconstruct the chain state.</li></ul></li><li><p><strong>State Update:</strong></p><ul><li>The sequencer updates the chain state based on the new block and makes the updated state available to light clients and full nodes.</li></ul></li></ol><h2 id="transaction-flow-diagram" tabindex="-1">Transaction Flow Diagram <a class="header-anchor" href="#transaction-flow-diagram" aria-label="Permalink to &quot;Transaction Flow Diagram&quot;">​</a></h2>',5)),(o(),c(u,null,{default:a(()=>[h(i,{id:"mermaid-106",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20User%0A%20%20%20%20participant%20ExecutionEnv%20as%20Execution%20Environment%0A%20%20%20%20participant%20Sequencer%0A%20%20%20%20participant%20DA%20as%20Data%20Availability%20Layer%0A%0A%20%20%20%20User-%3E%3EExecutionEnv%3A%20Submit%20transaction%0A%20%20%20%20Sequencer-%3E%3EExecutionEnv%3A%20Request%20batch%20for%20block%0A%20%20%20%20ExecutionEnv-%3E%3ESequencer%3A%20Provide%20batch%20of%20transactions%0A%20%20%20%20Sequencer-%3E%3EDA%3A%20Post%20block%20data%0A%20%20%20%20Sequencer-%3E%3EExecutionEnv%3A%20Update%20state%0A%20%20%20%20ExecutionEnv-%3E%3EUser%3A%20State%2Fquery%20response%0A"})]),fallback:a(()=>n[0]||(n[0]=[t(" Loading... ")])),_:1})),n[2]||(n[2]=e("h2",{id:"advantages",tabindex:"-1"},[t("Advantages "),e("a",{class:"header-anchor",href:"#advantages","aria-label":'Permalink to "Advantages"'},"​")],-1)),n[3]||(n[3]=e("ul",null,[e("li",null,[e("strong",null,"Simplicity:"),t(" Easy to set up and operate, making it ideal for development, testing, and small-scale deployments compared to other more complex sequencers.")]),e("li",null,[e("strong",null,"Low Latency:"),t(" Fast block production and transaction inclusion, since there is no consensus overhead among multiple sequencers.")]),e("li",null,[e("strong",null,"Independence from DA block time:"),t(" The sequencer can produce blocks on its own schedule, without being tied to the block time of the DA layer, enabling more flexible transaction processing than DA-timed sequencers.")])],-1))])}const k=s(g,[["render",m]]);export{A as __pageData,k as default};
