import{C as l}from"./chunks/callout.DG0NFjZU.js";import{c as s,j as o,a as n,G as i,b as c,w as t,af as u,ag as d,B as h,o as a}from"./chunks/framework.DlgP5dhN.js";/* empty css                                                                       */const g={class:"tip custom-block"},y=JSON.parse('{"title":"🚀 Evolve EVM Deployment Guide","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"🚀 Evolve EVM Deployment Guide | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"guides/deploy/testnet.md","filePath":"guides/deploy/testnet.md","lastUpdated":1758576573000}'),p={name:"guides/deploy/testnet.md"},q=Object.assign(p,{setup(m){return(E,e)=>{const r=h("Mermaid");return a(),s("div",null,[e[2]||(e[2]=o("h1",{id:"🚀-evolve-evm-deployment-guide",tabindex:"-1"},[n("🚀 Evolve EVM Deployment Guide "),o("a",{class:"header-anchor",href:"#🚀-evolve-evm-deployment-guide","aria-label":'Permalink to "🚀 Evolve EVM Deployment Guide"'},"​")],-1)),e[3]||(e[3]=o("p",null,"This tutorial is going to show you how to deploy a Evolve testnet, focusing on the architecture choices and components that make up a complete EVM-based chain deployment.",-1)),e[4]||(e[4]=o("p",null,[n("You can learn more about Evolve EVM architecture "),o("a",{href:"./../../learn/execution"},"here"),n(".")],-1)),o("div",g,[e[0]||(e[0]=o("p",{class:"custom-block-title"},"TIP",-1)),i(l)]),e[5]||(e[5]=o("h2",{id:"🏗️-architecture-overview",tabindex:"-1"},[n("🏗️ Architecture Overview "),o("a",{class:"header-anchor",href:"#🏗️-architecture-overview","aria-label":'Permalink to "🏗️ Architecture Overview"'},"​")],-1)),e[6]||(e[6]=o("p",null,"The following diagram illustrates the complete deployment architecture with component interactions:",-1)),(a(),c(u,null,{default:t(()=>[i(r,{id:"mermaid-22",class:"mermaid",graph:"graph%20TB%0A%20%20%20%20subgraph%20%22Sequencer%20Stack%22%0A%20%20%20%20%20%20%20%20SEQ_RETH%5BRETH%20Service%5D%0A%20%20%20%20%20%20%20%20SEQ_EVOLVE%5BEVOLVE%20Service%3Cbr%2F%3E--aggregator%3Dtrue%5D%0A%20%20%20%20%20%20%20%20SEQ_RETH%20%3C--%3E%20SEQ_EVOLVE%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22Full%20Node%20Stack%201%22%0A%20%20%20%20%20%20%20%20FN1_RETH%5BRETH%20Service%5D%0A%20%20%20%20%20%20%20%20FN1_EVOLVE%5BEVOLVE%20Service%3Cbr%2F%3E--aggregator%3Dfalse%5D%0A%20%20%20%20%20%20%20%20FN1_RETH%20%3C--%3E%20FN1_EVOLVE%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22Full%20Node%20Stack%202%22%0A%20%20%20%20%20%20%20%20FN2_RETH%5BRETH%20Service%5D%0A%20%20%20%20%20%20%20%20FN2_EVOLVE%5BEVOLVE%20Service%3Cbr%2F%3E--aggregator%3Dfalse%5D%0A%20%20%20%20%20%20%20%20FN2_RETH%20%3C--%3E%20FN2_EVOLVE%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22Full%20Node%20Stack%203%22%0A%20%20%20%20%20%20%20%20FN3_RETH%5BRETH%20Service%5D%0A%20%20%20%20%20%20%20%20FN3_EVOLVE%5BEVOLVE%20Service%3Cbr%2F%3E--aggregator%3Dfalse%5D%0A%20%20%20%20%20%20%20%20FN3_RETH%20%3C--%3E%20FN3_EVOLVE%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22Celestia%20DA%20Stack%22%0A%20%20%20%20%20%20%20%20CELESTIA_APP%5BCelestia-App%3Cbr%2F%3EConsensus%20Layer%5D%0A%20%20%20%20%20%20%20%20CELESTIA_NODE%5BCelestia-Node%3Cbr%2F%3EDA%20Sampling%20%26%20API%5D%0A%20%20%20%20%20%20%20%20CELESTIA_APP%20%3C--%3E%20CELESTIA_NODE%0A%20%20%20%20end%0A%0A%20%20%20%20%25%25%20P2P%20connections%20between%20Evolve%20nodes%0A%20%20%20%20SEQ_EVOLVE%20%3C--%3E%20FN1_EVOLVE%0A%20%20%20%20SEQ_EVOLVE%20%3C--%3E%20FN2_EVOLVE%0A%20%20%20%20SEQ_EVOLVE%20%3C--%3E%20FN3_EVOLVE%0A%20%20%20%20FN1_EVOLVE%20%3C--%3E%20FN2_EVOLVE%0A%20%20%20%20FN2_EVOLVE%20%3C--%3E%20FN3_EVOLVE%0A%20%20%20%20FN1_EVOLVE%20%3C--%3E%20FN3_EVOLVE%0A%0A%20%20%20%20%25%25%20DA%20connections%0A%20%20%20%20SEQ_EVOLVE%20--%3E%7CPost%20Blobs%3Cbr%2F%3EAuth%20Token%7C%20CELESTIA_NODE%0A%20%20%20%20FN1_EVOLVE%20--%3E%7CRetrieve%20Blobs%3Cbr%2F%3EAuth%20Token%7C%20CELESTIA_NODE%0A%20%20%20%20FN2_EVOLVE%20--%3E%7CRetrieve%20Blobs%3Cbr%2F%3EAuth%20Token%7C%20CELESTIA_NODE%0A%20%20%20%20FN3_EVOLVE%20--%3E%7CRetrieve%20Blobs%3Cbr%2F%3EAuth%20Token%7C%20CELESTIA_NODE%0A%0A%20%20%20%20%25%25%20User%20interactions%0A%20%20%20%20USERS%5BUsers%2FApplications%5D%20--%3E%20FN1_RETH%0A%20%20%20%20USERS%20--%3E%20FN2_RETH%0A%20%20%20%20USERS%20--%3E%20FN3_RETH%0A%0A%20%20%20%20classDef%20sequencer%20fill%3A%23e1f5fe%0A%20%20%20%20classDef%20fullnode%20fill%3A%23f3e5f5%0A%20%20%20%20classDef%20celestia%20fill%3A%23fff3e0%0A%20%20%20%20classDef%20user%20fill%3A%23e8f5e8%0A%0A%20%20%20%20class%20SEQ_RETH%2CSEQ_EVOLVE%20sequencer%0A%20%20%20%20class%20FN1_RETH%2CFN1_EVOLVE%2CFN2_RETH%2CFN2_EVOLVE%2CFN3_RETH%2CFN3_EVOLVE%20fullnode%0A%20%20%20%20class%20CELESTIA_APP%2CCELESTIA_NODE%20celestia%0A%20%20%20%20class%20USERS%20user%0A"})]),fallback:t(()=>e[1]||(e[1]=[n(" Loading... ")])),_:1})),e[7]||(e[7]=d('<p><strong>Key Interactions:</strong></p><ul><li><strong>Engine API</strong>: RETH ↔ EVOLVE communication within each stack</li><li><strong>P2P Network</strong>: EVOLVE nodes sync blocks and share chain state</li><li><strong>Data Availability</strong>: Sequencer posts blobs, full nodes retrieve blobs from Celestia</li><li><strong>User Access</strong>: Applications connect to full node RETH services for JSON-RPC access</li></ul><h2 id="prerequisites" tabindex="-1">💻 Pre-requisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;💻 Pre-requisites {#prerequisites}&quot;">​</a></h2><p>Make sure you understand the sequencing topology you want to use by reading the <a href="./../..//learn/sequencing/overview">Sequencing Overview</a>.</p><h2 id="dependencies" tabindex="-1">🛠️ Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;🛠️ Dependencies {#dependencies}&quot;">​</a></h2><h3 id="choosing-sequencing-topology" tabindex="-1">🔄 Choosing Your Sequencing Topology <a class="header-anchor" href="#choosing-sequencing-topology" aria-label="Permalink to &quot;🔄 Choosing Your Sequencing Topology {#choosing-sequencing-topology}&quot;">​</a></h3><p>First, you need to choose a sequencing topology for your Evolve EVM chain. The sequencing topology determines how transactions are ordered and blocks are produced in your chain.</p><p>Currently, Evolve supports one sequencing implementation:</p><h3 id="🔄-single-sequencer" tabindex="-1">🔄 Single Sequencer <a class="header-anchor" href="#🔄-single-sequencer" aria-label="Permalink to &quot;🔄 Single Sequencer&quot;">​</a></h3><ul><li><strong>Description</strong>: The simplest sequencing architecture where one node is responsible for ordering transactions and producing blocks</li><li><strong>Use Cases</strong>: Development, testing, and production deployments requiring simplicity and low latency</li><li><strong>Advantages</strong>: Easy setup, fast block production, independence from DA block time</li><li><strong>Requirements</strong>: One sequencer node, multiple optional full nodes</li></ul><p>For detailed information about sequencing topologies, see the <a href="./../../learn/sequencing/overview">Sequencing Overview</a> and <a href="./../../learn/sequencing/single">Single Sequencer</a> documentation.</p><h2 id="deployment-architecture" tabindex="-1">🏗️ Deployment Architecture <a class="header-anchor" href="#deployment-architecture" aria-label="Permalink to &quot;🏗️ Deployment Architecture {#deployment-architecture}&quot;">​</a></h2><h3 id="🔄-single-sequencer-topology" tabindex="-1">🔄 Single Sequencer Topology <a class="header-anchor" href="#🔄-single-sequencer-topology" aria-label="Permalink to &quot;🔄 Single Sequencer Topology&quot;">​</a></h3><p>In a single sequencer deployment, you will run:</p><ol><li><p><strong>One Sequencer Node</strong> (Required)</p><ul><li>Handles transaction ordering and block production</li><li>Posts data to the Data Availability layer</li><li>Serves as the primary source of truth for the chain</li></ul></li><li><p><strong>Multiple Full Nodes</strong> (Optional, but recommended)</p><ul><li>Sync blocks from the sequencer</li><li>Provide redundancy and decentralization</li><li>Can serve user queries and transactions</li><li>Scale horizontally based on demand</li></ul></li></ol><h2 id="setting-up-your-environment" tabindex="-1">🛠️ Setting up your environment <a class="header-anchor" href="#setting-up-your-environment" aria-label="Permalink to &quot;🛠️ Setting up your environment {#setting-up-your-environment}&quot;">​</a></h2><p>In addition to choosing your sequencing topology, we need to understand the components that make up your deployment.</p><p>We will use a combination of RETH and EVOLVE services for this tutorial and run them together to create your EVM chain.</p><p>Each node in your Evolve EVM deployment (whether sequencer or full node) consists of two primary services working together:</p><h3 id="⚡-reth-service" tabindex="-1">⚡ RETH Service <a class="header-anchor" href="#⚡-reth-service" aria-label="Permalink to &quot;⚡ RETH Service&quot;">​</a></h3><ul><li><strong>Purpose</strong>: Provides the Ethereum Virtual Machine (EVM) execution environment</li><li><strong>Technology</strong>: Rust-based Ethereum client (Reth) that handles transaction execution</li><li><strong>Responsibilities</strong>: <ul><li>Processing EVM transactions</li><li>Maintaining the EVM state</li><li>Providing Ethereum JSON-RPC API endpoints</li><li>Managing the execution layer consensus</li></ul></li></ul><h3 id="🔗-evolve-service" tabindex="-1">🔗 EVOLVE Service <a class="header-anchor" href="#🔗-evolve-service" aria-label="Permalink to &quot;🔗 EVOLVE Service&quot;">​</a></h3><ul><li><strong>Purpose</strong>: Handles chain-specific functionality and consensus</li><li><strong>Technology</strong>: Evolve node implementation</li><li><strong>Responsibilities</strong>: <ul><li>Block production and validation</li><li>Data availability integration</li><li>P2P networking between chain nodes</li><li>Chain consensus mechanisms</li><li>Communication with the execution layer (RETH)</li></ul></li></ul><h3 id="🔄-service-interaction" tabindex="-1">🔄 Service Interaction <a class="header-anchor" href="#🔄-service-interaction" aria-label="Permalink to &quot;🔄 Service Interaction&quot;">​</a></h3><p>The two services work together through well-defined interfaces:</p><ol><li><strong>Engine API</strong>: Evolve communicates with RETH using the Engine API (typically on port 8551)</li><li><strong>JWT Authentication</strong>: Secure communication between services using shared JWT secrets</li><li><strong>Block Coordination</strong>: Evolve orchestrates block production while RETH executes transactions</li></ol><h2 id="node-configurations" tabindex="-1">⚙️ Node Configurations <a class="header-anchor" href="#node-configurations" aria-label="Permalink to &quot;⚙️ Node Configurations {#node-configurations}&quot;">​</a></h2><h3 id="🎯-sequencer-node-configuration" tabindex="-1">🎯 Sequencer Node Configuration <a class="header-anchor" href="#🎯-sequencer-node-configuration" aria-label="Permalink to &quot;🎯 Sequencer Node Configuration&quot;">​</a></h3><p>The single sequencer node runs both RETH and EVOLVE services with specific settings:</p><ul><li><strong>RETH</strong>: Configured to accept blocks from the Evolve sequencer</li><li><strong>EVOLVE</strong>: Configured with <code>--evnode.node.aggregator=true</code> to enable block production</li><li><strong>Role</strong>: Produces blocks, orders transactions, posts to DA layer</li></ul><h3 id="📡-full-node-configuration" tabindex="-1">📡 Full Node Configuration <a class="header-anchor" href="#📡-full-node-configuration" aria-label="Permalink to &quot;📡 Full Node Configuration&quot;">​</a></h3><p>Each full node also runs both RETH and EVOLVE services but in sync mode:</p><ul><li><strong>RETH</strong>: Configured to process blocks received from the network</li><li><strong>EVOLVE</strong>: Configured with <code>--evnode.node.aggregator=false</code> to sync from the sequencer</li><li><strong>Role</strong>: Syncs blocks, serves queries, provides redundancy</li></ul><h3 id="🔑-key-integration-points" tabindex="-1">🔑 Key Integration Points <a class="header-anchor" href="#🔑-key-integration-points" aria-label="Permalink to &quot;🔑 Key Integration Points&quot;">​</a></h3><p>All nodes require:</p><ul><li>Shared JWT secret for Engine API authentication</li><li>Matching genesis configuration between EVOLVE nodes</li><li>Proper network configuration for service communication</li><li>Coordinated startup sequence (typically RETH first, then EVOLVE)</li></ul><h3 id="⏰-block-time-configuration" tabindex="-1">⏰ Block Time Configuration <a class="header-anchor" href="#⏰-block-time-configuration" aria-label="Permalink to &quot;⏰ Block Time Configuration&quot;">​</a></h3><p>You can customize timing parameters for your chain. While there are many configuration arguments available for the Evolve binary, two important timing-related flags are:</p><h4 id="🎯-sequencer-block-time" tabindex="-1">🎯 Sequencer Block Time <a class="header-anchor" href="#🎯-sequencer-block-time" aria-label="Permalink to &quot;🎯 Sequencer Block Time&quot;">​</a></h4><ul><li><strong>Flag</strong>: <code>--evnode.node.block_time</code></li><li><strong>Default</strong>: 1s (1 block per second)</li><li><strong>Purpose</strong>: Controls how frequently the sequencer produces new blocks</li><li><strong>Customization</strong>: Can be adjusted based on throughput requirements and latency preferences</li></ul><h4 id="📊-data-availability-block-time" tabindex="-1">📊 Data Availability Block Time <a class="header-anchor" href="#📊-data-availability-block-time" aria-label="Permalink to &quot;📊 Data Availability Block Time&quot;">​</a></h4><ul><li><strong>Flag</strong>: <code>--evnode.da.block_time</code></li><li><strong>Default</strong>: 6s</li><li><strong>Purpose</strong>: Controls how frequently blobs are posted to the Celestia chain</li><li><strong>Function</strong>: Each 6 seconds (by default), batched block data is submitted to Celestia for data availability</li></ul><h2 id="celestia-da" tabindex="-1">🌌 Data Availability Layer: Celestia <a class="header-anchor" href="#celestia-da" aria-label="Permalink to &quot;🌌 Data Availability Layer: Celestia {#celestia-da}&quot;">​</a></h2><p>Your Evolve EVM chain connects to Celestia as the Data Availability (DA) layer. The Evolve EVM Celestia DA stack consists of two key services:</p><h3 id="🏛️-celestia-app-service" tabindex="-1">🏛️ Celestia-App Service <a class="header-anchor" href="#🏛️-celestia-app-service" aria-label="Permalink to &quot;🏛️ Celestia-App Service&quot;">​</a></h3><ul><li><strong>Purpose</strong>: Provides the consensus layer for the Celestia network</li><li><strong>Responsibilities</strong>: <ul><li>Processing and ordering transactions on the Celestia network</li><li>Maintaining the canonical state of the DA layer</li><li>Participating in Tendermint consensus</li></ul></li></ul><h3 id="🌐-celestia-node-service" tabindex="-1">🌐 Celestia-Node Service <a class="header-anchor" href="#🌐-celestia-node-service" aria-label="Permalink to &quot;🌐 Celestia-Node Service&quot;">​</a></h3><ul><li><strong>Purpose</strong>: Provides data availability sampling and networking</li><li><strong>Responsibilities</strong>: <ul><li>Data availability sampling (DAS) to verify data availability</li><li>P2P networking for block and data propagation</li><li>Light client functionality for resource-constrained environments</li><li>API endpoints for chains to submit and retrieve data</li></ul></li></ul><h3 id="🔗-celestia-integration" tabindex="-1">🔗 Celestia Integration <a class="header-anchor" href="#🔗-celestia-integration" aria-label="Permalink to &quot;🔗 Celestia Integration&quot;">​</a></h3><p>Both sequencer and full node Evolve services need to communicate with the celestia-node service, but for different purposes:</p><h4 id="📤-sequencer-node-communication" tabindex="-1">📤 Sequencer Node Communication <a class="header-anchor" href="#📤-sequencer-node-communication" aria-label="Permalink to &quot;📤 Sequencer Node Communication&quot;">​</a></h4><ul><li><strong>Purpose</strong>: Batch posting of block data (blobs) to Celestia</li><li><strong>Operation</strong>: The sequencer Evolve service submits batched block data to Celestia via the celestia-node API</li><li><strong>Frequency</strong>: Occurs regularly as new blocks are produced and need to be made available</li></ul><h4 id="📥-full-node-communication" tabindex="-1">📥 Full Node Communication <a class="header-anchor" href="#📥-full-node-communication" aria-label="Permalink to &quot;📥 Full Node Communication&quot;">​</a></h4><ul><li><strong>Purpose</strong>: Retrieving block data (blobs) from Celestia</li><li><strong>Operation</strong>: Full node Evolve services query and download historical block data via the celestia-node API</li><li><strong>Frequency</strong>: Occurs during initial sync and ongoing block validation</li></ul><h4 id="🔑-common-integration-points" tabindex="-1">🔑 Common Integration Points <a class="header-anchor" href="#🔑-common-integration-points" aria-label="Permalink to &quot;🔑 Common Integration Points&quot;">​</a></h4><ol><li><strong>Authentication</strong>: Evolve requires an auth token generated by the celestia-node so that Evolve can send transactions on its behalf. Both sequencer and full node types use these JWT tokens for secure communication with celestia-node</li><li><strong>Namespace Isolation</strong>: Data is organized using Celestia namespaces (automatically encoded by the node for proper formatting)</li><li><strong>API Endpoints</strong>: Both sequencer and full nodes use the same celestia-node API interface</li><li><strong>Network Configuration</strong>: All nodes must be configured to connect to the same Celestia network</li></ol><h3 id="🛠️-deployment-considerations" tabindex="-1">🛠️ Deployment Considerations <a class="header-anchor" href="#🛠️-deployment-considerations" aria-label="Permalink to &quot;🛠️ Deployment Considerations&quot;">​</a></h3><p>When deploying with Celestia DA:</p><ul><li><strong>Light Node</strong>: Most chains run a celestia-node in light mode for cost efficiency</li><li><strong>Network Selection</strong>: Choose between Arabica (devnet), Mocha (testnet), or Mainnet Beta</li><li><strong>Funding</strong>: Ensure your celestia-node wallet has sufficient TIA tokens for data submission</li></ul><p>We now have all we need to understand the components for deploying a Evolve EVM chain.</p><h3 id="run-evolve-evm-chain" tabindex="-1">🚀 Run your Evolve EVM chain <a class="header-anchor" href="#run-evolve-evm-chain" aria-label="Permalink to &quot;🚀 Run your Evolve EVM chain {#run-evolve-evm-chain}&quot;">​</a></h3><p>A complete Evolve EVM chain deployment consists of:</p><ol><li><strong>One Sequencer Node</strong>: RETH + EVOLVE (aggregator mode)</li><li><strong>N Full Nodes</strong>: RETH + EVOLVE (sync mode) - scale as needed</li><li><strong>Celestia Connection</strong>: celestia-node service for data availability</li></ol><p>You can deploy your chain by running the sequencer and full nodes with the proper configuration.</p><p>Congratulations! You have successfully understood how to deploy a Evolve EVM chain.</p><h2 id="docker-compose-deployment" tabindex="-1">🐳 Simplified Deployment with Docker Compose <a class="header-anchor" href="#docker-compose-deployment" aria-label="Permalink to &quot;🐳 Simplified Deployment with Docker Compose {#docker-compose-deployment}&quot;">​</a></h2><p>The deployment of sequencer and full nodes requires running multiple processes and providing specific variables so they can effectively interact with each other. Managing these configurations manually can be complex and error-prone, especially when coordinating JWT secrets, genesis configurations, network settings, and service dependencies across multiple node stacks.</p><p>To save time, we can use ready-to-use Docker Compose stacks that can be customized based on specific needs. These pre-configured stacks handle the complexity of service orchestration, environment variable management, and inter-service communication automatically.</p><p>To make this deployment process easy and painless for node operators, you can use the example implementation available at: <a href="https://github.com/evstack/ev-toolbox/tree/main/ev-stacks/" target="_blank" rel="noreferrer">https://github.com/evstack/ev-toolbox/tree/main/ev-stacks</a></p><p>This solution provides:</p><ul><li>Pre-configured Docker Compose files for sequencer and full node deployments</li><li>Automated handling of JWT secrets and genesis file distribution</li><li>Simplified configuration through environment variables</li><li>Easy scaling of full node instances</li><li>Integrated Celestia node configuration</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This deployment approach is suitable for testnets and development environments, but is not suitable for production-grade mainnet deployments, which require additional security considerations, monitoring, backup strategies, and infrastructure hardening.</p></div><h2 id="🎉-next-steps" tabindex="-1">🎉 Next steps <a class="header-anchor" href="#🎉-next-steps" aria-label="Permalink to &quot;🎉 Next steps&quot;">​</a></h2><p>Congratulations again! You now know how to deploy Evolve EVM chains and understand the architecture and components needed.</p><p>For detailed setup instructions, see:</p><ul><li><a href="./../evm/single">Single Sequencer Setup Guide</a> - Step-by-step deployment instructions</li><li><a href="./../evm/reth-backup">RETH Backup Guide</a> - Data protection and backup procedures</li><li><a href="./../da/celestia-da">Celestia DA Guide</a> - Connecting to Celestia networks</li></ul>',76))])}}});export{y as __pageData,q as default};
