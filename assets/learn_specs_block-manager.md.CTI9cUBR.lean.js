import{_ as d,c as h,ag as r,b as n,w as t,af as s,j as c,a,B as u,o,G as l}from"./chunks/framework.CmpABV1Y.js";const p="/assets/out-of-order-blocks.n-l_kX5P.png",m="/assets/termination.BbDK_YPd.png",C=JSON.parse('{"title":"Block Components","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Block Components | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"learn/specs/block-manager.md","filePath":"learn/specs/block-manager.md","lastUpdated":1759141156000}'),g={name:"learn/specs/block-manager.md"};function b(k,e,f,A,D,y){const i=u("Mermaid");return o(),h("div",null,[e[8]||(e[8]=r('<h1 id="block-components" tabindex="-1">Block Components <a class="header-anchor" href="#block-components" aria-label="Permalink to &quot;Block Components&quot;">​</a></h1><h2 id="abstract" tabindex="-1">Abstract <a class="header-anchor" href="#abstract" aria-label="Permalink to &quot;Abstract&quot;">​</a></h2><p>The block package provides a modular component-based architecture for handling block-related operations in full nodes. Instead of a single monolithic manager, the system is divided into specialized components that work together, each responsible for specific aspects of block processing. This architecture enables better separation of concerns, easier testing, and more flexible node configurations.</p><p>The main components are:</p><ul><li><strong>Executor</strong>: Handles block production and state transitions (aggregator nodes only)</li><li><strong>Reaper</strong>: Periodically retrieves transactions and submits them to the sequencer (aggregator nodes only)</li><li><strong>Submitter</strong>: Manages submission of headers and data to the DA network (aggregator nodes only)</li><li><strong>Syncer</strong>: Handles synchronization from both DA and P2P sources (all full nodes)</li><li><strong>Cache Manager</strong>: Coordinates caching and tracking of blocks across all components</li></ul><p>A full node coordinates these components based on its role:</p><ul><li><strong>Aggregator nodes</strong>: Use all components for block production, submission, and synchronization</li><li><strong>Non-aggregator full nodes</strong>: Use only Syncer and Cache for block synchronization</li></ul>',7)),(o(),n(s,null,{default:t(()=>[l(i,{id:"mermaid-54",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20title%20Overview%20of%20Block%20Manager%0A%0A%20%20%20%20participant%20User%0A%20%20%20%20participant%20Sequencer%0A%20%20%20%20participant%20Full%20Node%201%0A%20%20%20%20participant%20Full%20Node%202%0A%20%20%20%20participant%20DA%20Layer%0A%0A%20%20%20%20User-%3E%3ESequencer%3A%20Send%20Tx%0A%20%20%20%20Sequencer-%3E%3ESequencer%3A%20Generate%20Block%0A%20%20%20%20Sequencer-%3E%3EDA%20Layer%3A%20Publish%20Block%0A%0A%20%20%20%20Sequencer-%3E%3EFull%20Node%201%3A%20Gossip%20Block%0A%20%20%20%20Sequencer-%3E%3EFull%20Node%202%3A%20Gossip%20Block%0A%20%20%20%20Full%20Node%201-%3E%3EFull%20Node%201%3A%20Verify%20Block%0A%20%20%20%20Full%20Node%201-%3E%3EFull%20Node%202%3A%20Gossip%20Block%0A%20%20%20%20Full%20Node%201-%3E%3EFull%20Node%201%3A%20Mark%20Block%20Soft%20Confirmed%0A%0A%20%20%20%20Full%20Node%202-%3E%3EFull%20Node%202%3A%20Verify%20Block%0A%20%20%20%20Full%20Node%202-%3E%3EFull%20Node%202%3A%20Mark%20Block%20Soft%20Confirmed%0A%0A%20%20%20%20DA%20Layer-%3E%3EFull%20Node%201%3A%20Retrieve%20Block%0A%20%20%20%20Full%20Node%201-%3E%3EFull%20Node%201%3A%20Mark%20Block%20DA%20Included%0A%0A%20%20%20%20DA%20Layer-%3E%3EFull%20Node%202%3A%20Retrieve%20Block%0A%20%20%20%20Full%20Node%202-%3E%3EFull%20Node%202%3A%20Mark%20Block%20DA%20Included%0A"})]),fallback:t(()=>e[0]||(e[0]=[a(" Loading... ")])),_:1})),e[9]||(e[9]=c("h3",{id:"component-architecture-overview",tabindex:"-1"},[a("Component Architecture Overview "),c("a",{class:"header-anchor",href:"#component-architecture-overview","aria-label":'Permalink to "Component Architecture Overview"'},"​")],-1)),(o(),n(s,null,{default:t(()=>[l(i,{id:"mermaid-58",class:"mermaid",graph:"flowchart%20TB%0A%20%20%20%20subgraph%20Block%20Components%20%5BModular%20Block%20Components%5D%0A%20%20%20%20%20%20%20%20EXE%5BExecutor%3Cbr%2F%3EBlock%20Production%5D%0A%20%20%20%20%20%20%20%20REA%5BReaper%3Cbr%2F%3ETx%20Collection%5D%0A%20%20%20%20%20%20%20%20SUB%5BSubmitter%3Cbr%2F%3EDA%20Submission%5D%0A%20%20%20%20%20%20%20%20SYN%5BSyncer%3Cbr%2F%3EBlock%20Sync%5D%0A%20%20%20%20%20%20%20%20CAC%5BCache%20Manager%3Cbr%2F%3EState%20Tracking%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20External%20Components%0A%20%20%20%20%20%20%20%20CEXE%5BCore%20Executor%5D%0A%20%20%20%20%20%20%20%20SEQ%5BSequencer%5D%0A%20%20%20%20%20%20%20%20DA%5BDA%20Layer%5D%0A%20%20%20%20%20%20%20%20HS%5BHeader%20Store%2FP2P%5D%0A%20%20%20%20%20%20%20%20DS%5BData%20Store%2FP2P%5D%0A%20%20%20%20%20%20%20%20ST%5BLocal%20Store%5D%0A%20%20%20%20end%0A%0A%20%20%20%20REA%20--%3E%7CGetTxs%7C%20CEXE%0A%20%20%20%20REA%20--%3E%7CSubmitBatch%7C%20SEQ%0A%20%20%20%20REA%20--%3E%7CNotify%7C%20EXE%0A%0A%20%20%20%20EXE%20--%3E%7CCreateBlock%7C%20CEXE%0A%20%20%20%20EXE%20--%3E%7CApplyBlock%7C%20CEXE%0A%20%20%20%20EXE%20--%3E%7CSave%7C%20ST%0A%20%20%20%20EXE%20--%3E%7CTrack%7C%20CAC%0A%0A%20%20%20%20EXE%20--%3E%7CHeaders%7C%20SUB%0A%20%20%20%20EXE%20--%3E%7CData%7C%20SUB%0A%20%20%20%20SUB%20--%3E%7CSubmit%7C%20DA%0A%20%20%20%20SUB%20--%3E%7CTrack%7C%20CAC%0A%0A%20%20%20%20DA%20--%3E%7CRetrieve%7C%20SYN%0A%20%20%20%20HS%20--%3E%7CHeaders%7C%20SYN%0A%20%20%20%20DS%20--%3E%7CData%7C%20SYN%0A%0A%20%20%20%20SYN%20--%3E%7CApplyBlock%7C%20CEXE%0A%20%20%20%20SYN%20--%3E%7CSave%7C%20ST%0A%20%20%20%20SYN%20--%3E%7CTrack%7C%20CAC%0A%20%20%20%20SYN%20--%3E%7CSetFinal%7C%20CEXE%0A%0A%20%20%20%20CAC%20--%3E%7CCoordinate%7C%20EXE%0A%20%20%20%20CAC%20--%3E%7CCoordinate%7C%20SUB%0A%20%20%20%20CAC%20--%3E%7CCoordinate%7C%20SYN%0A"})]),fallback:t(()=>e[1]||(e[1]=[a(" Loading... ")])),_:1})),e[10]||(e[10]=r(`<h2 id="protocol-component-description" tabindex="-1">Protocol/Component Description <a class="header-anchor" href="#protocol-component-description" aria-label="Permalink to &quot;Protocol/Component Description&quot;">​</a></h2><p>The block components are initialized based on the node type:</p><h3 id="aggregator-components" tabindex="-1">Aggregator Components <a class="header-anchor" href="#aggregator-components" aria-label="Permalink to &quot;Aggregator Components&quot;">​</a></h3><p>Aggregator nodes create all components for full block production and synchronization capabilities:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">components </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewAggregatorComponents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config,      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    genesis,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Genesis state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    store,       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Local datastore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Core executor for state transitions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sequencer,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Sequencer client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    da,          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DA client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    signer,      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Block signing key</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // P2P stores and options...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="non-aggregator-components" tabindex="-1">Non-Aggregator Components <a class="header-anchor" href="#non-aggregator-components" aria-label="Permalink to &quot;Non-Aggregator Components&quot;">​</a></h3><p>Non-aggregator full nodes create only synchronization components:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">components </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewSyncComponents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config,      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    genesis,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Genesis state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    store,       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Local datastore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Core executor for state transitions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    da,          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DA client</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // P2P stores and options... (no signer or sequencer needed)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="component-initialization-parameters" tabindex="-1">Component Initialization Parameters <a class="header-anchor" href="#component-initialization-parameters" aria-label="Permalink to &quot;Component Initialization Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>Name</strong></th><th><strong>Type</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>signing key</td><td>crypto.PrivKey</td><td>used for signing blocks and data after creation</td></tr><tr><td>config</td><td>config.BlockManagerConfig</td><td>block manager configurations (see config options below)</td></tr><tr><td>genesis</td><td>*cmtypes.GenesisDoc</td><td>initialize the block manager with genesis state (genesis configuration defined in <code>config/genesis.json</code> file under the app directory)</td></tr><tr><td>store</td><td>store.Store</td><td>local datastore for storing chain blocks and states (default local store path is <code>$db_dir/evolve</code> and <code>db_dir</code> specified in the <code>config.yaml</code> file under the app directory)</td></tr><tr><td>mempool, proxyapp, eventbus</td><td>mempool.Mempool, proxy.AppConnConsensus, *cmtypes.EventBus</td><td>for initializing the executor (state transition function). mempool is also used in the manager to check for availability of transactions for lazy block production</td></tr><tr><td>dalc</td><td>da.DAClient</td><td>the data availability light client used to submit and retrieve blocks to DA network</td></tr><tr><td>headerStore</td><td>*goheaderstore.Store[*types.SignedHeader]</td><td>to store and retrieve block headers gossiped over the P2P network</td></tr><tr><td>dataStore</td><td>*goheaderstore.Store[*types.SignedData]</td><td>to store and retrieve block data gossiped over the P2P network</td></tr><tr><td>signaturePayloadProvider</td><td>types.SignaturePayloadProvider</td><td>optional custom provider for header signature payloads</td></tr><tr><td>sequencer</td><td>core.Sequencer</td><td>used to retrieve batches of transactions from the sequencing layer</td></tr><tr><td>reaper</td><td>*Reaper</td><td>component that periodically retrieves transactions from the executor and submits them to the sequencer</td></tr></tbody></table><h3 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration Options&quot;">​</a></h3><p>The block components share a common configuration:</p><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>BlockTime</td><td>time.Duration</td><td>time interval used for block production and block retrieval from block store (<a href="https://github.com/evstack/ev-node/blob/main/pkg/config/defaults.go#L50" target="_blank" rel="noreferrer"><code>defaultBlockTime</code></a>)</td></tr><tr><td>DABlockTime</td><td>time.Duration</td><td>time interval used for both block publication to DA network and block retrieval from DA network (<a href="https://github.com/evstack/ev-node/blob/main/pkg/config/defaults.go#L59" target="_blank" rel="noreferrer"><code>defaultDABlockTime</code></a>)</td></tr><tr><td>DAStartHeight</td><td>uint64</td><td>block retrieval from DA network starts from this height</td></tr><tr><td>LazyBlockInterval</td><td>time.Duration</td><td>time interval used for block production in lazy aggregator mode even when there are no transactions (<a href="https://github.com/evstack/ev-node/blob/main/pkg/config/defaults.go#L52" target="_blank" rel="noreferrer"><code>defaultLazyBlockTime</code></a>)</td></tr><tr><td>LazyMode</td><td>bool</td><td>when set to true, enables lazy aggregation mode which produces blocks only when transactions are available or at LazyBlockInterval intervals</td></tr><tr><td>MaxPendingHeadersAndData</td><td>uint64</td><td>maximum number of pending headers and data blocks before pausing block production (default: 100)</td></tr><tr><td>MaxSubmitAttempts</td><td>int</td><td>maximum number of retry attempts for DA submissions (default: 30)</td></tr><tr><td>MempoolTTL</td><td>int</td><td>number of blocks to wait when transaction is stuck in DA mempool (default: 25)</td></tr><tr><td>GasPrice</td><td>float64</td><td>gas price for DA submissions (-1 for automatic/default)</td></tr><tr><td>GasMultiplier</td><td>float64</td><td>multiplier for gas price on DA submission retries (default: 1.3)</td></tr><tr><td>Namespace</td><td>da.Namespace</td><td>DA namespace ID for block submissions (deprecated, use HeaderNamespace and DataNamespace instead)</td></tr><tr><td>HeaderNamespace</td><td>string</td><td>namespace ID for submitting headers to DA layer (automatically encoded by the node)</td></tr><tr><td>DataNamespace</td><td>string</td><td>namespace ID for submitting data to DA layer (automatically encoded by the node)</td></tr></tbody></table><h3 id="block-production-executor-component" tabindex="-1">Block Production (Executor Component) <a class="header-anchor" href="#block-production-executor-component" aria-label="Permalink to &quot;Block Production (Executor Component)&quot;">​</a></h3><p>When the full node is operating as an aggregator, the <strong>Executor component</strong> handles block production. There are two modes of block production, which can be specified in the block manager configurations: <code>normal</code> and <code>lazy</code>.</p><p>In <code>normal</code> mode, the block manager runs a timer, which is set to the <code>BlockTime</code> configuration parameter, and continuously produces blocks at <code>BlockTime</code> intervals.</p><p>In <code>lazy</code> mode, the block manager implements a dual timer mechanism:</p>`,17)),(o(),n(s,null,{default:t(()=>[l(i,{id:"mermaid-398",class:"mermaid",graph:"flowchart%20LR%0A%20%20%20%20subgraph%20Lazy%20Aggregation%20Mode%0A%20%20%20%20%20%20%20%20R%5BReaper%5D%20--%3E%7CGetTxs%7C%20CE%5BCore%20Executor%5D%0A%20%20%20%20%20%20%20%20CE%20--%3E%7CTxs%20Available%7C%20R%0A%20%20%20%20%20%20%20%20R%20--%3E%7CSubmit%20to%20Sequencer%7C%20S%5BSequencer%5D%0A%20%20%20%20%20%20%20%20R%20--%3E%7CNotifyNewTransactions%7C%20N%5BtxNotifyCh%5D%0A%0A%20%20%20%20%20%20%20%20N%20--%3E%20E%7BExecutor%20Logic%7D%0A%20%20%20%20%20%20%20%20BT%5BblockTimer%5D%20--%3E%20E%0A%20%20%20%20%20%20%20%20LT%5BlazyTimer%5D%20--%3E%20E%0A%0A%20%20%20%20%20%20%20%20E%20--%3E%7CTxs%20Available%7C%20P1%5BProduce%20Block%20with%20Txs%5D%0A%20%20%20%20%20%20%20%20E%20--%3E%7CNo%20Txs%20%26%20LazyTimer%7C%20P2%5BProduce%20Empty%20Block%5D%0A%0A%20%20%20%20%20%20%20%20P1%20--%3E%20B%5BBlock%20Creation%5D%0A%20%20%20%20%20%20%20%20P2%20--%3E%20B%0A%20%20%20%20end%0A"})]),fallback:t(()=>e[2]||(e[2]=[a(" Loading... ")])),_:1})),e[11]||(e[11]=r('<ol><li>A <code>blockTimer</code> that triggers block production at regular intervals when transactions are available</li><li>A <code>lazyTimer</code> that ensures blocks are produced at <code>LazyBlockInterval</code> intervals even during periods of inactivity</li></ol><p>The block manager starts building a block when any transaction becomes available in the mempool via a notification channel (<code>txNotifyCh</code>). When the <code>Reaper</code> detects new transactions, it calls <code>Manager.NotifyNewTransactions()</code>, which performs a non-blocking signal on this channel. The block manager also produces empty blocks at regular intervals to maintain consistency with the DA layer, ensuring a 1:1 mapping between DA layer blocks and execution layer blocks.</p><p>The Reaper component periodically retrieves transactions from the core executor and submits them to the sequencer. It runs independently and notifies the Executor component when new transactions are available, enabling responsive block production in lazy mode.</p><h4 id="building-the-block" tabindex="-1">Building the Block <a class="header-anchor" href="#building-the-block" aria-label="Permalink to &quot;Building the Block&quot;">​</a></h4><p>The Executor component of aggregator nodes performs the following steps to produce a block:</p>',5)),(o(),n(s,null,{default:t(()=>[l(i,{id:"mermaid-423",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20A%5BTimer%20Trigger%20%2F%20Transaction%20Notification%5D%20--%3E%20B%5BRetrieve%20Batch%5D%0A%20%20%20%20B%20--%3E%20C%7BTransactions%20Available%3F%7D%0A%20%20%20%20C%20--%3E%7CYes%7C%20D%5BCreate%20Block%20with%20Txs%5D%0A%20%20%20%20C%20--%3E%7CNo%7C%20E%5BCreate%20Empty%20Block%5D%0A%20%20%20%20D%20--%3E%20F%5BGenerate%20Header%20%26%20Data%5D%0A%20%20%20%20E%20--%3E%20F%0A%20%20%20%20F%20--%3E%20G%5BSign%20Header%20%E2%86%92%20SignedHeader%5D%0A%20%20%20%20F%20--%3E%20H%5BSign%20Data%20%E2%86%92%20SignedData%5D%0A%20%20%20%20G%20--%3E%20I%5BApply%20Block%5D%0A%20%20%20%20H%20--%3E%20I%0A%20%20%20%20I%20--%3E%20J%5BUpdate%20State%5D%0A%20%20%20%20J%20--%3E%20K%5BSave%20to%20Store%5D%0A%20%20%20%20K%20--%3E%20L%5BAdd%20to%20pendingHeaders%5D%0A%20%20%20%20K%20--%3E%20M%5BAdd%20to%20pendingData%5D%0A%20%20%20%20L%20--%3E%20N%5BBroadcast%20Header%20to%20P2P%5D%0A%20%20%20%20M%20--%3E%20O%5BBroadcast%20Data%20to%20P2P%5D%0A"})]),fallback:t(()=>e[3]||(e[3]=[a(" Loading... ")])),_:1})),e[12]||(e[12]=r('<ul><li>Retrieve a batch of transactions using <code>retrieveBatch()</code> which interfaces with the sequencer</li><li>Call <code>CreateBlock</code> using executor with the retrieved transactions</li><li>Create separate header and data structures from the block</li><li>Sign the header using <code>signing key</code> to generate <code>SignedHeader</code></li><li>Sign the data using <code>signing key</code> to generate <code>SignedData</code> (if transactions exist)</li><li>Call <code>ApplyBlock</code> using executor to generate an updated state</li><li>Save the block, validators, and updated state to local store</li><li>Add the newly generated header to <code>pendingHeaders</code> queue</li><li>Add the newly generated data to <code>pendingData</code> queue (if not empty)</li><li>Publish the newly generated header and data to channels to notify other components of the sequencer node (such as block and header gossip)</li></ul><p>Note: When no transactions are available, the block manager creates blocks with empty data using a special <code>dataHashForEmptyTxs</code> marker. The header and data separation architecture allows headers and data to be submitted and retrieved independently from the DA layer.</p><h3 id="block-publication-to-da-network-submitter-component" tabindex="-1">Block Publication to DA Network (Submitter Component) <a class="header-anchor" href="#block-publication-to-da-network-submitter-component" aria-label="Permalink to &quot;Block Publication to DA Network (Submitter Component)&quot;">​</a></h3><p>The <strong>Submitter component</strong> of aggregator nodes implements separate submission loops for headers and data, both operating at <code>DABlockTime</code> intervals. Headers and data are submitted to different namespaces to improve scalability and allow for more flexible data availability strategies:</p>',4)),(o(),n(s,null,{default:t(()=>[l(i,{id:"mermaid-485",class:"mermaid",graph:"flowchart%20LR%0A%20%20%20%20subgraph%20Header%20Submission%0A%20%20%20%20%20%20%20%20H1%5BpendingHeaders%20Queue%5D%20--%3E%20H2%5BHeader%20Submission%20Loop%5D%0A%20%20%20%20%20%20%20%20H2%20--%3E%20H3%5BMarshal%20to%20Protobuf%5D%0A%20%20%20%20%20%20%20%20H3%20--%3E%20H4%5BSubmit%20to%20DA%5D%0A%20%20%20%20%20%20%20%20H4%20--%3E%7CSuccess%7C%20H5%5BRemove%20from%20Queue%5D%0A%20%20%20%20%20%20%20%20H4%20--%3E%7CFailure%7C%20H6%5BKeep%20in%20Queue%20%26%20Retry%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20Data%20Submission%0A%20%20%20%20%20%20%20%20D1%5BpendingData%20Queue%5D%20--%3E%20D2%5BData%20Submission%20Loop%5D%0A%20%20%20%20%20%20%20%20D2%20--%3E%20D3%5BMarshal%20to%20Protobuf%5D%0A%20%20%20%20%20%20%20%20D3%20--%3E%20D4%5BSubmit%20to%20DA%5D%0A%20%20%20%20%20%20%20%20D4%20--%3E%7CSuccess%7C%20D5%5BRemove%20from%20Queue%5D%0A%20%20%20%20%20%20%20%20D4%20--%3E%7CFailure%7C%20D6%5BKeep%20in%20Queue%20%26%20Retry%5D%0A%20%20%20%20end%0A%0A%20%20%20%20H2%20-.-%3E%7CDABlockTime%7C%20H2%0A%20%20%20%20D2%20-.-%3E%7CDABlockTime%7C%20D2%0A"})]),fallback:t(()=>e[4]||(e[4]=[a(" Loading... ")])),_:1})),e[13]||(e[13]=r('<h4 id="header-submission-loop" tabindex="-1">Header Submission Loop <a class="header-anchor" href="#header-submission-loop" aria-label="Permalink to &quot;Header Submission Loop&quot;">​</a></h4><p>The <code>HeaderSubmissionLoop</code> manages the submission of signed headers to the DA network:</p><ul><li>Retrieves pending headers from the <code>pendingHeaders</code> queue</li><li>Marshals headers to protobuf format</li><li>Submits to DA using the generic <code>submitToDA</code> helper with the configured <code>HeaderNamespace</code></li><li>On success, removes submitted headers from the pending queue</li><li>On failure, headers remain in the queue for retry</li></ul><h4 id="data-submission-loop" tabindex="-1">Data Submission Loop <a class="header-anchor" href="#data-submission-loop" aria-label="Permalink to &quot;Data Submission Loop&quot;">​</a></h4><p>The <code>DataSubmissionLoop</code> manages the submission of signed data to the DA network:</p><ul><li>Retrieves pending data from the <code>pendingData</code> queue</li><li>Marshals data to protobuf format</li><li>Submits to DA using the generic <code>submitToDA</code> helper with the configured <code>DataNamespace</code></li><li>On success, removes submitted data from the pending queue</li><li>On failure, data remains in the queue for retry</li></ul><h4 id="generic-submission-logic" tabindex="-1">Generic Submission Logic <a class="header-anchor" href="#generic-submission-logic" aria-label="Permalink to &quot;Generic Submission Logic&quot;">​</a></h4><p>Both loops use a shared <code>submitToDA</code> function that provides:</p><ul><li>Namespace-specific submission based on header or data type</li><li>Retry logic with configurable maximum attempts via <code>MaxSubmitAttempts</code> configuration</li><li>Exponential backoff starting at <code>initialBackoff</code> (100ms), doubling each attempt, capped at <code>DABlockTime</code></li><li>Gas price management with <code>GasMultiplier</code> applied on retries using a centralized <code>retryStrategy</code></li><li>Recursive batch splitting for handling &quot;too big&quot; DA submissions that exceed blob size limits</li><li>Comprehensive error handling for different DA submission failure types (mempool issues, context cancellation, blob size limits)</li><li>Comprehensive metrics tracking for attempts, successes, and failures</li><li>Context-aware cancellation support</li></ul><h4 id="retry-strategy-and-error-handling" tabindex="-1">Retry Strategy and Error Handling <a class="header-anchor" href="#retry-strategy-and-error-handling" aria-label="Permalink to &quot;Retry Strategy and Error Handling&quot;">​</a></h4><p>The DA submission system implements sophisticated retry logic using a centralized <code>retryStrategy</code> struct to handle various failure scenarios:</p>',11)),(o(),n(s,null,{default:t(()=>[l(i,{id:"mermaid-606",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20A%5BSubmit%20to%20DA%5D%20--%3E%20B%7BSubmission%20Result%7D%0A%20%20%20%20B%20--%3E%7CSuccess%7C%20C%5BReset%20Backoff%20%26%20Adjust%20Gas%20Price%20Down%5D%0A%20%20%20%20B%20--%3E%7CToo%20Big%7C%20D%7BBatch%20Size%20%3E%201%3F%7D%0A%20%20%20%20B%20--%3E%7CMempool%2FNot%20Included%7C%20E%5BMempool%20Backoff%20Strategy%5D%0A%20%20%20%20B%20--%3E%7CContext%20Canceled%7C%20F%5BStop%20Submission%5D%0A%20%20%20%20B%20--%3E%7COther%20Error%7C%20G%5BExponential%20Backoff%5D%0A%0A%20%20%20%20D%20--%3E%7CYes%7C%20H%5BRecursive%20Batch%20Splitting%5D%0A%20%20%20%20D%20--%3E%7CNo%7C%20I%5BSkip%20Single%20Item%20-%20Cannot%20Split%5D%0A%0A%20%20%20%20E%20--%3E%20J%5BSet%20Backoff%20%3D%20MempoolTTL%20*%20BlockTime%5D%0A%20%20%20%20E%20--%3E%20K%5BMultiply%20Gas%20Price%20by%20GasMultiplier%5D%0A%0A%20%20%20%20G%20--%3E%20L%5BDouble%20Backoff%20Time%5D%0A%20%20%20%20G%20--%3E%20M%5BCap%20at%20MaxBackoff%20-%20BlockTime%5D%0A%0A%20%20%20%20H%20--%3E%20N%5BSplit%20into%20Two%20Halves%5D%0A%20%20%20%20N%20--%3E%20O%5BSubmit%20First%20Half%5D%0A%20%20%20%20O%20--%3E%20P%5BSubmit%20Second%20Half%5D%0A%20%20%20%20P%20--%3E%20Q%7BBoth%20Halves%20Processed%3F%7D%0A%20%20%20%20Q%20--%3E%7CYes%7C%20R%5BCombine%20Results%5D%0A%20%20%20%20Q%20--%3E%7CNo%7C%20S%5BHandle%20Partial%20Success%5D%0A%0A%20%20%20%20C%20--%3E%20T%5BUpdate%20Pending%20Queues%5D%0A%20%20%20%20T%20--%3E%20U%5BPost-Submit%20Actions%5D%0A"})]),fallback:t(()=>e[5]||(e[5]=[a(" Loading... ")])),_:1})),e[14]||(e[14]=r('<h5 id="retry-strategy-features" tabindex="-1">Retry Strategy Features <a class="header-anchor" href="#retry-strategy-features" aria-label="Permalink to &quot;Retry Strategy Features&quot;">​</a></h5><ul><li><strong>Centralized State Management</strong>: The <code>retryStrategy</code> struct manages attempt counts, backoff timing, and gas price adjustments</li><li><strong>Multiple Backoff Types</strong>: <ul><li>Exponential backoff for general failures (doubles each attempt, capped at <code>BlockTime</code>)</li><li>Mempool-specific backoff (waits <code>MempoolTTL * BlockTime</code> for stuck transactions)</li><li>Success-based backoff reset with gas price reduction</li></ul></li><li><strong>Gas Price Management</strong>: <ul><li>Increases gas price by <code>GasMultiplier</code> on mempool failures</li><li>Decreases gas price after successful submissions (bounded by initial price)</li><li>Supports automatic gas price detection (<code>-1</code> value)</li></ul></li><li><strong>Intelligent Batch Splitting</strong>: <ul><li>Recursively splits batches that exceed DA blob size limits</li><li>Handles partial submissions within split batches</li><li>Prevents infinite recursion with proper base cases</li></ul></li><li><strong>Comprehensive Error Classification</strong>: <ul><li><code>StatusSuccess</code>: Full or partial successful submission</li><li><code>StatusTooBig</code>: Triggers batch splitting logic</li><li><code>StatusNotIncludedInBlock</code>/<code>StatusAlreadyInMempool</code>: Mempool-specific handling</li><li><code>StatusContextCanceled</code>: Graceful shutdown support</li><li>Other errors: Standard exponential backoff</li></ul></li></ul><p>The manager enforces a limit on pending headers and data through <code>MaxPendingHeadersAndData</code> configuration. When this limit is reached, block production pauses to prevent unbounded growth of the pending queues.</p><h3 id="block-retrieval-from-da-network-syncer-component" tabindex="-1">Block Retrieval from DA Network (Syncer Component) <a class="header-anchor" href="#block-retrieval-from-da-network-syncer-component" aria-label="Permalink to &quot;Block Retrieval from DA Network (Syncer Component)&quot;">​</a></h3><p>The <strong>Syncer component</strong> implements a <code>RetrieveLoop</code> through its DARetriever that regularly pulls headers and data from the DA network. The retrieval process supports both legacy single-namespace mode (for backward compatibility) and the new separate namespace mode:</p>',5)),(o(),n(s,null,{default:t(()=>[l(i,{id:"mermaid-724",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20A%5BStart%20RetrieveLoop%5D%20--%3E%20B%5BGet%20DA%20Height%5D%0A%20%20%20%20B%20--%3E%20C%7BDABlockTime%20Timer%7D%0A%20%20%20%20C%20--%3E%20D%5BGetHeightPair%20from%20DA%5D%0A%20%20%20%20D%20--%3E%20E%7BResult%3F%7D%0A%20%20%20%20E%20--%3E%7CSuccess%7C%20F%5BValidate%20Signatures%5D%0A%20%20%20%20E%20--%3E%7CNotFound%7C%20G%5BIncrement%20Height%5D%0A%20%20%20%20E%20--%3E%7CError%7C%20H%5BRetry%20Logic%5D%0A%0A%20%20%20%20F%20--%3E%20I%5BCheck%20Sequencer%20Info%5D%0A%20%20%20%20I%20--%3E%20J%5BMark%20DA%20Included%5D%0A%20%20%20%20J%20--%3E%20K%5BSend%20to%20Sync%5D%0A%20%20%20%20K%20--%3E%20L%5BIncrement%20Height%5D%0A%20%20%20%20L%20--%3E%20M%5BImmediate%20Next%20Retrieval%5D%0A%0A%20%20%20%20G%20--%3E%20C%0A%20%20%20%20H%20--%3E%20N%7BRetries%20%3C%2010%3F%7D%0A%20%20%20%20N%20--%3E%7CYes%7C%20O%5BWait%20100ms%5D%0A%20%20%20%20N%20--%3E%7CNo%7C%20P%5BLog%20Error%20%26%20Stall%5D%0A%20%20%20%20O%20--%3E%20D%0A%20%20%20%20M%20--%3E%20D%0A"})]),fallback:t(()=>e[6]||(e[6]=[a(" Loading... ")])),_:1})),e[15]||(e[15]=r('<h4 id="retrieval-process" tabindex="-1">Retrieval Process <a class="header-anchor" href="#retrieval-process" aria-label="Permalink to &quot;Retrieval Process&quot;">​</a></h4><ol><li><p><strong>Height Management</strong>: Starts from the latest of:</p><ul><li>DA height from the last state in local store</li><li><code>DAStartHeight</code> configuration parameter</li><li>Maintains and increments <code>daHeight</code> counter after successful retrievals</li></ul></li><li><p><strong>Retrieval Mechanism</strong>:</p><ul><li>Executes at <code>DABlockTime</code> intervals</li><li>Implements namespace migration support: <ul><li>First attempts legacy namespace retrieval if migration not completed</li><li>Falls back to separate header and data namespace retrieval</li><li>Tracks migration status to optimize future retrievals</li></ul></li><li>Retrieves from separate namespaces: <ul><li>Headers from <code>HeaderNamespace</code></li><li>Data from <code>DataNamespace</code></li></ul></li><li>Combines results from both namespaces</li><li>Handles three possible outcomes: <ul><li><code>Success</code>: Process retrieved header and/or data</li><li><code>NotFound</code>: No chain block at this DA height (normal case)</li><li><code>Error</code>: Retry with backoff</li></ul></li></ul></li><li><p><strong>Error Handling</strong>:</p><ul><li>Implements retry logic with 100ms delay between attempts</li><li>After 10 retries, logs error and stalls retrieval</li><li>Does not increment <code>daHeight</code> on persistent errors</li></ul></li><li><p><strong>Processing Retrieved Blocks</strong>:</p><ul><li>Validates header and data signatures</li><li>Checks sequencer information</li><li>Marks blocks as DA included in caches</li><li>Sends to sync goroutine for state update</li><li>Successful processing triggers immediate next retrieval without waiting for timer</li><li>Updates namespace migration status when appropriate: <ul><li>Marks migration complete when data is found in new namespaces</li><li>Persists migration state to avoid future legacy checks</li></ul></li></ul></li></ol><h4 id="header-and-data-caching" tabindex="-1">Header and Data Caching <a class="header-anchor" href="#header-and-data-caching" aria-label="Permalink to &quot;Header and Data Caching&quot;">​</a></h4><p>The retrieval system uses persistent caches for both headers and data:</p><ul><li>Prevents duplicate processing</li><li>Tracks DA inclusion status</li><li>Supports out-of-order block arrival</li><li>Enables efficient sync from P2P and DA sources</li><li>Maintains namespace migration state for optimized retrieval</li></ul><p>For more details on DA integration, see the <a href="./da">Data Availability specification</a>.</p><h4 id="out-of-order-chain-blocks-on-da" tabindex="-1">Out-of-Order Chain Blocks on DA <a class="header-anchor" href="#out-of-order-chain-blocks-on-da" aria-label="Permalink to &quot;Out-of-Order Chain Blocks on DA&quot;">​</a></h4><p>Evolve should support blocks arriving out-of-order on DA, like so: <img src="'+p+'" alt="out-of-order blocks"></p><h4 id="termination-condition" tabindex="-1">Termination Condition <a class="header-anchor" href="#termination-condition" aria-label="Permalink to &quot;Termination Condition&quot;">​</a></h4><p>If the sequencer double-signs two blocks at the same height, evidence of the fault should be posted to DA. Evolve full nodes should process the longest valid chain up to the height of the fault evidence, and terminate. See diagram: <img src="'+m+'" alt="termination condition"></p><h3 id="block-sync-service-syncer-component" tabindex="-1">Block Sync Service (Syncer Component) <a class="header-anchor" href="#block-sync-service-syncer-component" aria-label="Permalink to &quot;Block Sync Service (Syncer Component)&quot;">​</a></h3><p>The <strong>Syncer component</strong> manages the synchronization of headers and data through its P2PHandler and coordination with the Cache Manager:</p><h4 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h4><ul><li><strong>Header Store</strong>: Uses <code>goheader.Store[*types.SignedHeader]</code> for header management</li><li><strong>Data Store</strong>: Uses <code>goheader.Store[*types.SignedData]</code> for data management</li><li><strong>Separation of Concerns</strong>: Headers and data are handled independently, supporting the header/data separation architecture</li></ul><h4 id="synchronization-flow" tabindex="-1">Synchronization Flow <a class="header-anchor" href="#synchronization-flow" aria-label="Permalink to &quot;Synchronization Flow&quot;">​</a></h4><ol><li><strong>Header Sync</strong>: Headers created by the sequencer are sent to the header store for P2P gossip</li><li><strong>Data Sync</strong>: Data blocks are sent to the data store for P2P gossip</li><li><strong>Cache Integration</strong>: Both header and data caches track seen items to prevent duplicates</li><li><strong>DA Inclusion Tracking</strong>: Separate tracking for header and data DA inclusion status</li></ol><h3 id="block-publication-to-p2p-network-executor-component" tabindex="-1">Block Publication to P2P network (Executor Component) <a class="header-anchor" href="#block-publication-to-p2p-network-executor-component" aria-label="Permalink to &quot;Block Publication to P2P network (Executor Component)&quot;">​</a></h3><p>The <strong>Executor component</strong> of aggregator nodes publishes headers and data separately to the P2P network:</p><h4 id="header-publication" tabindex="-1">Header Publication <a class="header-anchor" href="#header-publication" aria-label="Permalink to &quot;Header Publication&quot;">​</a></h4><ul><li>Headers are sent through the header broadcast channel</li><li>Written to the header store for P2P gossip</li><li>Broadcast to network peers via header sync service</li></ul><h4 id="data-publication" tabindex="-1">Data Publication <a class="header-anchor" href="#data-publication" aria-label="Permalink to &quot;Data Publication&quot;">​</a></h4><ul><li>Data blocks are sent through the data broadcast channel</li><li>Written to the data store for P2P gossip</li><li>Broadcast to network peers via data sync service</li></ul><p>Non-sequencer full nodes receive headers and data through the P2P sync service and do not publish blocks themselves.</p><h3 id="block-retrieval-from-p2p-network-syncer-component" tabindex="-1">Block Retrieval from P2P network (Syncer Component) <a class="header-anchor" href="#block-retrieval-from-p2p-network-syncer-component" aria-label="Permalink to &quot;Block Retrieval from P2P network (Syncer Component)&quot;">​</a></h3><p>The <strong>Syncer component</strong> retrieves headers and data separately from P2P stores through its P2PHandler:</p><h4 id="header-store-retrieval-loop" tabindex="-1">Header Store Retrieval Loop <a class="header-anchor" href="#header-store-retrieval-loop" aria-label="Permalink to &quot;Header Store Retrieval Loop&quot;">​</a></h4><p>The <code>HeaderStoreRetrieveLoop</code>:</p><ul><li>Operates at <code>BlockTime</code> intervals via <code>headerStoreCh</code> signals</li><li>Tracks <code>headerStoreHeight</code> for the last retrieved header</li><li>Retrieves all headers between last height and current store height</li><li>Validates sequencer information using <code>assertUsingExpectedSingleSequencer</code></li><li>Marks headers as &quot;seen&quot; in the header cache</li><li>Sends headers to sync goroutine via <code>headerInCh</code></li></ul><h4 id="data-store-retrieval-loop" tabindex="-1">Data Store Retrieval Loop <a class="header-anchor" href="#data-store-retrieval-loop" aria-label="Permalink to &quot;Data Store Retrieval Loop&quot;">​</a></h4><p>The <code>DataStoreRetrieveLoop</code>:</p><ul><li>Operates at <code>BlockTime</code> intervals via <code>dataStoreCh</code> signals</li><li>Tracks <code>dataStoreHeight</code> for the last retrieved data</li><li>Retrieves all data blocks between last height and current store height</li><li>Validates data signatures using <code>assertValidSignedData</code></li><li>Marks data as &quot;seen&quot; in the data cache</li><li>Sends data to sync goroutine via <code>dataInCh</code></li></ul><h4 id="soft-confirmations" tabindex="-1">Soft Confirmations <a class="header-anchor" href="#soft-confirmations" aria-label="Permalink to &quot;Soft Confirmations&quot;">​</a></h4><p>Headers and data retrieved from P2P are marked as soft confirmed until both:</p><ol><li>The corresponding header is seen on the DA layer</li><li>The corresponding data is seen on the DA layer</li></ol><p>Once both conditions are met, the block is marked as DA-included.</p><h4 id="about-soft-confirmations-and-da-inclusions" tabindex="-1">About Soft Confirmations and DA Inclusions <a class="header-anchor" href="#about-soft-confirmations-and-da-inclusions" aria-label="Permalink to &quot;About Soft Confirmations and DA Inclusions&quot;">​</a></h4><p>The block manager retrieves blocks from both the P2P network and the underlying DA network because the blocks are available in the P2P network faster and DA retrieval is slower (e.g., 1 second vs 6 seconds). The blocks retrieved from the P2P network are only marked as soft confirmed until the DA retrieval succeeds on those blocks and they are marked DA-included. DA-included blocks are considered to have a higher level of finality.</p><p><strong>DAIncluderLoop</strong>: The <code>DAIncluderLoop</code> is responsible for advancing the <code>DAIncludedHeight</code> by:</p><ul><li>Checking if blocks after the current height have both header and data marked as DA-included in caches</li><li>Stopping advancement if either header or data is missing for a height</li><li>Calling <code>SetFinal</code> on the executor when a block becomes DA-included</li><li>Storing the Evolve height to DA height mapping for tracking</li><li>Ensuring only blocks with both header and data present are considered DA-included</li></ul><h3 id="state-update-after-block-retrieval-syncer-component" tabindex="-1">State Update after Block Retrieval (Syncer Component) <a class="header-anchor" href="#state-update-after-block-retrieval-syncer-component" aria-label="Permalink to &quot;State Update after Block Retrieval (Syncer Component)&quot;">​</a></h3><p>The <strong>Syncer component</strong> uses a <code>SyncLoop</code> to coordinate state updates from blocks retrieved via P2P or DA networks:</p>',41)),(o(),n(s,null,{default:t(()=>[l(i,{id:"mermaid-1194",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20subgraph%20Sources%0A%20%20%20%20%20%20%20%20P1%5BP2P%20Header%20Store%5D%20--%3E%20H%5BheaderInCh%5D%0A%20%20%20%20%20%20%20%20P2%5BP2P%20Data%20Store%5D%20--%3E%20D%5BdataInCh%5D%0A%20%20%20%20%20%20%20%20DA1%5BDA%20Header%20Retrieval%5D%20--%3E%20H%0A%20%20%20%20%20%20%20%20DA2%5BDA%20Data%20Retrieval%5D%20--%3E%20D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20SyncLoop%0A%20%20%20%20%20%20%20%20H%20--%3E%20S%5BSync%20Goroutine%5D%0A%20%20%20%20%20%20%20%20D%20--%3E%20S%0A%20%20%20%20%20%20%20%20S%20--%3E%20C%7BHeader%20%26%20Data%20for%20Same%20Height%3F%7D%0A%20%20%20%20%20%20%20%20C%20--%3E%7CYes%7C%20R%5BReconstruct%20Block%5D%0A%20%20%20%20%20%20%20%20C%20--%3E%7CNo%7C%20W%5BWait%20for%20Matching%20Pair%5D%0A%20%20%20%20%20%20%20%20R%20--%3E%20V%5BValidate%20Signatures%5D%0A%20%20%20%20%20%20%20%20V%20--%3E%20A%5BApplyBlock%5D%0A%20%20%20%20%20%20%20%20A%20--%3E%20CM%5BCommit%5D%0A%20%20%20%20%20%20%20%20CM%20--%3E%20ST%5BStore%20Block%20%26%20State%5D%0A%20%20%20%20%20%20%20%20ST%20--%3E%20F%7BDA%20Included%3F%7D%0A%20%20%20%20%20%20%20%20F%20--%3E%7CYes%7C%20FN%5BSetFinal%5D%0A%20%20%20%20%20%20%20%20F%20--%3E%7CNo%7C%20E%5BEnd%5D%0A%20%20%20%20%20%20%20%20FN%20--%3E%20U%5BUpdate%20DA%20Height%5D%0A%20%20%20%20end%0A"})]),fallback:t(()=>e[7]||(e[7]=[a(" Loading... ")])),_:1})),e[16]||(e[16]=r('<h4 id="sync-loop-architecture" tabindex="-1">Sync Loop Architecture <a class="header-anchor" href="#sync-loop-architecture" aria-label="Permalink to &quot;Sync Loop Architecture&quot;">​</a></h4><p>The <code>SyncLoop</code> processes headers and data from multiple sources:</p><ul><li>Headers from <code>headerInCh</code> (P2P and DA sources)</li><li>Data from <code>dataInCh</code> (P2P and DA sources)</li><li>Maintains caches to track processed items</li><li>Ensures ordered processing by height</li></ul><h4 id="state-update-process" tabindex="-1">State Update Process <a class="header-anchor" href="#state-update-process" aria-label="Permalink to &quot;State Update Process&quot;">​</a></h4><p>When both header and data are available for a height:</p><ol><li><strong>Block Reconstruction</strong>: Combines header and data into a complete block</li><li><strong>Validation</strong>: Verifies header and data signatures match expectations</li><li><strong>ApplyBlock</strong>: <ul><li>Validates the block against current state</li><li>Executes transactions</li><li>Captures validator updates</li><li>Returns updated state</li></ul></li><li><strong>Commit</strong>: <ul><li>Persists execution results</li><li>Updates mempool by removing included transactions</li><li>Publishes block events</li></ul></li><li><strong>Storage</strong>: <ul><li>Stores the block, validators, and updated state</li><li>Updates last state in manager</li></ul></li><li><strong>Finalization</strong>: <ul><li>When block is DA-included, calls <code>SetFinal</code> on executor</li><li>Updates DA included height</li></ul></li></ol><h2 id="message-structure-communication-format" tabindex="-1">Message Structure/Communication Format <a class="header-anchor" href="#message-structure-communication-format" aria-label="Permalink to &quot;Message Structure/Communication Format&quot;">​</a></h2><h3 id="component-communication" tabindex="-1">Component Communication <a class="header-anchor" href="#component-communication" aria-label="Permalink to &quot;Component Communication&quot;">​</a></h3><p>The components communicate through well-defined interfaces:</p><h4 id="executor-↔-core-executor" tabindex="-1">Executor ↔ Core Executor <a class="header-anchor" href="#executor-↔-core-executor" aria-label="Permalink to &quot;Executor ↔ Core Executor&quot;">​</a></h4><ul><li><code>InitChain</code>: initializes the chain state with the given genesis time, initial height, and chain ID using <code>InitChainSync</code> on the executor to obtain initial <code>appHash</code> and initialize the state.</li><li><code>CreateBlock</code>: prepares a block with transactions from the provided batch data.</li><li><code>ApplyBlock</code>: validates the block, executes the block (apply transactions), captures validator updates, and returns updated state.</li><li><code>SetFinal</code>: marks the block as final when both its header and data are confirmed on the DA layer.</li><li><code>GetTxs</code>: retrieves transactions from the application (used by Reaper component).</li></ul><h4 id="reaper-↔-sequencer" tabindex="-1">Reaper ↔ Sequencer <a class="header-anchor" href="#reaper-↔-sequencer" aria-label="Permalink to &quot;Reaper ↔ Sequencer&quot;">​</a></h4><ul><li><code>GetNextBatch</code>: retrieves the next batch of transactions to include in a block.</li><li><code>VerifyBatch</code>: validates that a batch came from the expected sequencer.</li></ul><h4 id="submitter-syncer-↔-da-layer" tabindex="-1">Submitter/Syncer ↔ DA Layer <a class="header-anchor" href="#submitter-syncer-↔-da-layer" aria-label="Permalink to &quot;Submitter/Syncer ↔ DA Layer&quot;">​</a></h4><ul><li><code>Submit</code>: submits headers or data blobs to the DA network.</li><li><code>Get</code>: retrieves headers or data blobs from the DA network.</li><li><code>GetHeightPair</code>: retrieves both header and data at a specific DA height.</li></ul><h2 id="assumptions-and-considerations" tabindex="-1">Assumptions and Considerations <a class="header-anchor" href="#assumptions-and-considerations" aria-label="Permalink to &quot;Assumptions and Considerations&quot;">​</a></h2><h3 id="component-architecture" tabindex="-1">Component Architecture <a class="header-anchor" href="#component-architecture" aria-label="Permalink to &quot;Component Architecture&quot;">​</a></h3><ul><li>The block package uses a modular component architecture instead of a monolithic manager</li><li>Components are created based on node type: aggregator nodes get all components, non-aggregator nodes only get synchronization components</li><li>Each component has a specific responsibility and communicates through well-defined interfaces</li><li>Components share a common Cache Manager for coordination and state tracking</li></ul><h3 id="initialization-and-state-management" tabindex="-1">Initialization and State Management <a class="header-anchor" href="#initialization-and-state-management" aria-label="Permalink to &quot;Initialization and State Management&quot;">​</a></h3><ul><li>Components load the initial state from the local store and use genesis if not found in the local store, when the node (re)starts</li><li>The default mode for aggregator nodes is normal (not lazy)</li><li>Components coordinate through channels and shared cache structures</li></ul><h3 id="block-production-executor-component-1" tabindex="-1">Block Production (Executor Component) <a class="header-anchor" href="#block-production-executor-component-1" aria-label="Permalink to &quot;Block Production (Executor Component)&quot;">​</a></h3><ul><li>The Executor can produce empty blocks</li><li>In lazy aggregation mode, the Executor maintains consistency with the DA layer by producing empty blocks at regular intervals, ensuring a 1:1 mapping between DA layer blocks and execution layer blocks</li><li>The lazy aggregation mechanism uses a dual timer approach: <ul><li>A <code>blockTimer</code> that triggers block production when transactions are available</li><li>A <code>lazyTimer</code> that ensures blocks are produced even during periods of inactivity</li></ul></li><li>Empty batches are handled differently in lazy mode - instead of discarding them, they are returned with the <code>ErrNoBatch</code> error, allowing the caller to create empty blocks with proper timestamps</li><li>Transaction notifications from the <code>Reaper</code> to the <code>Executor</code> are handled via a non-blocking notification channel (<code>txNotifyCh</code>) to prevent backpressure</li></ul><h3 id="da-submission-submitter-component" tabindex="-1">DA Submission (Submitter Component) <a class="header-anchor" href="#da-submission-submitter-component" aria-label="Permalink to &quot;DA Submission (Submitter Component)&quot;">​</a></h3><ul><li>The Submitter enforces <code>MaxPendingHeadersAndData</code> limit to prevent unbounded growth of pending queues during DA submission issues</li><li>Headers and data are submitted separately to the DA layer using different namespaces, supporting the header/data separation architecture</li><li>The Cache Manager uses persistent caches for headers and data to track seen items and DA inclusion status</li><li>Namespace migration is handled transparently by the Syncer, with automatic detection and state persistence to optimize future operations</li><li>The system supports backward compatibility with legacy single-namespace deployments while transitioning to separate namespaces</li><li>Gas price management in the Submitter includes automatic adjustment with <code>GasMultiplier</code> on DA submission retries</li></ul><h3 id="storage-and-persistence" tabindex="-1">Storage and Persistence <a class="header-anchor" href="#storage-and-persistence" aria-label="Permalink to &quot;Storage and Persistence&quot;">​</a></h3><ul><li>Components use persistent storage (disk) when the <code>root_dir</code> and <code>db_path</code> configuration parameters are specified in <code>config.yaml</code> file under the app directory. If these configuration parameters are not specified, the in-memory storage is used, which will not be persistent if the node stops</li><li>The Syncer does not re-apply blocks when they transition from soft confirmed to DA included status. The block is only marked DA included in the caches</li><li>Header and data stores use separate prefixes for isolation in the underlying database</li><li>The genesis <code>ChainID</code> is used to create separate <code>PubSubTopID</code>s for headers and data in go-header</li></ul><h3 id="p2p-and-synchronization" tabindex="-1">P2P and Synchronization <a class="header-anchor" href="#p2p-and-synchronization" aria-label="Permalink to &quot;P2P and Synchronization&quot;">​</a></h3><ul><li>Block sync over the P2P network works only when a full node is connected to the P2P network by specifying the initial seeds to connect to via <code>P2PConfig.Seeds</code> configuration parameter when starting the full node</li><li>Node&#39;s context is passed down to all components to support graceful shutdown and cancellation</li></ul><h3 id="architecture-design-decisions" tabindex="-1">Architecture Design Decisions <a class="header-anchor" href="#architecture-design-decisions" aria-label="Permalink to &quot;Architecture Design Decisions&quot;">​</a></h3><ul><li>The Executor supports custom signature payload providers for headers, enabling flexible signing schemes</li><li>The component architecture supports the separation of header and data structures in Evolve. This allows for expanding the sequencing scheme beyond single sequencing and enables the use of a decentralized sequencer mode. For detailed information on this architecture, see the <a href="./../../adr/adr-014-header-and-data-separation">Header and Data Separation ADR</a></li><li>Components process blocks with a minimal header format, which is designed to eliminate dependency on CometBFT&#39;s header format and can be used to produce an execution layer tailored header if needed. For details on this header structure, see the <a href="./../../adr/adr-015-rollkit-minimal-header">Evolve Minimal Header</a> specification</li></ul><h2 id="metrics" tabindex="-1">Metrics <a class="header-anchor" href="#metrics" aria-label="Permalink to &quot;Metrics&quot;">​</a></h2><p>The block components expose comprehensive metrics for monitoring through the shared Metrics instance:</p><h3 id="block-production-metrics-executor-component" tabindex="-1">Block Production Metrics (Executor Component) <a class="header-anchor" href="#block-production-metrics-executor-component" aria-label="Permalink to &quot;Block Production Metrics (Executor Component)&quot;">​</a></h3><ul><li><code>last_block_produced_height</code>: Height of the last produced block</li><li><code>last_block_produced_time</code>: Timestamp of the last produced block</li><li><code>aggregation_type</code>: Current aggregation mode (normal/lazy)</li><li><code>block_size_bytes</code>: Size distribution of produced blocks</li><li><code>produced_empty_blocks_total</code>: Count of empty blocks produced</li></ul><h3 id="da-metrics-submitter-and-syncer-components" tabindex="-1">DA Metrics (Submitter and Syncer Components) <a class="header-anchor" href="#da-metrics-submitter-and-syncer-components" aria-label="Permalink to &quot;DA Metrics (Submitter and Syncer Components)&quot;">​</a></h3><ul><li><code>da_submission_attempts_total</code>: Total DA submission attempts</li><li><code>da_submission_success_total</code>: Successful DA submissions</li><li><code>da_submission_failure_total</code>: Failed DA submissions</li><li><code>da_retrieval_attempts_total</code>: Total DA retrieval attempts</li><li><code>da_retrieval_success_total</code>: Successful DA retrievals</li><li><code>da_retrieval_failure_total</code>: Failed DA retrievals</li><li><code>da_height</code>: Current DA retrieval height</li><li><code>pending_headers_count</code>: Number of headers pending DA submission</li><li><code>pending_data_count</code>: Number of data blocks pending DA submission</li></ul><h3 id="sync-metrics-syncer-component" tabindex="-1">Sync Metrics (Syncer Component) <a class="header-anchor" href="#sync-metrics-syncer-component" aria-label="Permalink to &quot;Sync Metrics (Syncer Component)&quot;">​</a></h3><ul><li><code>sync_height</code>: Current sync height</li><li><code>da_included_height</code>: Height of last DA-included block</li><li><code>soft_confirmed_height</code>: Height of last soft confirmed block</li><li><code>header_store_height</code>: Current header store height</li><li><code>data_store_height</code>: Current data store height</li></ul><h3 id="performance-metrics-all-components" tabindex="-1">Performance Metrics (All Components) <a class="header-anchor" href="#performance-metrics-all-components" aria-label="Permalink to &quot;Performance Metrics (All Components)&quot;">​</a></h3><ul><li><code>block_production_time</code>: Time to produce a block</li><li><code>da_submission_time</code>: Time to submit to DA</li><li><code>state_update_time</code>: Time to apply block and update state</li><li><code>channel_buffer_usage</code>: Usage of internal channels</li></ul><h3 id="error-metrics-all-components" tabindex="-1">Error Metrics (All Components) <a class="header-anchor" href="#error-metrics-all-components" aria-label="Permalink to &quot;Error Metrics (All Components)&quot;">​</a></h3><ul><li><code>errors_total</code>: Total errors by type and operation</li></ul><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><p>The modular block components are implemented in the following packages:</p><ul><li><a href="https://github.com/evstack/ev-node/blob/main/block/internal/executing/executor.go" target="_blank" rel="noreferrer">Executor</a>: Block production and state transitions (<code>block/internal/executing/</code>)</li><li><a href="https://github.com/evstack/ev-node/blob/main/block/internal/reaping/reaper.go" target="_blank" rel="noreferrer">Reaper</a>: Transaction collection and submission (<code>block/internal/reaping/</code>)</li><li><a href="https://github.com/evstack/ev-node/blob/main/block/internal/submitting/submitter.go" target="_blank" rel="noreferrer">Submitter</a>: DA submission logic (<code>block/internal/submitting/</code>)</li><li><a href="https://github.com/evstack/ev-node/blob/main/block/internal/syncing/syncer.go" target="_blank" rel="noreferrer">Syncer</a>: Block synchronization from DA and P2P (<code>block/internal/syncing/</code>)</li><li><a href="https://github.com/evstack/ev-node/blob/main/block/internal/cache/manager.go" target="_blank" rel="noreferrer">Cache Manager</a>: Coordination and state tracking (<code>block/internal/cache/</code>)</li><li><a href="https://github.com/evstack/ev-node/blob/main/block/components.go" target="_blank" rel="noreferrer">Components</a>: Main components orchestration (<code>block/components.go</code>)</li></ul><p>See <a href="https://ev.xyz/guides/full-node" target="_blank" rel="noreferrer">tutorial</a> for running a multi-node network with both aggregator and non-aggregator full nodes.</p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><p>[1] <a href="https://github.com/celestiaorg/go-header" target="_blank" rel="noreferrer">Go Header</a></p><p>[2] <a href="https://github.com/evstack/ev-node/blob/main/pkg/sync/sync_service.go" target="_blank" rel="noreferrer">Block Sync</a></p><p>[3] <a href="https://github.com/evstack/ev-node/blob/main/node/full.go" target="_blank" rel="noreferrer">Full Node</a></p><p>[4] <a href="https://github.com/evstack/ev-node/blob/main/block/components.go" target="_blank" rel="noreferrer">Block Components</a></p><p>[5] <a href="https://ev.xyz/guides/full-node" target="_blank" rel="noreferrer">Tutorial</a></p><p>[6] <a href="./../../adr/adr-014-header-and-data-separation">Header and Data Separation ADR</a></p><p>[7] <a href="./../../adr/adr-015-rollkit-minimal-header">Evolve Minimal Header</a></p><p>[8] <a href="./da">Data Availability</a></p><p>[9] <a href="./../../adr/adr-021-lazy-aggregation">Lazy Aggregation with DA Layer Consistency ADR</a></p>',56))])}const S=d(g,[["render",b]]);export{C as __pageData,S as default};
