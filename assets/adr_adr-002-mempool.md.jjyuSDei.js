import{_ as o,c as l,ag as t,o as i}from"./chunks/framework.DlgP5dhN.js";const u=JSON.parse('{"title":"Mempool","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Mempool | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"adr/adr-002-mempool.md","filePath":"adr/adr-002-mempool.md","lastUpdated":1753098206000}'),a={name:"adr/adr-002-mempool.md"};function r(n,e,s,m,d,p){return i(),l("div",null,e[0]||(e[0]=[t('<h1 id="mempool" tabindex="-1">Mempool <a class="header-anchor" href="#mempool" aria-label="Permalink to &quot;Mempool&quot;">​</a></h1><p>For now, mempool implementation from lazyledger-core/Tendermint will be used.</p><h2 id="pros" tabindex="-1">Pros <a class="header-anchor" href="#pros" aria-label="Permalink to &quot;Pros&quot;">​</a></h2><ul><li>good integration with other re-used code (see ADR-001)</li><li>well tested</li><li>glue code is not required</li><li>it will be updated in case of ABCI++ adoption</li><li>mempool doesn&#39;t depend on P2P layer, so it&#39;s easy to replace it with libp2p</li><li>mempool does not require any knowledge about the internal structure of the Txs and is already &quot;abci-ready&quot;</li></ul><h2 id="cons" tabindex="-1">Cons <a class="header-anchor" href="#cons" aria-label="Permalink to &quot;Cons&quot;">​</a></h2><ul><li>inherit all limitations of the tendermint mempool <ul><li>no prioritization of Txs</li><li>many <a href="https://github.com/cometbft/cometbft/issues?q=is%3Aissue+is%3Aopen+mempool+label%3AC%3Amempool" target="_blank" rel="noreferrer">open issues</a></li></ul></li><li>legacy code base (the tendermint mempool exists for a while now)</li></ul><h2 id="alternatives" tabindex="-1">Alternatives <a class="header-anchor" href="#alternatives" aria-label="Permalink to &quot;Alternatives&quot;">​</a></h2><ul><li>Implementation from scratch <ul><li>time consuming</li><li>error prone</li></ul></li><li>Re-using other mempool (Celo, Prysm, etc) <ul><li>different API</li><li>potential licensing issues</li></ul></li></ul>',8)]))}const h=o(a,[["render",r]]);export{u as __pageData,h as default};
