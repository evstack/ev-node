import{_ as s,c as e,ag as a,o as t}from"./chunks/framework.DlgP5dhN.js";const k=JSON.parse('{"title":"ADR 13: Single Sequencer","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"ADR 13: Single Sequencer | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"adr/adr-013-single-sequencer.md","filePath":"adr/adr-013-single-sequencer.md","lastUpdated":1753438408000}'),n={name:"adr/adr-013-single-sequencer.md"};function l(h,i,r,o,c,p){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="adr-13-single-sequencer" tabindex="-1">ADR 13: Single Sequencer <a class="header-anchor" href="#adr-13-single-sequencer" aria-label="Permalink to &quot;ADR 13: Single Sequencer&quot;">​</a></h1><h2 id="changelog" tabindex="-1">Changelog <a class="header-anchor" href="#changelog" aria-label="Permalink to &quot;Changelog&quot;">​</a></h2><ul><li>2024-10-01: Initial draft</li></ul><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>Rollkit supports modular sequencer implementations and a single sequencer is a simple and efficient solution that can serve as a starting point for developers who don&#39;t need the complexity of a decentralized sequencing solution.</p><p>The single sequencer needs to implement the Generic Sequencer interface defined in the <code>core/sequencer</code> package, provide transaction batching capabilities, and reliably submit these batches to a DA layer. It should also maintain state to track submitted batches and provide verification capabilities.</p><h2 id="alternative-approaches" tabindex="-1">Alternative Approaches <a class="header-anchor" href="#alternative-approaches" aria-label="Permalink to &quot;Alternative Approaches&quot;">​</a></h2><h3 id="decentralized-sequencer" tabindex="-1">Decentralized Sequencer <a class="header-anchor" href="#decentralized-sequencer" aria-label="Permalink to &quot;Decentralized Sequencer&quot;">​</a></h3><p>A decentralized sequencer would distribute the sequencing responsibility across multiple nodes, providing better censorship resistance and fault tolerance. However, this approach introduces significant complexity in terms of consensus, leader election, and coordination between nodes. It would also require more resources to operate and maintain.</p><p>This approach was not chosen for the initial implementation because:</p><ol><li>It adds unnecessary complexity for many use cases</li><li>It requires more development time and resources</li><li>Many projects start with a single sequencer and gradually move towards decentralization</li></ol><h3 id="embedded-sequencer-in-nodes" tabindex="-1">Embedded Sequencer in Nodes <a class="header-anchor" href="#embedded-sequencer-in-nodes" aria-label="Permalink to &quot;Embedded Sequencer in Nodes&quot;">​</a></h3><p>Another approach would be to embed sequencing functionality directly into nodes. This would simplify the architecture by eliminating a separate sequencer component.</p><p>This approach was not chosen because:</p><ol><li>It couples sequencing logic with node logic, reducing modularity</li><li>It makes it harder to upgrade or replace the sequencing component independently</li><li>It doesn&#39;t allow for a dedicated sequencing service that can be optimized separately</li></ol><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><p>We implement a standalone single sequencer that:</p><ol><li>Implements the Generic Sequencer interface from the <code>core/sequencer</code> package</li><li>Batches transactions and submits them to a DA layer at regular intervals</li><li>Provides metrics for monitoring and observability</li></ol><p>The single sequencer is a separate repository and can be deployed as a standalone service or as a Docker container.</p><h2 id="detailed-design" tabindex="-1">Detailed Design <a class="header-anchor" href="#detailed-design" aria-label="Permalink to &quot;Detailed Design&quot;">​</a></h2><h3 id="user-requirements" tabindex="-1">User Requirements <a class="header-anchor" href="#user-requirements" aria-label="Permalink to &quot;User Requirements&quot;">​</a></h3><ul><li>Developers need a simple, reliable sequencer that can order transactions and submit them to a DA layer</li><li>The sequencer should be easy to deploy and configure</li><li>The sequencer should provide metrics for monitoring</li><li>The sequencer should be able to recover from crashes and maintain state</li></ul><h3 id="systems-affected" tabindex="-1">Systems Affected <a class="header-anchor" href="#systems-affected" aria-label="Permalink to &quot;Systems Affected&quot;">​</a></h3><ul><li>Nodes that interact with the sequencer</li><li>DA layer where batches are submitted</li></ul><h3 id="data-structures" tabindex="-1">Data Structures <a class="header-anchor" href="#data-structures" aria-label="Permalink to &quot;Data Structures&quot;">​</a></h3><p>The single sequencer uses the following key data structures:</p><ol><li><p><strong>BatchQueue</strong>: A queue to store batches of transactions waiting to be processed</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BatchQueue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    queue []</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequencing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Batch</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // In-memory queue of batches waiting to be processed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mu    </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mutex</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Mutex to ensure thread-safe access to the queue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Sequencer</strong>: The main sequencer structure that implements the Generic Sequencer interface</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sequencer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dalc      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">da</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DAClient</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Client for interacting with the Data Availability layer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    batchTime </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Duration</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Time interval between batch submissions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx       </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Context for controlling the sequencer&#39;s lifecycle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    maxSize   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // Maximum size of a batch in bytes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chainId </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sequencing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ChainId</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Identifier for the chain this sequencer serves</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tq                 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TransactionQueue</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Queue for storing pending transactions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lastBatchHash      []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // Hash of the last processed batch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lastBatchHashMutex </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RWMutex</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Mutex for thread-safe access to lastBatchHash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    seenBatches      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Map to track batches that have been processed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    seenBatchesMutex </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mutex</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // Mutex for thread-safe access to seenBatches</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bq               </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BatchQueue</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Queue for storing batches ready for processing</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    db    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">badger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DB</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // BadgerDB instance for persistent storage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dbMux </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mutex</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Mutex for safe concurrent DB access</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    metrics </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Metrics</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Structure to hold metrics for monitoring</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Metrics</strong>: Structure to hold metrics for monitoring</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Metrics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GasPrice            </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gauge</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Tracks the gas price used for DA submissions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LastBlobSize        </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gauge</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Tracks the size of the last submitted blob</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TransactionStatus   </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Counter</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Counts transaction status outcomes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    NumPendingBlocks    </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gauge</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Tracks the number of blocks waiting to be submitted</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    IncludedBlockHeight </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gauge</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Tracks the height of the last included block in the DA layer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h3 id="apis" tabindex="-1">APIs <a class="header-anchor" href="#apis" aria-label="Permalink to &quot;APIs&quot;">​</a></h3><p>The single sequencer implements the Generic Sequencer interface from the <code>core/sequencer</code> package:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sequencer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    SubmitBatchTxs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubmitBatchTxsRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SubmitBatchTxsResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    GetNextBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetNextBatchRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetNextBatchResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    VerifyBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VerifyBatchRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VerifyBatchResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol><li><p><strong>SubmitBatchTxs</strong>:</p><ul><li>This method is responsible for accepting a batch of transactions from a client. It takes a context and a request containing the chain ID and the batch of transactions to be submitted.</li><li>The method first validates the chain ID to ensure it matches the expected ID for the sequencer. If the ID is invalid, it returns an error.</li><li>Upon successful validation, the method adds the transactions to the internal transaction queue (<code>TransactionQueue</code>) for processing.</li><li>It then triggers the batch submission process, which involves retrieving the next batch of transactions and submitting them to the designated Data Availability (DA) layer.</li><li>Finally, it returns a response indicating the success or failure of the submission.</li></ul></li><li><p><strong>GetNextBatch</strong>:</p><ul><li>This method retrieves the next batch of transactions that are ready to be processed by the application. It takes a context and a request containing the chain ID and the last batch hash.</li><li>The method first checks if the chain ID is valid. If not, it returns an error.</li><li>It then verifies the last batch hash to ensure that the client is requesting the correct next batch.</li><li>If a valid batch is found, it prepares the batch response, which includes the batch of transactions and a timestamp.</li><li>If no transactions are available, it returns an empty batch response.</li></ul><p>Note that this method is used by the node to get a sequencer soft-confirmed batch that the sequencer promises to publish to the DA layer.</p></li><li><p><strong>VerifyBatch</strong>:</p><ul><li>This method is used to verify the that a batch received (soft-confirmed) from the sequencer was actually published on the DA layer. It takes a context and a request containing the chain ID and the batch hash.</li><li>Similar to the other methods, it first validates the chain ID.</li><li>It then checks if the provided batch hash exists in the internal data structure that tracks seen batches.</li><li>If the batch hash is found, it returns a response indicating that the batch is valid. If not, it returns a response indicating that the batch is invalid.</li></ul><p>Once this method returns true for batch, a node can mark the block associated to this batch as <code>DA included</code> and mark it as fully confirmed from its view.</p></li></ol><p>These methods work together to ensure that the single sequencer can effectively manage transaction submissions, retrievals, and verifications, providing a reliable interface for clients to interact with the sequencer.</p><h3 id="efficiency-considerations" tabindex="-1">Efficiency Considerations <a class="header-anchor" href="#efficiency-considerations" aria-label="Permalink to &quot;Efficiency Considerations&quot;">​</a></h3><ul><li>The sequencer uses a configurable batch time to balance between latency and efficiency</li><li>Transactions are batched to reduce the number of DA submissions</li><li>The sequencer maintains an in-memory queue for fast access and a persistent database for durability</li><li>Exponential backoff is used for DA submission retries to handle temporary failures</li></ul><h3 id="access-patterns" tabindex="-1">Access Patterns <a class="header-anchor" href="#access-patterns" aria-label="Permalink to &quot;Access Patterns&quot;">​</a></h3><ul><li>Clients will submit transactions to the sequencer at varying rates</li><li>The sequencer will batch transactions and submit them to the DA layer at regular intervals</li><li>Nodes will request the next batch from the sequencer to process transactions</li></ul><h3 id="logging-monitoring-and-observability" tabindex="-1">Logging, Monitoring, and Observability <a class="header-anchor" href="#logging-monitoring-and-observability" aria-label="Permalink to &quot;Logging, Monitoring, and Observability&quot;">​</a></h3><p>The sequencer provides the following metrics:</p><ul><li>Gas price of DA submissions</li><li>Size of the last submitted blob</li><li>Transaction status counts</li><li>Number of pending blocks</li><li>Last included block height</li></ul><p>These metrics can be exposed via Prometheus for monitoring.</p><h3 id="security-considerations" tabindex="-1">Security Considerations <a class="header-anchor" href="#security-considerations" aria-label="Permalink to &quot;Security Considerations&quot;">​</a></h3><ul><li>The single sequencer is a single point of failure and control</li><li>Access control is not implemented in the initial version, but can be added in future versions</li><li>The sequencer validates chain IDs to ensure transactions are submitted to the correct application</li></ul><h3 id="privacy-considerations" tabindex="-1">Privacy Considerations <a class="header-anchor" href="#privacy-considerations" aria-label="Permalink to &quot;Privacy Considerations&quot;">​</a></h3><ul><li>The sequencer has access to all transactions before they are submitted to the DA layer</li><li>Transactions are not encrypted, so sensitive data should not be included in transactions</li></ul><h3 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>The single sequencer includes:</p><ul><li>Unit tests for core functionality</li><li>Integration tests with a mock DA layer</li><li>Test coverage reporting via Codecov</li></ul><h3 id="breaking-changes" tabindex="-1">Breaking Changes <a class="header-anchor" href="#breaking-changes" aria-label="Permalink to &quot;Breaking Changes&quot;">​</a></h3><p>This is a new component and does not introduce breaking changes to existing systems.</p><h2 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h2><p>Proposed</p><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><h3 id="positive" tabindex="-1">Positive <a class="header-anchor" href="#positive" aria-label="Permalink to &quot;Positive&quot;">​</a></h3><ul><li>Provides a simple, production-ready sequencer for developers</li><li>Implements the Generic Sequencer interface, making it compatible with existing Rollkit components</li><li>Includes metrics for monitoring and observability</li><li>Maintains state to track submitted batches and provide verification</li><li>Can be deployed as a standalone service or as a Docker container</li></ul><h3 id="negative" tabindex="-1">Negative <a class="header-anchor" href="#negative" aria-label="Permalink to &quot;Negative&quot;">​</a></h3><ul><li>Single design introduces a single point of failure</li><li>No built-in access control or authentication in the initial version</li><li>Limited scalability compared to a distributed sequencer</li></ul><h3 id="neutral" tabindex="-1">Neutral <a class="header-anchor" href="#neutral" aria-label="Permalink to &quot;Neutral&quot;">​</a></h3><ul><li>Requires a separate deployment and management of the sequencer service</li><li>Developers need to configure the sequencer to connect to their chosen DA layer</li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://github.com/evstack/ev-node/blob/main/core/sequencer/sequencing.go" target="_blank" rel="noreferrer">Generic Sequencer Interface</a></li><li><a href="https://github.com/evstack/ev-node" target="_blank" rel="noreferrer">Rollkit Repository</a></li><li><a href="https://github.com/rollkit/centralized-sequencer" target="_blank" rel="noreferrer">Single Sequencer Repository</a></li></ul>`,60)]))}const u=s(n,[["render",l]]);export{k as __pageData,u as default};
