import{_ as t,c as o,ag as a,o as r}from"./chunks/framework.CmpABV1Y.js";const p=JSON.parse('{"title":"Store","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Store | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"learn/specs/store.md","filePath":"learn/specs/store.md","lastUpdated":1758264421000}'),i={name:"learn/specs/store.md"};function s(n,e,l,d,c,h){return r(),o("div",null,e[0]||(e[0]=[a('<h1 id="store" tabindex="-1">Store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;Store&quot;">​</a></h1><h2 id="abstract" tabindex="-1">Abstract <a class="header-anchor" href="#abstract" aria-label="Permalink to &quot;Abstract&quot;">​</a></h2><p>The Store interface defines methods for storing and retrieving blocks, commits, and the state of the blockchain.</p><h2 id="protocol-component-description" tabindex="-1">Protocol/Component Description <a class="header-anchor" href="#protocol-component-description" aria-label="Permalink to &quot;Protocol/Component Description&quot;">​</a></h2><p>The Store interface defines the following methods:</p><ul><li><code>Height</code>: Returns the height of the highest block in the store.</li><li><code>SetHeight</code>: Sets given height in the store if it&#39;s higher than the existing height in the store.</li><li><code>SaveBlock</code>: Saves a block (containing both header and data) along with its seen signature.</li><li><code>GetBlock</code>: Returns a block at a given height.</li><li><code>GetBlockByHash</code>: Returns a block with a given block header hash.</li></ul><p>Note: While blocks are stored as complete units in the store, the block components handle headers and data separately during synchronization and DA layer interaction.</p><ul><li><code>SaveBlockResponses</code>: Saves block responses in the Store.</li><li><code>GetBlockResponses</code>: Returns block results at a given height.</li><li><code>GetSignature</code>: Returns a signature for a block at a given height.</li><li><code>GetSignatureByHash</code>: Returns a signature for a block with a given block header hash.</li><li><code>UpdateState</code>: Updates the state saved in the Store. Only one State is stored.</li><li><code>GetState</code>: Returns the last state saved with UpdateState.</li><li><code>SaveValidators</code>: Saves the validator set at a given height.</li><li><code>GetValidators</code>: Returns the validator set at a given height.</li></ul><p>The <code>TxnDatastore</code> interface inside <a href="https://github.com/ipfs/go-datastore" target="_blank" rel="noreferrer">go-datastore</a> is used for constructing different key-value stores for the underlying storage of a full node. There are two different implementations of <code>TxnDatastore</code> in <a href="https://github.com/evstack/ev-node/blob/main/pkg/store/kv.go" target="_blank" rel="noreferrer">kv.go</a>:</p><ul><li><p><code>NewDefaultInMemoryKVStore</code>: Builds a key-value store that uses the <a href="https://github.com/dgraph-io/badger" target="_blank" rel="noreferrer">BadgerDB</a> library and operates in-memory, without accessing the disk. Used only across unit tests and integration tests.</p></li><li><p><code>NewDefaultKVStore</code>: Builds a key-value store that uses the <a href="https://github.com/dgraph-io/badger" target="_blank" rel="noreferrer">BadgerDB</a> library and stores the data on disk at the specified path.</p></li></ul><p>A Evolve full node is <a href="https://github.com/evstack/ev-node/blob/main/node/full.go#L96" target="_blank" rel="noreferrer">initialized</a> using <code>NewDefaultKVStore</code> as the base key-value store for underlying storage. To store various types of data in this base key-value store, different prefixes are used: <code>mainPrefix</code>, <code>dalcPrefix</code>, and <code>indexerPrefix</code>. The <code>mainPrefix</code> equal to <code>0</code> is used for the main node data, <code>dalcPrefix</code> equal to <code>1</code> is used for Data Availability Layer Client (DALC) data, and <code>indexerPrefix</code> equal to <code>2</code> is used for indexing related data.</p><p>For the main node data, <code>DefaultStore</code> struct, an implementation of the Store interface, is used with the following prefixes for various types of data within it:</p><ul><li><code>blockPrefix</code> with value &quot;b&quot;: Used to store complete blocks in the key-value store.</li><li><code>indexPrefix</code> with value &quot;i&quot;: Used to index the blocks stored in the key-value store.</li><li><code>commitPrefix</code> with value &quot;c&quot;: Used to store commits related to the blocks.</li><li><code>statePrefix</code> with value &quot;s&quot;: Used to store the state of the blockchain.</li><li><code>responsesPrefix</code> with value &quot;r&quot;: Used to store responses related to the blocks.</li><li><code>validatorsPrefix</code> with value &quot;v&quot;: Used to store validator sets at a given height.</li></ul><p>Additional prefixes used by sync services:</p><ul><li><code>headerSyncPrefix</code> with value &quot;hs&quot;: Used by the header sync service for P2P synced headers.</li><li><code>dataSyncPrefix</code> with value &quot;ds&quot;: Used by the data sync service for P2P synced transaction data. For example, in a call to <code>GetBlockByHash</code> for some block hash <code>&lt;block_hash&gt;</code>, the key used in the full node&#39;s base key-value store will be <code>/0/b/&lt;block_hash&gt;</code> where <code>0</code> is the main store prefix and <code>b</code> is the block prefix. Similarly, in a call to <code>GetValidators</code> for some height <code>&lt;height&gt;</code>, the key used in the full node&#39;s base key-value store will be <code>/0/v/&lt;height&gt;</code> where <code>0</code> is the main store prefix and <code>v</code> is the validator set prefix.</li></ul><p>Inside the key-value store, the value of these various types of data like <code>Block</code> is stored as a byte array which is encoded and decoded using the corresponding Protobuf <a href="https://github.com/evstack/ev-node/blob/main/types/serialization.go" target="_blank" rel="noreferrer">marshal and unmarshal methods</a>.</p><p>The store is most widely used inside the <a href="https://github.com/evstack/ev-node/blob/main/block/components.go" target="_blank" rel="noreferrer">block components</a> to perform their functions correctly. Within the block components, since they have multiple go-routines, access is protected by mutex locks to synchronize read/write access and prevent race conditions.</p><h2 id="message-structure-communication-format" tabindex="-1">Message Structure/Communication Format <a class="header-anchor" href="#message-structure-communication-format" aria-label="Permalink to &quot;Message Structure/Communication Format&quot;">​</a></h2><p>The Store does not communicate over the network, so there is no message structure or communication format.</p><h2 id="assumptions-and-considerations" tabindex="-1">Assumptions and Considerations <a class="header-anchor" href="#assumptions-and-considerations" aria-label="Permalink to &quot;Assumptions and Considerations&quot;">​</a></h2><p>The Store assumes that the underlying datastore is reliable and provides atomicity for transactions. It also assumes that the data passed to it for storage is valid and correctly formatted.</p><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><p>See <a href="https://github.com/evstack/ev-node/blob/main/pkg/store/types.go#L11" target="_blank" rel="noreferrer">Store Interface</a> and <a href="https://github.com/evstack/ev-node/blob/main/pkg/store/store.go" target="_blank" rel="noreferrer">Default Store</a> for its implementation.</p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><p>[1] <a href="https://github.com/evstack/ev-node/blob/main/pkg/store/types.go#L11" target="_blank" rel="noreferrer">Store Interface</a></p><p>[2] <a href="https://github.com/evstack/ev-node/blob/main/pkg/store/store.go" target="_blank" rel="noreferrer">Default Store</a></p><p>[3] <a href="https://github.com/evstack/ev-node/blob/main/node/full.go#L96" target="_blank" rel="noreferrer">Full Node Store Initialization</a></p><p>[4] <a href="https://github.com/evstack/ev-node/blob/main/block/components.go" target="_blank" rel="noreferrer">Block Components</a></p><p>[5] <a href="https://github.com/dgraph-io/badger" target="_blank" rel="noreferrer">Badger DB</a></p><p>[6] <a href="https://github.com/ipfs/go-datastore" target="_blank" rel="noreferrer">Go Datastore</a></p><p>[7] <a href="https://github.com/evstack/ev-node/blob/main/pkg/store/kv.go" target="_blank" rel="noreferrer">Key Value Store</a></p><p>[8] <a href="https://github.com/evstack/ev-node/blob/main/types/serialization.go" target="_blank" rel="noreferrer">Serialization</a></p>',32)]))}const f=t(i,[["render",s]]);export{p as __pageData,f as default};
