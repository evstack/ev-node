// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	da "github.com/rollkit/rollkit/core/da"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DA is an autogenerated mock type for the DA type
type DA struct {
	mock.Mock
}

// Commit provides a mock function with given fields: ctx, blobs
func (_m *DA) Commit(ctx context.Context, blobs [][]byte) ([][]byte, error) {
	ret := _m.Called(ctx, blobs)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) ([][]byte, error)); ok {
		return rf(ctx, blobs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) [][]byte); ok {
		r0 = rf(ctx, blobs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte) error); ok {
		r1 = rf(ctx, blobs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GasMultiplier provides a mock function with given fields: ctx
func (_m *DA) GasMultiplier(ctx context.Context) (float64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GasMultiplier")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (float64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GasPrice provides a mock function with given fields: ctx
func (_m *DA) GasPrice(ctx context.Context) (float64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GasPrice")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (float64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, ids
func (_m *DA) Get(ctx context.Context, ids [][]byte) ([][]byte, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) ([][]byte, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) [][]byte); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIDs provides a mock function with given fields: ctx, height
func (_m *DA) GetIDs(ctx context.Context, height uint64) (*da.GetIDsResult, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetIDs")
	}

	var r0 *da.GetIDsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*da.GetIDsResult, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *da.GetIDsResult); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*da.GetIDsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProofs provides a mock function with given fields: ctx, ids
func (_m *DA) GetProofs(ctx context.Context, ids [][]byte) ([][]byte, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetProofs")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) ([][]byte, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) [][]byte); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Submit provides a mock function with given fields: ctx, blobs, gasPrice, options
func (_m *DA) Submit(ctx context.Context, blobs [][]byte, gasPrice float64, options []byte) ([][]byte, error) {
	ret := _m.Called(ctx, blobs, gasPrice, options)

	if len(ret) == 0 {
		panic("no return value specified for Submit")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, float64, []byte) ([][]byte, error)); ok {
		return rf(ctx, blobs, gasPrice, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, float64, []byte) [][]byte); ok {
		r0 = rf(ctx, blobs, gasPrice, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte, float64, []byte) error); ok {
		r1 = rf(ctx, blobs, gasPrice, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: ctx, ids, proofs
func (_m *DA) Validate(ctx context.Context, ids [][]byte, proofs [][]byte) ([]bool, error) {
	ret := _m.Called(ctx, ids, proofs)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 []bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, [][]byte) ([]bool, error)); ok {
		return rf(ctx, ids, proofs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, [][]byte) []bool); ok {
		r0 = rf(ctx, ids, proofs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte, [][]byte) error); ok {
		r1 = rf(ctx, ids, proofs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDA creates a new instance of DA. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDA(t interface {
	mock.TestingT
	Cleanup(func())
}) *DA {
	mock := &DA{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
